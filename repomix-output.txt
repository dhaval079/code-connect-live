This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T13:01:21.596Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    editor/
      [roomid]/
        page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    ui/
      button.tsx
      scroll-area.tsx
      select.tsx
      skeleton.tsx
      slider.tsx
      tabs.tsx
    AnimatedBackground.tsx
    Chat.tsx
    Client.tsx
    Editor.tsx
    Gsap.tsx
    Language.tsx
    monaco-editor.tsx
    TypingIndicator.tsx
  lib/
    actions.ts
    editor-types.ts
    socket.ts
    utils.ts
  providers/
    sockcet-provider.tsx
  types/
    env.d.ts
.gitignore
components.json
next.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/editor/[roomid]/page.tsx
================
"use client"
import { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence, useAnimation } from "framer-motion"
import { toast } from "sonner"
import { useParams, useSearchParams } from "next/navigation"
import { ACTIONS } from "@/lib/actions"
import {
  Copy,
  LogOut,
  Play,
  ChevronRight,
  ChevronLeft,
  Maximize2,
  Minimize2,
  Sun,
  Moon,
  Settings,
  Save,
  Download,
  Share,
  Upload,
} from "lucide-react"
import { Resizable } from "re-resizable"
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter"
import { dracula } from "react-syntax-highlighter/dist/cjs/styles/prism"
import { useSocket } from "@/providers/sockcet-provider"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import dynamic from 'next/dynamic';
import { Client } from "@/components/Client"
import { Chat } from "@/components/Chat"

const MonacoEditor = dynamic(() => import('@/components/monaco-editor'), { ssr: false });

export default function EditorPage() {
  // Socket and Client State
  const socketRef = useRef<any>(null)
  const [clients, setClients] = useState<{ socketId: string; username: string }[]>([])
  // const [username, setUsername] = useState("")
  const params = useParams()
  const searchParams = useSearchParams();
  const roomId = params?.roomid
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [isSocketConnected, setIsSocketConnected] = useState(false)
  const [connectionStatus, setConnectionStatus] = useState<"connecting" | "connected" | "failed">("connecting")
  const username = searchParams.get('username');
  const [typingUser, setTypingUser] = useState<string | null>(null);
  const [consoleHeight, setConsoleHeight] = useState(150);

  // Editor State
  const [fontSize, setFontSize] = useState(14)
  const [language, setLanguage] = useState("javascript")
  const [theme, setTheme] = useState("dracula")

  // UI State
  const [isSidebarOpen, setIsSidebarOpen] = useState(true)
  const [isOutputPanelOpen, setIsOutputPanelOpen] = useState(true)
  const [isDarkMode, setIsDarkMode] = useState(true)
  const [activeTab, setActiveTab] = useState("code")
  const [isSettingsOpen, setIsSettingsOpen] = useState(false)

  // Refs
  const editorRef = useRef(null)
  const outputRef = useRef(null)
  const controls = useAnimation()
  const [code, setCode] = useState("// Start coding here...")
  const [typingUsers, setTypingUsers] = useState(new Set())
  const [output, setOutput] = useState("")
  const typingTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined)
  const [consoleOutput, setConsoleOutput] = useState<Array<{ type: 'log' | 'error' | 'info', content: string }>>([])
  const lastTypingEventRef = useRef<number>(0);
  const TYPING_INTERVAL = 1000; // Minimum time between typing events in ms
  const { socket, isConnected } = useSocket()

  useEffect(() => {
    if (!socket || !isConnected) return

    if (!username || !roomId) {
      toast.error("Missing room ID or username")
      window.location.href = "/"
      return
    }

    console.log("Joining room with:", { roomId, username: username })

    socket.emit(ACTIONS.JOIN, {
      id: roomId,
      user: username,
    })

    // Handle join response
    socket.on(ACTIONS.JOINED, ({ clients, user, socketId }) => {
      console.log("JOINED event received:", { clients, user, socketId })
      toast.success(`${user} joined the room`);
      setClients(clients)
      setConnectionStatus("connected")
      setIsLoading(false)
    })

    socket.on(ACTIONS.DISCONNECTED, ({ socketId, user, clients: updatedClients }) => {
      console.log("DISCONNECTED event received:", { socketId, user, clients: updatedClients })
      setClients(updatedClients)
      toast.info(`${user} left the room`)
    })

    const handleBeforeUnload = () => {
      if (socket && roomId) {
        socket.emit(ACTIONS.LEAVE, { roomId })
      }
    }

    window.addEventListener('beforeunload', handleBeforeUnload)


    socket.on(ACTIONS.CODE_CHANGE, ({ code }) => {
      setCode(code)
    })

    socket.on(ACTIONS.SYNC_CODE, ({ code }) => {
      setCode(code)
    })

    // socket.on(ACTIONS.COMPILE_RESULT, ({ result, error }) => {
    //   setOutput(error || result)
    // })

    socket.on(ACTIONS.COMPILE_RESULT, ({ result, error }) => {
      if (error) {
        setOutput(error)
        setConsoleOutput(prev => [...prev, { type: 'error', content: error }])
      } else {
        setOutput(result)
        setConsoleOutput(prev => [...prev, { type: 'log', content: result }])
      }
    })

    socket.on(ACTIONS.TYPING, ({ username: typingUsername }) => {
      console.log('TYPING event received:', typingUsername);
      setTypingUsers(prev => new Set([...prev, typingUsername]));
    });

    socket.on(ACTIONS.STOP_TYPING, ({ username: stoppedUsername }) => {
      console.log('STOP_TYPING event received:', stoppedUsername);
      setTypingUsers(prev => {
        const newSet = new Set(prev);
        newSet.delete(stoppedUsername);
        return newSet;
      });
    });

    socket.on('error', handleSocketError)

    return () => {
    
      socket.off(ACTIONS.TYPING);
      socket.off(ACTIONS.STOP_TYPING);
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
      socket.off(ACTIONS.JOINED)
      socket.off(ACTIONS.DISCONNECTED)
      socket.off(ACTIONS.CODE_CHANGE)
      socket.off(ACTIONS.SYNC_CODE)
      handleBeforeUnload()
      window.removeEventListener('beforeunload', handleBeforeUnload)
      socket.off(ACTIONS.COMPILE_RESULT)
      socket.off('error')
    }
  }, [socket, isConnected,roomId, username])

  const clearConsole = () => setConsoleOutput([])


  const handleCodeChange = (value: string) => {
    setCode(value);
    socket?.emit(ACTIONS.CODE_CHANGE, { roomId, code: value });

    if (!username) return;

    // Clear any existing typing timeout
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }

    // Always emit typing event for the current user
    socket?.emit(ACTIONS.TYPING, {
      roomId,
      username
    });

    // Set timeout to clear typing status
    typingTimeoutRef.current = setTimeout(() => {
      socket?.emit(ACTIONS.STOP_TYPING, {
        roomId,
        username
      });
    }, 1000);
  };


  useEffect(() => {
    return () => {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    };
  }, []);

  // Run code handler
  const handleRunCode = () => {
    try {
      socket?.emit(ACTIONS.COMPILE, { roomId, code, language })
    } catch (err: any) {
      setOutput(`Error: ${err.message}`)
    }
  }

  // Event Handlers
  const handleSocketError = (err: any) => {
    console.error("Socket error:", err)
    toast.error(err.message || "Failed to connect to server. Please try again.")
  }



  const copyRoomId = async () => {
    try {
      // await navigator.clipboard.writeText(roomId);
      toast.success("Room ID copied to clipboard")
    } catch (err: any) {
      toast.error("Failed to copy room ID")
    }
  }

  const leaveRoom = () => {
    if (!window.confirm("Are you sure you want to leave?")) {
      return;
    }

    try {
      if (socket) {
        socket.emit(ACTIONS.LEAVE, { roomId });
        socket.disconnect();
      }
      window.location.href = "/";
    } catch (error) {
      console.error("Error leaving room:", error);
      toast.error("Failed to leave room");
    }
  };

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen()
      setIsFullscreen(true)
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen()
        setIsFullscreen(false)
      }
    }
  }

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode)
  }

  // const handleTyping = () => {
  //   clearTimeout(typingTimeoutRef.current);
  //   socket?.emit(ACTIONS.TYPING, {
  //     roomId,
  //     username
  //   });

  //   typingTimeoutRef.current = setTimeout(() => {
  //     socket?.emit(ACTIONS.STOP_TYPING, {
  //       roomId,
  //       username
  //     });
  //   }, 1000);
  // };

  const handleTabChange = (tab: any) => {
    setActiveTab(tab)
  }

  const toggleSettings = () => {
    setIsSettingsOpen(!isSettingsOpen)
  }

  const handleFontSizeChange = (e: any) => {
    setFontSize(Number.parseInt(e.target.value))
  }

  const handleLanguageChange = (e: any) => {
    setLanguage(e.target.value)
  }

  const handleThemeChange = (e: any) => {
    setTheme(e.target.value)
  }

  // Loading State Check
  if (isLoading && !isSocketConnected) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gray-900">
        <div className="text-xl text-white">Connecting to session...</div>
      </div>
    )
  }

  const sidebarVariants = {
    open: { x: 0, opacity: 1 },
    closed: { x: "-100%", opacity: 0 },
  }

  const buttonVariants = {
    hover: { scale: 1.05, transition: { type: "spring", stiffness: 400, damping: 10 } },
    tap: { scale: 0.95 },
  }

  const floatingButtonVariants = {
    hover: { scale: 1.1, y: -5, boxShadow: "0px 10px 20px rgba(0,0,0,0.2)" },
    tap: { scale: 0.9, y: 0, boxShadow: "0px 5px 10px rgba(0,0,0,0.2)" },
  }


  // Render loading state based on connection status
  if (connectionStatus === "connecting") {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
        <div className="flex flex-col items-center space-y-4">
          <div className="text-2xl font-bold text-white">Connecting to session...</div>
          <motion.div
            className="w-20 h-20 border-4 border-blue-500 border-t-transparent rounded-full"
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          />
        </div>
      </div>
    )
  }

  if (connectionStatus === "failed") {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
        <div className="flex flex-col items-center space-y-6 text-white">
          <div className="text-3xl font-bold">Failed to connect to session</div>
          <motion.button
            variants={buttonVariants}
            whileHover="hover"
            whileTap="tap"
            onClick={() => window.location.reload()}
            className="px-6 py-3 bg-blue-600 rounded-lg text-lg font-semibold hover:bg-blue-700 transition-colors"
          >
            Retry Connection
          </motion.button>
        </div>
      </div>
    )
  }


  return (
    <div className={`min-h-screen flex ${isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-900"}`}>
      {/* Sidebar */}
      <AnimatePresence>
        {isSidebarOpen && (
          <motion.div
            variants={sidebarVariants}
            initial="closed"
            animate="open"
            exit="closed"
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
            className="w-80 bg-gradient-to-b from-gray-800 to-gray-900 border-gray-700 border-r flex flex-col"
          >
            {/* Connected Users */}
            <ScrollArea className="flex-1 p-4">
              <h2 className="text-sm font-semibold text-gray-400 uppercase mb-4">
                Connected Users ({clients.length})
              </h2>
              <div className="space-y-3">
      {clients.map((client) => (
        <div key={client.socketId}>
          <Client
            user={client.username}
            isActive={client.socketId === socket?.id}
            isTyping={typingUsers.has(client.username)}
          />
        </div>
      ))}
    </div>
            </ScrollArea>

            {/* Room Controls */}
            <div className="p-4 border-t border-gray-700 space-y-3">
              <Button variant="secondary" className="w-full" onClick={copyRoomId}>
                <Copy className="h-5 w-5 mr-2" />
                Copy Room ID
              </Button>
              <Button variant="destructive" className="w-full" onClick={leaveRoom}>
                <LogOut className="h-5 w-5 mr-2" />
                Leave Room
              </Button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Editor Section */}
      <div className="flex-1 flex flex-col">
        {/* Editor Header */}
        <div
          className={`${isDarkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"
            } border-b p-4 flex items-center justify-between`}
        >
          <div className="flex items-center space-x-4">
            <Button variant="ghost" size="icon" onClick={() => setIsSidebarOpen(!isSidebarOpen)}>
              {isSidebarOpen ? <ChevronLeft className="h-5 w-5" /> : <ChevronRight className="h-5 w-5" />}
            </Button>
            <Button
              variant="default"
              className="bg-green-600 hover:bg-green-700"
              onClick={handleRunCode}
            >
              <Play className="h-5 w-5 mr-2" />
              Run Code
            </Button>
            <div className={`${isDarkMode ? "text-gray-400" : "text-gray-600"}`}>Language: {language}</div>
          </div>
          <div className="flex items-center space-x-2">
            <Button variant="ghost" size="icon" onClick={toggleFullscreen}>
              {isFullscreen ? <Minimize2 className="h-5 w-5" /> : <Maximize2 className="h-5 w-5" />}
            </Button>
            <Button variant="ghost" size="icon" onClick={toggleDarkMode}>
              {isDarkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
            </Button>
            <Button variant="ghost" size="icon" onClick={toggleSettings}>
              <Settings className="h-5 w-5" />
            </Button>
          </div>
        </div>

        {/* Editor and Output */}
        <div className="flex-1 flex">
          {/* Code Editor */}
          <div className="flex-1 flex flex-col overflow-hidden">
            <div className="flex-1" ref={editorRef}>
              <MonacoEditor
                roomId={roomId as string}
                language={language}
                theme={theme}
                fontSize={fontSize}
                value={code}
                onChange={handleCodeChange}
              />

            </div>

            <AnimatePresence>
            {isOutputPanelOpen && (
              <Resizable
              defaultSize={{ width: '100%', height: consoleHeight }}
              minHeight={100}
              maxHeight={300}
              enable={{ top: true }}
              onResizeStop={(e, direction, ref, d) => {
                setConsoleHeight(consoleHeight + d.height);
              }}
              >
                <motion.div
                  initial={{ opacity: 0, x: 300 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 300 }}
                  transition={{ type: "spring", stiffness: 300, damping: 30 }}
                  className={`h-full ${isDarkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"
                    } border-l flex flex-col`}
                >
                  <Tabs defaultValue="output" className="w-full">
                    <div className="flex justify-between items-center p-2 border-b border-gray-700">
                      <TabsList>
                        <TabsTrigger value="output">Output</TabsTrigger>
                        <TabsTrigger value="console">Console</TabsTrigger>
                      </TabsList>
                      <Button variant="ghost" size="icon" onClick={() => setIsOutputPanelOpen(false)}>
                        <ChevronRight className="h-5 w-5" />
                      </Button>
                    </div>
                    <TabsContent value="output" className="p-4 font-mono text-sm h-full">
                      <SyntaxHighlighter language="javascript" style={dracula} className="rounded-lg">
                        {output || "Run your code to see output"}
                      </SyntaxHighlighter>
                    </TabsContent>
                    <TabsContent value="console" className="p-4 font-mono text-sm h-full overflow-auto">
                      <div className="flex justify-between mb-2">
                        <span className="text-gray-400">Console</span>
                        <Button variant="ghost" size="sm" onClick={clearConsole}>Clear</Button>
                      </div>
                      {consoleOutput.map((log, i) => (
                        <div key={i} className={`mb-1 ${log.type === 'error' ? 'text-red-400' :
                          log.type === 'info' ? 'text-blue-400' : 'text-green-400'
                          }`}>
                          {log.content}
                        </div>
                      ))}
                    </TabsContent>
                  </Tabs>
                </motion.div>
              </Resizable>
            )}
          </AnimatePresence>

          </div>         

          <div className="w-80 border-l max-h-full border-gray-700">
            <Chat 
              roomId={roomId as string} 
              username={username || ''} 
            />
          </div>
        </div>
      </div>

      {/* Settings Panel */}
      <AnimatePresence>
        {isSettingsOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className={`absolute right-4 top-16 w-80 p-6 rounded-lg shadow-lg ${isDarkMode ? "bg-gray-800" : "bg-white"
              }`}
          >
            <h3 className="text-xl font-semibold mb-6">Settings</h3>
            <div className="space-y-6">
              <div>
                <label htmlFor="fontSize" className="block mb-2 text-sm font-medium">
                  Font Size: {fontSize}px
                </label>
                <Slider
                  id="fontSize"
                  min={10}
                  max={24}
                  step={1}
                  value={[fontSize]}
                  onValueChange={(value) => setFontSize(value[0])}
                />
              </div>
              <div>
                <label htmlFor="language" className="block mb-2 text-sm font-medium">
                  Language
                </label>
                <Select value={language} onValueChange={setLanguage}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a language" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="javascript">JavaScript</SelectItem>
                    <SelectItem value="python">Python</SelectItem>
                    <SelectItem value="java">Java</SelectItem>
                    <SelectItem value="cpp">C++</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <label htmlFor="theme" className="block mb-2 text-sm font-medium">
                  Theme
                </label>
                <Select value={theme} onValueChange={setTheme}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a theme" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="dracula">Dracula</SelectItem>
                    <SelectItem value="monokai">Monokai</SelectItem>
                    <SelectItem value="github">GitHub</SelectItem>
                    <SelectItem value="solarized">Solarized</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {!isOutputPanelOpen && (
        <Button
          variant="ghost"
          size="icon"
          className="fixed right-0 top-1/2 transform -translate-y-1/2"
          onClick={() => setIsOutputPanelOpen(true)}
        >
          <ChevronLeft className="h-5 w-5" />
        </Button>
      )}

      {/* Floating Action Buttons */}
      {/* <div className="fixed bottom-8 right-8 flex flex-col space-y-4">
        <motion.button
          variants={floatingButtonVariants}
          whileHover="hover"
          whileTap="tap"
          className="p-3 bg-blue-600 text-white rounded-full shadow-lg"
        >
          <Save className="h-6 w-6" />
        </motion.button>
        <motion.button
          variants={floatingButtonVariants}
          whileHover="hover"
          whileTap="tap"
          className="p-3 bg-green-600 text-white rounded-full shadow-lg"
        >
          <Share className="h-6 w-6" />
        </motion.button>
        <motion.button
          variants={floatingButtonVariants}
          whileHover="hover"
          whileTap="tap"
          className="p-3 bg-purple-600 text-white rounded-full shadow-lg"
        >
          <Download className="h-6 w-6" />
        </motion.button>
        <motion.button
          variants={floatingButtonVariants}
          whileHover="hover"
          whileTap="tap"
          className="p-3 bg-orange-600 text-white rounded-full shadow-lg"
        >
          <Upload className="h-6 w-6" />
        </motion.button>
      </div> */}
    </div>
  )
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .scroll-section {
    @apply relative min-h-screen w-full;
  }
  
  .parallax-bg {
    @apply relative w-full h-full transform will-change-transform;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
// src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "next-themes";
import { Toaster } from "sonner";
import { SocketProvider } from "@/providers/sockcet-provider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Code Connect",
  description: "Real-time collaborative code editor",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <ThemeProvider attribute="class">
          <SocketProvider>
            {children}
            <Toaster 
              expand={false}
              position="top-center"
              richColors
              theme="dark"
            />
          </SocketProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
"use client";

import { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence, useAnimation, useInView } from "framer-motion"
import { v4 as uuidV4 } from "uuid";
import { toast } from "sonner";
import {
  Coffee,
  Copy,
  Hexagon,
  Sparkles,
  Code,
  Terminal,
  Zap,
  ChevronRight,
  Globe,
  Users,
  Laptop,
  Server,
  GitBranch,
  Boxes,
} from "lucide-react"
import { cn } from "@/lib/utils"
import AnimatedBackground from "@/components/AnimatedBackground"
import LanguageSelector from "@/components/Language"

import { ReactNode } from "react";
// import { useRouter } from "next/navigation"; // Make sure to import from next/navigation
import { url } from "inspector";

const GlowingButton = ({ children, className, onClick, disabled, ...props }) => {
  const buttonRef = useRef(null);
  const [isHovered, setIsHovered] = useState(false);

  const handleClick = (e:any) => {
    console.log("Button clicked"); // Debug log
    if (onClick) {
      onClick(e);
    }
  };

  return (
    <motion.button
      ref={buttonRef}
      className={cn(
        "relative overflow-hidden px-6 py-3 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500 text-white font-medium",
        "shadow-lg shadow-cyan-500/20 hover:shadow-cyan-500/40 transition-all duration-300",
        disabled ? "opacity-50 cursor-not-allowed" : "",
        className,
      )}
      onClick={handleClick}
      disabled={disabled}
      whileHover={!disabled ? { scale: 1.05 } : {}}
      whileTap={!disabled ? { scale: 0.95 } : {}}
      onHoverStart={() => !disabled && setIsHovered(true)}
      onHoverEnd={() => !disabled && setIsHovered(false)}
      {...props}
    >
      {children}
    </motion.button>
  );
};

const FuturisticInput = ({ label, icon: Icon, ...props }: { label: string; icon: any; [key: string]: any }) => {
  const [isFocused, setIsFocused] = useState(false)

  return (
    <div className="space-y-2 relative">
      <label className="text-sm font-medium text-cyan-300" htmlFor={props.id}>
        {label}
      </label>
      <div className="relative group">
        <input
          {...props}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          className="w-full bg-slate-800/50 border-2 border-cyan-500/20 text-white placeholder:text-slate-500 rounded-lg px-4 py-2 pl-10 focus:outline-none focus:ring-2 focus:ring-cyan-500/40 transition-all duration-300"
        />
        <Icon className="absolute left-3 top-1/2 -translate-y-1/2 text-cyan-500 w-5 h-5" />
        <AnimatePresence>
          {isFocused && (
            <motion.div
              className="absolute inset-0 rounded-lg border-2 border-cyan-500/50"
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.95 }}
              transition={{ duration: 0.2 }}
            />
          )}
        </AnimatePresence>
      </div>
    </div>
  )
}

const FloatingHexagon = ({ delay = 0 }) => (
  <motion.div
    className="absolute"
    style={{
      top: `${Math.random() * 100}%`,
      left: `${Math.random() * 100}%`,
    }}
    initial={{ opacity: 0, scale: 0 }}
    animate={{
      opacity: [0.1, 0.3, 0.1],
      scale: [1, 1.2, 1],
      rotate: [0, 360],
    }}
    transition={{
      duration: 20,
      delay,
      repeat: Number.POSITIVE_INFINITY,
      ease: "linear",
    }}
  >
    <Hexagon className="w-8 h-8 text-cyan-500/10" />
  </motion.div>
)

const StatsCard = ({ icon: Icon, title, value }: { icon: React.ElementType; title: string; value: string | number }) => {
  const controls = useAnimation()
  const [isHovered, setIsHovered] = useState(false)

  useEffect(() => {
    if (isHovered) {
      controls.start({
        scale: [1, 1.1, 1],
        transition: { duration: 0.3, times: [0, 0.5, 1] },
      })
    }
  }, [isHovered, controls])

  return (
    <motion.div
      className="bg-slate-800/50 rounded-xl p-4 flex items-center space-x-4 cursor-pointer"
      whileHover={{ boxShadow: "0 0 20px rgba(6, 182, 212, 0.3)" }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <motion.div className="bg-cyan-500/20 p-2 rounded-lg" animate={controls}>
        <Icon className="w-6 h-6 text-cyan-400" />
      </motion.div>
      <div>
        <p className="text-sm text-slate-400">{title}</p>
        <motion.p
          className="text-2xl font-bold text-white"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {value}
        </motion.p>
      </div>
    </motion.div>
  )
}

const ParticleField = () => {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {[...Array(150)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute w-1 h-1 bg-cyan-500/30 rounded-full"
          style={{
            top: `${Math.random() * 100}%`,
            left: `${Math.random() * 100}%`,
          }}
          animate={{
            scale: [0, 1, 0],
            opacity: [0, 1, 0],
            z: [0, 50, 0],
          }}
          transition={{
            duration: Math.random() * 3 + 2,
            repeat: Number.POSITIVE_INFINITY,
            repeatType: "loop",
            ease: "easeInOut",
            delay: Math.random() * 2,
          }}
        />
      ))}
    </div>
  )
}

const CodeBlock = () => {
  const codeLines = [
    "const room = new CodeRoom();",
    "room.onJoin((user) => {",
    "  console.log(`${user} joined`);",
    "});",
    "",
    "room.onMessage((msg) => {",
    "  collaborators.push(msg);",
    "});",
  ]

  return (
    <motion.div
      className="bg-slate-800/70 rounded-lg p-4 font-mono text-sm text-cyan-300 overflow-hidden relative"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.5 }}
    >
      {codeLines.map((line, index) => (
        <motion.div
          key={index}
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.5, delay: index * 0.1 }}
        >
          {line}
        </motion.div>
      ))}
      <motion.div
        className="absolute top-0 left-0 w-full h-full bg-gradient-to-r from-cyan-500/10 to-blue-500/10"
        animate={{
          opacity: [0.5, 0.8, 0.5],
        }}
        transition={{
          duration: 2,
          repeat: Number.POSITIVE_INFINITY,
          repeatType: "reverse",
        }}
      />
    </motion.div>
  )
}

const FeatureCard = ({ icon: Icon, title, description }: { icon: React.ElementType; title: string; description: string | number })  => {
  const controls = useAnimation()
  const [isHovered, setIsHovered] = useState(false)

  useEffect(() => {
    if (isHovered) {
      controls.start({
        rotate: [0, 10, -10, 0],
        transition: { duration: 0.5 },
      })
    }
  }, [isHovered, controls])

  return (
    <motion.div
      className="bg-slate-800/50 rounded-xl p-6 flex flex-col items-center text-center cursor-pointer"
      whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(6, 182, 212, 0.2)" }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <motion.div className="bg-cyan-500/20 p-3 rounded-full mb-4" animate={controls}>
        <Icon className="w-8 h-8 text-cyan-400" />
      </motion.div>
      <h3 className="text-xl font-bold mb-2">{title}</h3>
      <p className="text-slate-400">{description}</p>
    </motion.div>
  )
}

const AnimatedLogo = () => (
  <motion.div
    className="relative w-12 h-12"
    animate={{
      rotate: [0, 360],
    }}
    transition={{
      duration: 20,
      repeat: Number.POSITIVE_INFINITY,
      ease: "linear",
    }}
  >
    <motion.div
      className="absolute inset-0"
      animate={{
        scale: [1, 1.2, 1],
        opacity: [0.7, 1, 0.7],
      }}
      transition={{
        duration: 3,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "reverse",
      }}
    >
      <Hexagon className="w-full h-full text-cyan-400" />
    </motion.div>
    <motion.div
      className="absolute inset-0"
      animate={{
        rotate: [0, -360],
      }}
      transition={{
        duration: 40,
        repeat: Number.POSITIVE_INFINITY,
        ease: "linear",
      }}
    >
      <Hexagon className="w-full h-full text-blue-400 opacity-50" />
    </motion.div>
  </motion.div>
)

const PulsingCircle = () => (
  <div className="relative">
    <motion.div
      className="absolute inset-0 bg-cyan-500 rounded-full"
      animate={{
        scale: [1, 1.5, 1],
        opacity: [0.5, 0, 0.5],
      }}
      transition={{
        duration: 2,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "loop",
      }}
    />
    <div className="relative  bg-cyan-500 w-3 h-3 rounded-full" />
  </div>
)

export default function CodeConnect() {
  const [roomId, setRoomId] = useState("")
  const [username, setUsername] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const formRef = useRef(null)
  const [isMounted, setIsMounted] = useState(false);
  const isInView = useInView(formRef, { once: true });
  // const router = useRouter();

  // useEffect(() => {
  //   setIsMounted(true);
  // }, []);

  // In your home page (page.tsx)
const handleJoin = async () => {
  if (!roomId || !username) {
    toast.error("Please enter both room ID and username");
    return;
  }

  try {
    setIsLoading(true);
    // Use URL parameters for both roomId and username
    const baseUrl = window.location.origin;
    window.location.href = `${baseUrl}/editor/${roomId}?username=${encodeURIComponent(username)}`;
  } catch (error) {
    console.error("Join error:", error);
    toast.error("Failed to join room");
    setIsLoading(false);
  }
};

// When creating a new room:
const createNewRoom = (e:any) => {
  e.preventDefault();
  const id = uuidV4();
  setRoomId(id);
  navigator.clipboard.writeText(id).then(() => {
    toast.success("Created a new room", {
      description: "Room ID copied to clipboard!",
    });
  });
};
  const handleInputKeyUp = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleJoin();
    }
  };

  // Don't render until mounted to prevent hydration issues
  // if (!isMounted) {
  //   return (
  //     <div className="min-h-screen bg-slate-900 text-white overflow-hidden">
  //       <div className="container mx-auto px-4 py-8 relative z-10">
  //         {/* Skeleton loading state */}
  //         <div className="animate-pulse">
  //           <div className="h-8 bg-slate-800 rounded w-48 mb-16"></div>
  //           <div className="space-y-6">
  //             <div className="h-40 bg-slate-800 rounded"></div>
  //             <div className="h-40 bg-slate-800 rounded"></div>
  //           </div>
  //         </div>
  //       </div>
  //     </div>
  //   );
  // }


  // Don't render until mounted to prevent hydration issues
  // if (!isMounted) return null;
  return (
    <div className="min-h-screen bg-slate-900 text-white overflow-hidden">
      <ParticleField />
      <AnimatedBackground />
      <div className="absolute inset-0 overflow-hidden">
        {[...Array(20)].map((_, i) => (
          <FloatingHexagon key={i} delay={i * 0.5} />
        ))}
      </div>
      <div className=" z-10">

      <div className="container mx-auto px-4 py-8 relative">
        <motion.header
          className="flex items-center justify-between mb-16"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <motion.div className="flex items-center space-x-2" whileHover={{ scale: 1.05 }}>
            <AnimatedLogo />
            <motion.span
              className="text-2xl font-bold bg-gradient-to-r from-cyan-400 to-blue-400 text-transparent bg-clip-text"
              animate={{
                backgroundPosition: ["0%", "100%", "0%"],
              }}
              transition={{
                duration: 5,
                repeat: Number.POSITIVE_INFINITY,
                repeatType: "reverse",
              }}
            >
              CodeConnect
            </motion.span>
          </motion.div>
          <div className="flex items-center space-x-6">
            {/* <LanguageSelector /> */}
            <motion.nav
              className="flex space-x-6"
              variants={{
                hidden: { opacity: 0, y: -20 },
                visible: {
                  opacity: 1,
                  y: 0,
                  transition: {
                    staggerChildren: 0.1,
                  },
                },
              }}
              initial="hidden"
              animate="visible"
            >
              {["Features", "Pricing", "Contact"].map((item) => (
                <motion.a
                  key={item}
                  href="#"
                  className="text-slate-300 hover:text-white transition-colors relative"
                  variants={{
                    hidden: { opacity: 0, y: -20 },
                    visible: { opacity: 1, y: 0 },
                  }}
                  whileHover={{ scale: 1.1 }}
                >
                  {item}
                  <motion.div
                    className="absolute bottom-0 left-0 right-0 h-0.5 bg-cyan-400"
                    initial={{ scaleX: 0 }}
                    whileHover={{ scaleX: 1 }}
                    transition={{ duration: 0.3 }}
                  />
                </motion.a>
              ))}
            </motion.nav>
          </div>
        </motion.header>

        <main className="flex flex-col lg:flex-row items-center justify-between gap-12">
          <motion.div
            className="lg:w-1/2"
            initial={{ opacity: 0, x: -50 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <motion.h1
              className="text-4xl lg:text-5xl font-bold mb-6 leading-tight"
              variants={{
                hidden: { opacity: 0, y: 20 },
                visible: { opacity: 1, y: 0 },
              }}
              initial="hidden"
              animate="visible"
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              Collaborate in Real-Time <br />
              with{" "}
              <motion.span
                className="bg-gradient-to-r from-cyan-400 to-blue-400 text-transparent bg-clip-text"
                animate={{
                  backgroundPosition: ["0%", "100%", "0%"],
                }}
                transition={{
                  duration: 5,
                  repeat: Number.POSITIVE_INFINITY,
                  repeatType: "reverse",
                }}
              >
                CodeConnect
              </motion.span>
            </motion.h1>
            <motion.p
              className="text-xl text-slate-300 mb-8"
              variants={{
                hidden: { opacity: 0, y: 20 },
                visible: { opacity: 1, y: 0 },
              }}
              initial="hidden"
              animate="visible"
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              Join a room, share your code, and build amazing projects together. Experience seamless collaboration like
              never before.
            </motion.p>
            <div className="grid grid-cols-2 gap-4 mb-8">
              <StatsCard icon={Globe} title="Active Rooms" value="1,234" />
              <StatsCard icon={Users} title="Connected Devs" value="5,678" />
            </div>
            <CodeBlock />
          </motion.div>

          <motion.div
            ref={formRef}
            className="lg:w-1/2 w-full max-w-md"
            initial={{ opacity: 0, x: 50 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <motion.div
              className="bg-slate-800/50 backdrop-blur-xl rounded-2xl p-8 shadow-2xl shadow-cyan-500/10"
              whileHover={{ boxShadow: "0 0 50px rgba(6, 182, 212, 0.3)" }}
            >
              <h2 className="text-2xl font-bold mb-6 text-center">Join a Room</h2>
              <div className="space-y-6">
                <FuturisticInput
                  label="Room ID"
                  id="room-id"
                  icon={Terminal}
                  value={roomId}
                  onChange={(e:any) => setRoomId(e.target.value)}
                  onKeyUp={handleInputKeyUp}
                  placeholder="Enter room ID"
                />
                <FuturisticInput
                  label="Username"
                  id="username"
                  icon={Users}
                  value={username}
                  onChange={(e:any) => setUsername(e.target.value)}
                  onKeyUp={handleInputKeyUp}
                  placeholder="Choose a username"
                />
                <GlowingButton
  className="w-full"
  onClick={handleJoin}
  disabled={isLoading}
>
  <AnimatePresence mode="wait">
    {isLoading ? (
      <motion.div
        key="loading"
        className="flex items-center justify-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
      >
        <motion.div
          animate={{ rotate: 360 }}
          transition={{
            duration: 1,
            repeat: Number.POSITIVE_INFINITY,
            ease: "linear",
          }}
        >
          <Code className="w-5 h-5 mr-2" />
        </motion.div>
        Connecting...
      </motion.div>
    ) : (
      <motion.div
        key="join"
        className="flex items-center justify-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
      >
        <Sparkles className="w-5 h-5 mr-2" />
        Join Room
      </motion.div>
    )}
  </AnimatePresence>
</GlowingButton>
              </div>
              <p className="text-center text-sm text-slate-400 mt-6">
                Don&apos;t have an invite?{" "}
                <button
                  onClick={createNewRoom}
                  className="text-cyan-400 hover:text-cyan-300 transition-colors underline-offset-4 hover:underline"
                >
                  Create New Room
                </button>
              </p>
            </motion.div>
          </motion.div>
        </main>
</div>
        <motion.section
          className="mt-24"
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.6 }}
        >
          <h2 className="text-3xl font-bold text-center mb-12">Key Features</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <FeatureCard
              icon={Laptop}
              title="Real-time Collaboration"
              description="Code together in real-time with multiple developers, just like you're in the same room."
            />
            <FeatureCard
              icon={Server}
              title="Secure Rooms"
              description="Create private, secure rooms for your team to collaborate without worries."
            />
            <FeatureCard
              icon={Zap}
              title="Instant Sync"
              description="Changes sync instantly across all connected devices, ensuring everyone's always on the same page."
            />
          </div>
        </motion.section>

        <motion.section
          className="mt-24"
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.7 }}
        >
          <h2 className="text-3xl font-bold text-center mb-12">How It Works</h2>
          <div className="flex flex-col md:flex-row justify-center items-center space-y-8 md:space-y-0 md:space-x-12">
            {[
              { icon: GitBranch, title: "Create or Join", description: "Start a new room or join an existing one" },
              { icon: Users, title: "Collaborate", description: "Work together in real-time with your team" },
              { icon: Boxes, title: "Build", description: "Create amazing projects faster than ever" },
            ].map((step, index) => (
              <motion.div
                key={step.title}
                className="flex flex-col items-center text-center"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <div className="relative">
                  <motion.div
                    className="absolute inset-0 bg-cyan-500 rounded-full opacity-20"
                    animate={{
                      scale: [1, 1.2, 1],
                      opacity: [0.2, 0.3, 0.2],
                    }}
                    transition={{
                      duration: 2,
                      repeat: Number.POSITIVE_INFINITY,
                      repeatType: "reverse",
                    }}
                  />
                  <div className="relative bg-slate-800 p-4 rounded-full">
                    <step.icon className="w-8 h-8 text-cyan-400" />
                  </div>
                </div>
                <h3 className="mt-4 text-xl font-semibold">{step.title}</h3>
                <p className="mt-2 text-slate-400">{step.description}</p>
              </motion.div>
            ))}
          </div>
        </motion.section>

        <footer className="mt-24 text-center text-sm text-slate-400">
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.8 }}
          >
            © 2023 CodeConnect. All rights reserved.
          </motion.p>
          <motion.p
            className="mt-2"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.9 }}
          >
            Built with passion by{" "}
            <a
              href="#"
              className="text-cyan-400 hover:text-cyan-300 transition-colors underline-offset-4 hover:underline"
            >
              dhaval079
            </a>
          </motion.p>
        </footer>
      </div>
    </div>
  )
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/AnimatedBackground.tsx
================
import { useRef, useEffect } from "react"
import * as THREE from "three"

const AnimatedBackground = () => {
  const containerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (!containerRef.current) return

    const scene = new THREE.Scene()
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
    const renderer = new THREE.WebGLRenderer({ alpha: true })

    renderer.setSize(window.innerWidth, window.innerHeight)
    containerRef.current.appendChild(renderer.domElement)

    const geometry = new THREE.IcosahedronGeometry(1, 1)
    const material = new THREE.MeshBasicMaterial({
      color: 0x06b6d4,
      wireframe: true,
      transparent: true,
      opacity: 0.1,
    })
    const icosahedron = new THREE.Mesh(geometry, material)
    scene.add(icosahedron)

    camera.position.z = 5

    const animate = () => {
      requestAnimationFrame(animate)
      icosahedron.rotation.x += 0.001
      icosahedron.rotation.y += 0.001
      renderer.render(scene, camera)
    }

    animate()

    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight
      camera.updateProjectionMatrix()
      renderer.setSize(window.innerWidth, window.innerHeight)
    }

    window.addEventListener("resize", handleResize)

    return () => {
      window.removeEventListener("resize", handleResize)
      containerRef.current?.removeChild(renderer.domElement)
    }
  }, [])

  return <div ref={containerRef} className="fixed inset-0 pointer-events-none" />
}

export default AnimatedBackground

================
File: src/components/Chat.tsx
================
import { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import { Send } from 'lucide-react';
import { useSocket } from '@/providers/sockcet-provider';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Button } from '@/components/ui/button';
import { ACTIONS } from '@/lib/actions';

interface Message {
  id: string;
  content: string;
  sender: string;
  timestamp: number;
}

interface ChatProps {
  roomId: string;
  username: string;
}

export const Chat = ({ roomId, username }: ChatProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const { socket } = useSocket();
  const scrollRef = useRef<HTMLDivElement>(null);
  const hasInitialized = useRef(false);

  useEffect(() => {
    if (!socket) return;

    // Handle initial message sync
    const handleSyncMessages = ({ messages: syncedMessages }: { messages: Message[] }) => {
      console.log('Received synced messages:', syncedMessages.length);
      if (!hasInitialized.current) {
        setMessages(syncedMessages);
        hasInitialized.current = true;
        setTimeout(scrollToBottom, 100);
      }
    };

    // Handle individual new messages
    const handleReceiveMessage = (message: Message) => {
      setMessages(prev => {
        // Check for duplicates
        if (prev.some(m => m.id === message.id)) return prev;
        return [...prev, message].sort((a, b) => a.timestamp - b.timestamp);
      });
      setTimeout(scrollToBottom, 100);
    };

    socket.on(ACTIONS.SYNC_MESSAGES, handleSyncMessages);
    socket.on(ACTIONS.RECEIVE_MESSAGE, handleReceiveMessage);

    return () => {
      socket.off(ACTIONS.SYNC_MESSAGES);
      socket.off(ACTIONS.RECEIVE_MESSAGE);
      hasInitialized.current = false;
    };
  }, [socket]);

  const scrollToBottom = () => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  };

  const sendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !socket) return;

    const message = {
      id: `${Date.now()}-${Math.random()}`,
      content: newMessage.trim(),
      sender: username,
      timestamp: Date.now(),
    };

    socket.emit(ACTIONS.SEND_MESSAGE, { roomId, message });
    setNewMessage('');
  };

  return (
    <div className="flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b border-gray-700">
        <h2 className="text-sm font-semibold text-gray-400 uppercase">
          Chat {messages.length > 0 ? `(${messages.length})` : ''}
        </h2>
      </div>
      
      <ScrollArea ref={scrollRef as any} className="flex-1 p-4">
        <div className="space-y-4">
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`flex flex-col ${
                message.sender === username ? 'items-end' : 'items-start'
              }`}
            >
              <div
                className={`max-w-[80%] break-words rounded-lg px-4 py-2 ${
                  message.sender === username
                    ? 'bg-blue-600 text-white'
                    : 'bg-slate-700 text-white'
                }`}
              >
                <div className="text-xs text-gray-300 mb-1">
                  {message.sender}
                </div>
                <p>{message.content}</p>
                <div className="text-xs text-gray-300 mt-1">
                  {new Date(message.timestamp).toLocaleTimeString()}
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </ScrollArea>

      <div className="p-4 border-t border-gray-700">
        <form onSubmit={sendMessage} className="flex gap-2">
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Type a message..."
            className="flex-1 bg-slate-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <Button type="submit" size="icon" disabled={!newMessage.trim()}>
            <Send className="h-4 w-4" />
          </Button>
        </form>
      </div>
    </div>
  );
};

================
File: src/components/Client.tsx
================
import { useState, useEffect } from "react"
import Avatar from "react-nice-avatar"
import { motion, AnimatePresence } from "framer-motion"
import { Sparkles } from "lucide-react"

interface ClientProps {
  user: string;
  isActive: boolean;
  isTyping: boolean;
}

export const Client = ({ user, isActive, isTyping }: ClientProps) => {
  const [dots, setDots] = useState("");

  useEffect(() => {
    if (!isTyping) {
      setDots("");
      return;
    }

    const interval = setInterval(() => {
      setDots(prev => prev.length >= 3 ? "" : prev + ".");
    }, 500);

    return () => clearInterval(interval);
  }, [isTyping]);

  // Avatar configuration
  const getHashCode = (str: string) => {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return Math.abs(hash);
  };

  const userHash = getHashCode(user);
  const avatarConfig = {
    sex: ["man", "woman"][userHash % 2],
    hairStyle: ["normal", "thick", "mohawk", "womanLong", "womanShort"][userHash % 5],
    hatColor: ["#F9C9B6", "#FC909F", "#FFE5B4", "#FFDBE9"][userHash % 4],
    hairColor: ["#000", "#fff", "#77311D", "#FC909F"][userHash % 4],
    faceColor: ["#F9C9B6", "#E0A39A", "#FFCC22", "#DD614A"][userHash % 4],
  };

  return (
    <motion.div
      className="relative flex items-center space-x-4 p-4 rounded-lg bg-gradient-to-r from-slate-800/50 to-slate-700/50 hover:from-slate-700/50 hover:to-slate-600/50 transition-all duration-300"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      whileHover={{ scale: 1.02 }}
    >
      <div className="relative">
        <AnimatePresence>
          {isTyping && (
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{
                scale: [1, 1.1, 1],
                opacity: [0.5, 1, 0.5],
              }}
              exit={{ scale: 0.8, opacity: 0 }}
              transition={{
                duration: 2,
                repeat: Infinity,
                ease: "easeInOut",
              }}
              className="absolute -inset-2 rounded-full bg-blue-500/10"
            />
          )}
        </AnimatePresence>

        <div className={`relative rounded-full overflow-hidden ${isTyping ? "ring-2 ring-blue-500 ring-offset-2 ring-offset-slate-800" : ""}`}>
          <Avatar {...avatarConfig} className="w-12 h-12" />
        </div>

        {isTyping && (
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            className="absolute -bottom-1 -right-1 w-5 h-5 bg-blue-500 rounded-full border-2 border-slate-800 flex items-center justify-center"
          >
            <motion.div
              className="w-2 h-2 bg-white rounded-full"
              animate={{
                scale: [1, 1.5, 1],
                opacity: [1, 0.5, 1],
              }}
              transition={{
                duration: 1,
                repeat: Infinity,
                ease: "easeInOut",
              }}
            />
          </motion.div>
        )}
      </div>

      <div className="flex flex-col min-w-0 flex-1">
        <div className="flex items-center space-x-2">
          <span className="font-medium text-white truncate text-lg">{user}</span>
          {isActive && (
            <span className="text-xs bg-blue-500 text-white px-2 py-1 rounded-full flex items-center space-x-1">
              <Sparkles size={12} />
              <span>You</span>
            </span>
          )}
        </div>

        <AnimatePresence>
          {isTyping && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="text-sm text-blue-400"
            >
              typing{dots}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.div>
  );
};

export default Client;

================
File: src/components/Editor.tsx
================
// src/lib/editor-types.ts
import { Socket } from "socket.io-client";

export interface EditorProps {
  socketRef: React.MutableRefObject<Socket | null>;
  roomId: string;
  onCodeChange: (code: string) => void;
}

export interface EditorConfig {
  mode: {
    name: string;
    json?: boolean;
  };
  theme: string;
  autoCloseTags: boolean;
  autoCloseBrackets: boolean;
  lineNumbers: boolean;
  lineWrapping?: boolean;
  scrollPastEnd?: boolean;
  autofocus?: boolean;
  tabSize?: number;
  indentUnit?: number;
  smartIndent?: boolean;
}

export interface CodeOutput {
  type: 'success' | 'error';
  content: string;
}

// Editor themes
export const EDITOR_THEMES = {
  DRACULA: 'dracula',
  MONOKAI: 'monokai',
  GITHUB_DARK: 'github-dark',
  NORD: 'nord',
} as const;

// Language modes
export const LANGUAGE_MODES = {
  JAVASCRIPT: 'javascript',
  TYPESCRIPT: 'typescript',
  PYTHON: 'python',
  HTML: 'html',
  CSS: 'css',
} as const;

// Default editor configuration
export const DEFAULT_EDITOR_CONFIG: EditorConfig = {
  mode: { name: LANGUAGE_MODES.JAVASCRIPT, json: true },
  theme: EDITOR_THEMES.DRACULA,
  autoCloseTags: true,
  autoCloseBrackets: true,
  lineNumbers: true,
  scrollPastEnd: true,
  autofocus: true,
  tabSize: 2,
  indentUnit: 2,
  smartIndent: true,
  lineWrapping: true,
};

// Default code template
export const DEFAULT_CODE = `// Start coding here
console.log("Hello, CodeConnect!");

// Example function
function greet(name) {
  return \`Welcome to CodeConnect, \${name}!\`;
}`;

// Utility to execute code safely
export const executeCode = (code: string): Promise<CodeOutput> => {
  return new Promise((resolve) => {
    try {
      // Create a new function from the code and execute it
      const fn = new Function('console', `
        let output = [];
        const customConsole = {
          log: (...args) => output.push(args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
          ).join(' ')),
          error: (...args) => output.push(\`Error: \${args.join(' ')}\`),
          warn: (...args) => output.push(\`Warning: \${args.join(' ')}\`)
        };
        try {
          ${code}
        } catch (error) {
          customConsole.error(error.message);
        }
        return output.join('\\n');
      `);

      const result = fn(console);
      resolve({ type: 'success', content: result });
    } catch (error) {
      resolve({ 
        type: 'error', 
        content: error instanceof Error ? error.message : 'An error occurred'
      });
    }
  });
};

================
File: src/components/Gsap.tsx
================
// import React, { useEffect, useRef } from 'react';
// import gsap from 'gsap';
// import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';
// import { ScrollToPlugin } from 'gsap/dist/ScrollToPlugin';

// if (typeof window !== 'undefined') {
//   gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);
// }

// export default function AdvancedSmoothScroll() {
//   const smoothWrapperRef = useRef(null);
//   const contentRef = useRef(null);

//   useEffect(() => {
//     if (typeof window === 'undefined') return;

//     // Enhanced scroll configuration
//     ScrollTrigger.config({
//       limitCallbacks: true,
//       ignoreMobileResize: true,
//       autoRefreshEvents: 'visibilitychange,DOMContentLoaded,load',
//     });

//     // Initialize variables for velocity tracking
//     let currentVelocity = 0;
//     let lastScrollTop = window.pageYOffset;
//     let scrollTimeout: NodeJS.Timeout;
//     let rafId: number;
//     let isScrolling = false;

//     // Advanced smooth scroll with physics
//     const smoothScroll = {
//       current: window.pageYOffset,
//       target: window.pageYOffset,
//       ease: 0.05, // Adjust for smoothness
//       friction: 0.92, // Adjust for momentum
//       velocity: 0
//     };

//     // Perspective transformation setup
//     const sections = gsap.utils.toArray('.scroll-section');
//     sections.forEach((section: Element) => {
//       gsap.set(section, { 
//         transformPerspective: 1000,
//         transformStyle: "preserve-3d"
//       });
//     });

//     // Magnetic hover effect for interactive elements
//     const magneticElements = document.querySelectorAll('.magnetic');
//     magneticElements.forEach(elem => {
//       elem.addEventListener('mousemove', (e: MouseEvent) => {
//         const rect = (elem as HTMLElement).getBoundingClientRect();
//         const x = e.clientX - rect.left - rect.width / 2;
//         const y = e.clientY - rect.top - rect.height / 2;
        
//         gsap.to(elem, {
//           duration: 0.3,
//           x: x * 0.1,
//           y: y * 0.1,
//           rotation: x * 0.05,
//           ease: "power2.out"
//         });
//       });

//       elem.addEventListener('mouseleave', () => {
//         gsap.to(elem, {
//           duration: 0.3,
//           x: 0,
//           y: 0,
//           rotation: 0,
//           ease: "elastic.out(1, 0.3)"
//         });
//       });
//     });

//     // Parallax scroll effect with depth
//     sections.forEach((section: Element, i) => {
//       const bg = section.querySelector('.parallax-bg');
//       const content = section.querySelector('.content');
//       const depth = i % 2 === 0 ? 1 : -1;

//       if (bg) {
//         gsap.to(bg, {
//           y: `${30 * depth}%`,
//           ease: "none",
//           scrollTrigger: {
//             trigger: section,
//             start: "top bottom",
//             end: "bottom top",
//             scrub: 1.5,
//           }
//         });
//       }

//       if (content) {
//         gsap.from(content, {
//           scrollTrigger: {
//             trigger: content,
//             start: "top 80%",
//             end: "top 20%",
//             scrub: 1
//           },
//           y: 50 * depth,
//           opacity: 0,
//           scale: 0.9,
//           rotateX: 5 * depth,
//           transformOrigin: "center center"
//         });
//       }
//     });

//     // Advanced physics-based smooth scrolling
//     const updateScroll = () => {
//       if (!isScrolling) return;

//       // Update smooth scroll values with physics
//       smoothScroll.velocity = smoothScroll.target - smoothScroll.current;
//       smoothScroll.current += smoothScroll.velocity * smoothScroll.ease;
//       smoothScroll.velocity *= smoothScroll.friction;

//       // Apply transform
//       gsap.set(contentRef.current, {
//         y: -smoothScroll.current,
//         force3D: true
//       });

//       rafId = requestAnimationFrame(updateScroll);
//     };

//     // Scroll velocity tracking
//     const handleScroll = () => {
//       const st = window.pageYOffset;
//       currentVelocity = st - lastScrollTop;
//       lastScrollTop = st;
//       smoothScroll.target = st;

//       if (!isScrolling) {
//         isScrolling = true;
//         rafId = requestAnimationFrame(updateScroll);
//       }

//       clearTimeout(scrollTimeout);
//       scrollTimeout = setTimeout(() => {
//         isScrolling = false;
//       }, 100);
//     };

//     // Stagger reveal for elements
//     gsap.utils.toArray('.stagger-reveal').forEach((elem: Element) => {
//       gsap.from(elem, {
//         scrollTrigger: {
//           trigger: elem,
//           start: "top 80%",
//           end: "top 20%",
//           toggleActions: "play none none reverse"
//         },
//         y: 100,
//         opacity: 0,
//         duration: 1,
//         stagger: {
//           amount: 0.5,
//           from: "start"
//         },
//         ease: "power3.out"
//       });
//     });

//     // Scale effect for hero section
//     gsap.to('.hero-section', {
//       scrollTrigger: {
//         trigger: '.hero-section',
//         start: "top top",
//         end: "bottom top",
//         scrub: 1
//       },
//       scale: 0.8,
//       opacity: 0.5,
//       ease: "none"
//     });

//     // Horizontal scroll sections
//     const horizontalSections = gsap.utils.toArray('.horizontal-scroll');
//     horizontalSections.forEach((section: Element) => {
//       const items = gsap.utils.toArray('.horizontal-item', section);
      
//       gsap.to(items, {
//         xPercent: -100 * (items.length - 1),
//         ease: "none",
//         scrollTrigger: {
//           trigger: section,
//           pin: true,
//           start: "top top",
//           end: () => `+=${section.scrollWidth}`,
//           scrub: 1,
//           snap: {
//             snapTo: 1 / (items.length - 1),
//             duration: { min: 0.1, max: 0.3 },
//             ease: "power1.inOut"
//           }
//         }
//       });
//     });

//     // Event listeners
//     window.addEventListener('scroll', handleScroll, { passive: true });
//     window.addEventListener('resize', ScrollTrigger.update);

//     // Initialize first scroll position
//     handleScroll();

//     // Cleanup
//     return () => {
//       window.removeEventListener('scroll', handleScroll);
//       window.removeEventListener('resize', ScrollTrigger.update);
//       cancelAnimationFrame(rafId);
//       clearTimeout(scrollTimeout);
//       ScrollTrigger.getAll().forEach(trigger => trigger.kill());
//       gsap.killTweensOf('*');
//     };
//   }, []);

//   return null;
// }

// // HOC for smooth scroll
// export function withAdvancedScroll(WrappedComponent: React.ComponentType) {
//   return function WithAdvancedScrollComponent(props: any) {
//     const smoothWrapperRef = useRef(null);
//     const contentRef = useRef(null);
    
//     return (
//       <div className="relative min-h-screen overflow-hidden" ref={smoothWrapperRef}>
//         <AdvancedSmoothScroll />
//         <div 
//           className="transform-gpu will-change-transform"
//           ref={contentRef}
//         >
//           <WrappedComponent {...props} />
//         </div>
//       </div>
//     );
//   };
// }

================
File: src/components/Language.tsx
================
import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { ChevronDown, Globe } from "lucide-react"

const languages = [
  { code: "en", name: "English" },
  { code: "es", name: "Español" },
  { code: "fr", name: "Français" },
  { code: "de", name: "Deutsch" },
  { code: "ja", name: "日本語" },
]

const LanguageSelector = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [selectedLanguage, setSelectedLanguage] = useState(languages[0])

  const handleLanguageChange = (language:any) => {
    setSelectedLanguage(language)
    setIsOpen(false)
    // Here you would typically update the app's language
  }

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-2 bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-md transition-colors"
      >
        <Globe className="w-5 h-5" />
        <span>{selectedLanguage.name}</span>
        <ChevronDown className={`w-5 h-5 transition-transform ${isOpen ? "rotate-180" : ""}`} />
      </button>
      <AnimatePresence>
        {isOpen && (
          <motion.ul
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.2 }}
            className="absolute z-10 mt-2 w-48 rounded-md bg-slate-700 shadow-lg"
          >
            {languages.map((language) => (
              <li key={language.code}>
                <button
                  onClick={() => handleLanguageChange(language)}
                  className="block w-full text-left px-4 py-2 text-sm text-white hover:bg-slate-600 transition-colors"
                >
                  {language.name}
                </button>
              </li>
            ))}
          </motion.ul>
        )}
      </AnimatePresence>
    </div>
  )
}

export default LanguageSelector

================
File: src/components/monaco-editor.tsx
================
import { useRef, useEffect, useState } from 'react';
import Editor from '@monaco-editor/react';
import { useSocket } from '@/providers/sockcet-provider';
import { ACTIONS } from '@/lib/actions';

interface MonacoEditorProps {
  roomId: string;
  language?: string;
  theme?: string;
  fontSize?: number;
  value?: string;
  onChange?: (value: string) => void;
}

const MonacoEditor = ({ 
  roomId, 
  language = 'javascript', 
  theme = 'dracula', 
  fontSize = 14,
  value,
  onChange 
}: MonacoEditorProps) => {
  const editorRef = useRef<any>(null);
  const { socket, isConnected } = useSocket();
  const lastReceivedValue = useRef<string>('');
  const isLocalChange = useRef<boolean>(false);

  useEffect(() => {
    if (!socket || !isConnected) return;

    const handleCodeChange = ({ code }: { code: string }) => {
      if (code === lastReceivedValue.current) return;
      
      lastReceivedValue.current = code;
      if (!isLocalChange.current && editorRef.current) {
        const currentPosition = editorRef.current.getPosition();
        editorRef.current.setValue(code);
        editorRef.current.setPosition(currentPosition);
      }
      isLocalChange.current = false;
    };

    socket.on(ACTIONS.CODE_CHANGE, handleCodeChange);

    return () => {
      socket.off(ACTIONS.CODE_CHANGE);
    };
  }, [socket, isConnected]);

  const handleEditorChange = (value: string | undefined) => {
    if (!value) return;
    
    isLocalChange.current = true;
    lastReceivedValue.current = value;
    onChange?.(value);
    
    socket?.emit(ACTIONS.CODE_CHANGE, {
      roomId,
      code: value,
    });
  };

  const handleEditorDidMount = (editor: any) => {
    editorRef.current = editor;
  };

  const options = {
    fontSize,
    minimap: { enabled: true },
    scrollBeyondLastLine: false,
    wordWrap: 'on' as 'on',
    autoClosingBrackets: 'always' as const,
    autoClosingQuotes: 'always' as const,
    formatOnPaste: true,
    formatOnType: true,
  };

  return (
    <Editor
      height="100%"
      defaultLanguage={language}
      language={language}
      theme={theme}
      value={value}
      options={options}
      onChange={handleEditorChange}
      onMount={handleEditorDidMount}
      className="w-full h-full min-h-[300px] border border-gray-700 rounded-lg overflow-hidden"
    />
  );
};

export default MonacoEditor;

================
File: src/components/TypingIndicator.tsx
================
// src/components/TypingIndicator.tsx
'use client';

import { motion } from 'framer-motion';

interface TypingIndicatorProps {
  activeUser: string | null;
}

export const TypingIndicator = ({ activeUser }: TypingIndicatorProps) => {
  if (!activeUser) return null;

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="flex items-center space-x-2 py-2 px-4 rounded-lg bg-slate-800/50"
    >
      <span className="text-sm text-white/90">{activeUser} is typing</span>
      <div className="flex space-x-1">
        {[...Array(3)].map((_, i) => (
          <motion.div
            key={i}
            className="w-1.5 h-1.5 bg-blue-400 rounded-full"
            animate={{
              y: ["0%", "-50%", "0%"],
            }}
            transition={{
              duration: 0.6,
              repeat: Infinity,
              delay: i * 0.2,
            }}
          />
        ))}
      </div>
    </motion.div>
  );
};

export default TypingIndicator;

================
File: src/lib/actions.ts
================
export const ACTIONS = {
  JOIN: 'join',
  JOINED: 'joined',
  DISCONNECTED: 'disconnected',
  CODE_CHANGE: 'code-change',
  SYNC_CODE: 'sync-code',
  LEAVE: 'leave',
  COMPILE: 'compile',
  COMPILE_RESULT: 'compile-result',
  TYPING: 'typing',
  STOP_TYPING: 'stop-typing',
  SEND_MESSAGE: 'send-message',
  RECEIVE_MESSAGE: 'receive-message',
  SYNC_MESSAGES: 'sync-messages'  // Add this new action
}as const;

================
File: src/lib/editor-types.ts
================
// src/lib/editor-types.ts
import { Socket } from "socket.io-client";
// import { ACTIONS } from "./socket";

export interface EditorProps {
  socketRef: React.MutableRefObject<Socket | null>;
  roomId: string;
  onCodeChange: (code: string) => void;
}

export interface EditorConfig {
  mode: {
    name: string;
    json?: boolean;
  };
  theme: string;
  autoCloseTags: boolean;
  autoCloseBrackets: boolean;
  lineNumbers: boolean;
  lineWrapping?: boolean;
  scrollPastEnd?: boolean;
  autofocus?: boolean;
  tabSize?: number;
  indentUnit?: number;
  smartIndent?: boolean;
}

export interface CodeOutput {
  type: 'success' | 'error';
  content: string;
}

// Editor themes
export const EDITOR_THEMES = {
  DRACULA: 'dracula',
  MONOKAI: 'monokai',
  GITHUB_DARK: 'github-dark',
  NORD: 'nord',
} as const;

// Language modes
export const LANGUAGE_MODES = {
  JAVASCRIPT: 'javascript',
  TYPESCRIPT: 'typescript',
  PYTHON: 'python',
  HTML: 'html',
  CSS: 'css',
} as const;

// Default editor configuration
export const DEFAULT_EDITOR_CONFIG: EditorConfig = {
  mode: { name: LANGUAGE_MODES.JAVASCRIPT, json: true },
  theme: EDITOR_THEMES.DRACULA,
  autoCloseTags: true,
  autoCloseBrackets: true,
  lineNumbers: true,
  scrollPastEnd: true,
  autofocus: true,
  tabSize: 2,
  indentUnit: 2,
  smartIndent: true,
  lineWrapping: true,
};

// Default code template
export const DEFAULT_CODE = `// Start coding here
console.log("Hello, CodeConnect!");

// Example function
function greet(name) {
  return \`Welcome to CodeConnect, \${name}!\`;
}`;

// Utility to execute code safely
export const executeCode = (code: string): Promise<CodeOutput> => {
  return new Promise((resolve) => {
    try {
      // Create a new function from the code and execute it
      const fn = new Function('console', `
        let output = [];
        const customConsole = {
          log: (...args) => output.push(args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
          ).join(' ')),
          error: (...args) => output.push(\`Error: \${args.join(' ')}\`),
          warn: (...args) => output.push(\`Warning: \${args.join(' ')}\`)
        };
        try {
          ${code}
        } catch (error) {
          customConsole.error(error.message);
        }
        return output.join('\\n');
      `);

      const result = fn(console);
      resolve({ type: 'success', content: result });
    } catch (error) {
      resolve({ 
        type: 'error', 
        content: error instanceof Error ? error.message : 'An error occurred'
      });
    }
  });
};

================
File: src/lib/socket.ts
================
import { Socket } from "socket.io-client";
import type { DefaultEventsMap } from '@socket.io/component-emitter';
import { io } from "socket.io-client";

export const initSocket = async (): Promise<Socket<DefaultEventsMap, DefaultEventsMap>> => {
  const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || 'http://localhost:8000';
  
  const options = {
    forceNew: true,
    reconnectionAttempts: Infinity,
    timeout: 10000,
    transports: ['websocket']
  };

  return new Promise((resolve, reject) => {
    try {
      const socket = io(SOCKET_URL, options);

      socket.on('connect', () => {
        console.log('Socket connected with ID:', socket.id);
        resolve(socket);
      });

      socket.on('connect_error', (err) => {
        console.error('Socket connection error:', err);
        reject(err);
      });

      // Set up reconnection handling
      socket.on('reconnect_attempt', () => {
        console.log('Attempting to reconnect...');
      });

      socket.on('reconnect', () => {
        console.log('Reconnected successfully');
      });

    } catch (err) {
      console.error('Socket initialization error:', err);
      reject(err);
    }
  });
};

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/providers/sockcet-provider.tsx
================
"use client";

import { useSearchParams } from 'next/navigation';
import { createContext, useContext, useEffect, useState } from 'react';
import { io as ClientIO, Socket } from 'socket.io-client';

type SocketContextType = {
  socket: Socket | null;
  isConnected: boolean;
  lastError: Error | null;
};

const SocketContext = createContext<SocketContextType>({
  socket: null,
  isConnected: false,
  lastError: null
});

export const useSocket = () => {
  return useContext(SocketContext);
};

  export const SocketProvider = ({ children }: { children: React.ReactNode }) => {
    const [socket, setSocket] = useState<Socket | null>(null);
    const [isConnected, setIsConnected] = useState(false);
    const [lastError, setLastError] = useState<Error | null>(null);
    const searchParams = useSearchParams();
    const username = searchParams.get('username');
  useEffect(() => {
    const socketInstance = ClientIO(process.env.NEXT_PUBLIC_SOCKET_URL ?? 'http://localhost:8000', {
      forceNew: true,
      reconnectionAttempts: 5,
      timeout: 10000,
      transports: ['websocket'],
      auth: {
        username
      }
    });

    const handleBeforeUnload = () => {
      const roomId = window.location.pathname.split('/').pop();
      if (socketInstance && roomId) {
        socketInstance.emit('leave', { roomId });
        socketInstance.disconnect();
      }
    };

    // Connection event handlers
    socketInstance.on('connect', () => {
      console.log('Socket connected with ID:', socketInstance.id);
      setIsConnected(true);
      setLastError(null);
    });

    socketInstance.on('connect_error', (error) => {
      console.error('Socket connection error:', error);
      setLastError(error);
      setIsConnected(false);
    });

    socketInstance.on('disconnect', (reason) => {
      console.log('Socket disconnected:', reason);
      setIsConnected(false);
    });

    socketInstance.on('error', (error) => {
      console.error('Socket error:', error);
      setLastError(error);
    });

    
    setSocket(socketInstance);

    return () => {
      handleBeforeUnload();
      window.removeEventListener('beforeunload', handleBeforeUnload);
      if (socketInstance) {
        socketInstance.removeAllListeners();
        socketInstance.disconnect();
      }
    };
  }, [username]);


  return (
    <SocketContext.Provider value={{ socket, isConnected, lastError }}>
      {children}
    </SocketContext.Provider>
  );
};

================
File: src/types/env.d.ts
================
// src/types/env.d.ts
declare namespace NodeJS {
    interface ProcessEnv {
      NEXT_PUBLIC_SOCKET_URL: string;
    }
  }

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.mjs
================
import MonacoWebpackPlugin from 'monaco-editor-webpack-plugin';

/** @type {import('next').NextConfig} */
const nextConfig = {
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.plugins.push(
        new MonacoWebpackPlugin({
          languages: ['javascript', 'typescript', 'python', 'java', 'cpp'],
          filename: 'static/[name].worker.js',
        })
      );
    }
    return config;
  },
};

export default nextConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "code-connect-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "shadcn": "shadcn-ui"
  },
  "dependencies": {
    "@codemirror/language": "^6.10.8",
    "@codemirror/state": "^6.5.1",
    "@codemirror/view": "^6.36.2",
    "@monaco-editor/react": "^4.6.0",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.5",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.2",
    "@types/gsap": "^1.20.2",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@types/three": "^0.172.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "codemirror": "^6.0.1",
    "framer-motion": "^12.0.6",
    "gsap": "^3.12.7",
    "lucide-react": "^0.474.0",
    "monaco-editor": "^0.52.2",
    "next": "15.1.6",
    "next-themes": "^0.4.4",
    "re-resizable": "^6.10.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.5.1",
    "react-intersection-observer": "^9.15.1",
    "react-nice-avatar": "^1.5.0",
    "react-syntax-highlighter": "^15.6.1",
    "shadcn": "^2.3.0",
    "skeleton": "^0.1.2",
    "socket.io-client": "^4.8.1",
    "sonner": "^1.7.3",
    "tailwind-merge": "^2.6.0",
    "tailwind-variants": "^0.3.1",
    "tailwindcss-animate": "^1.0.7",
    "three": "^0.172.0",
    "uuid": "^11.0.5"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "monaco-editor-webpack-plugin": "^7.1.0",
    "postcss": "^8",
    "shadcn-ui": "^0.9.4",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import { withTV } from "tailwind-variants/transformer"
import type { Config } from 'tailwindcss'

const config: Config = {
  darkMode: ["class", "class"],
  content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./src/**/*.{ts,tsx}"],
  theme: {
  	container: {
  		center: true,
  		padding: '2rem',
  		screens: {
  			'2xl': '1400px'
  		}
  	},
  	extend: {
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0px'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0px'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}

export default withTV(config)

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "types": ["gsap"],
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
