This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-13T11:31:55.480Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    _not-found/
      page.tsx
    editor/
      [roomid]/
        page.tsx
    globals.css
    layout.tsx
    not-found.tsx
    page.tsx
  components/
    Code/
      Dashboard/
        AnimatedBackground.tsx
        Dashboard.tsx
        Faq-section.tsx
        TechSlider.tsx
      AiAssistant.tsx
      Chat.tsx
      Client.tsx
      CodeViz.tsx
      ConsoleOutput.tsx
      Editor.tsx
      MessageBubble.tsx
      monaco-editor.tsx
      TypingIndicator.tsx
    Dashboard/
      animations/
        NeonGlow.tsx
        ParallaxScroll.tsx
        ParticleField.tsx
        RevealAnimation.tsx
        WaveLoader.tsx
      buttons/
        FuturisticInput.tsx
        GlowingButton.tsx
        MoveToTop.tsx
      cards/
        FeatureCard.tsx
        HoverCard.tsx
        MoreUseCases.tsx
        RoadmapItem.tsx
        StatsCard.tsx
        WhyCodeConnect.tsx
      AnimatedBackground.tsx
      Cursor.tsx
      Decorative.tsx
      FaqSection.tsx
      Header.tsx
      LoadinAnimation.tsx
      LoadingScreen.tsx
      Slider.tsx
    ui/
      accordion.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      dialog.tsx
      input.tsx
      scroll-area.tsx
      select.tsx
      skeleton.tsx
      slider.tsx
      switch.tsx
      tabs.tsx
      tooltip.tsx
    onedarkpro.json
  lib/
    actions.ts
    editor-types.ts
    socket.ts
    utils.ts
  providers/
    socketProvider.tsx
  types/
    env.d.ts
.gitignore
components.json
next.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/_not-found/page.tsx
================
"use client"
import { Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import { motion } from "framer-motion";
import Link from "next/link";

function NotFoundContent() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-r from-gray-900 to-black text-white">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center"
      >
        <motion.h1
          className="text-6xl font-bold text-gray-100"
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.4 }}
        >
          404
        </motion.h1>
        <p className="mt-4 text-xl text-gray-400">Oops! Page Not Found.</p>

        <motion.div
          className="mt-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
        >
          <Link href="/">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-medium transition-all duration-300 shadow-lg"
            >
              Return Home
            </motion.button>
          </Link>
        </motion.div>
      </motion.div>
    </div>
  );
}


export default function NotFound() {
  return (
    <Suspense fallback={<div></div>}>
      <NotFoundContent />
    </Suspense>
  )
}

================
File: src/app/editor/[roomid]/page.tsx
================
"use client"
import { useState, useRef, useEffect, useMemo, Suspense } from "react"
import { motion, AnimatePresence, useAnimation } from "framer-motion"
import { toast, Toaster } from "sonner"
import { useParams, useSearchParams } from "next/navigation"
import { ACTIONS } from "@/lib/actions"
import {
  LogOut,
  Play,
  ChevronRight,
  ChevronLeft,
  Maximize,
  Minimize,
  SunMoon,
  Moon,
  Settings,
  Save,
  Download,
  Share,
  Upload,
  Terminal,
  Bot,
  Sparkles,
  MessageSquare,
} from "lucide-react"
import { Resizable } from "re-resizable"
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter"
// import { onedarkpro } from "react-syntax-highlighter/dist/cjs/styles/prism"
import { useSocket } from "@/providers/socketProvider"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import dynamic from "next/dynamic"
import { Client } from "@/components/Code/Client"
import { Chat } from "@/components/Code/Chat"
import { Skeleton } from "@/components/ui/skeleton"
import ConsoleOutput from "@/components/Code/ConsoleOutput"
import AiAssistant from "@/components/Code/AiAssistant"
import WaveLoader from "@/components/Dashboard/animations/WaveLoader"

const MonacoEditor = dynamic(() => import("@/components/Code/monaco-editor"), { ssr: false })

function EditorPageContent() {
  // Socket and Client State
  const socketRef = useRef<any>(null)
  const [clients, setClients] = useState<{ socketId: string; username: string }[]>([])
  const params = useParams()
  const searchParams = useSearchParams()
  const roomId = params?.roomid
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [isSocketConnected, setIsSocketConnected] = useState(false)
  const [connectionStatus, setConnectionStatus] = useState<"connecting" | "connected" | "failed">("connecting")
  const username = searchParams.get("username")
  const [typingUser, setTypingUser] = useState<string | null>(null)
  const [consoleHeight, setConsoleHeight] = useState(150)
  const typingTimeoutRef = useRef<{ [key: string]: NodeJS.Timeout }>({})
  const [isConsoleOpen, setIsConsoleOpen] = useState(true);
  const [showConnectingSplash, setShowConnectingSplash] = useState(true);
  const [isAiPanelOpen, setIsAiPanelOpen] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(true);


  // Editor State
  const [fontSize, setFontSize] = useState(14)
  const [language, setLanguage] = useState("javascript")
  const [theme, setTheme] = useState("vs-dark")

  // UI State
  const [isSidebarOpen, setIsSidebarOpen] = useState(true)
  const [isOutputPanelOpen, setIsOutputPanelOpen] = useState(true)
  const [isDarkMode, setIsDarkMode] = useState(true)
  const [activeTab, setActiveTab] = useState("code")
  const [isSettingsOpen, setIsSettingsOpen] = useState(false)
  const [isPageLoaded, setIsPageLoaded] = useState(false)
  const [isShareDialogOpen, setIsShareDialogOpen] = useState(false)
  const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false)

  // Refs
  const editorRef = useRef(null)
  const outputRef = useRef(null)
  const controls = useAnimation()
  const [code, setCode] = 
  useState(`//Start Coding Here...
  // Function to print a pyramid pattern
  function printPyramid(height) {
      let pattern = '';
      
      // Loop through each row
      for (let i = 1; i <= height; i++) {
          // Add spaces before stars
          let spaces = ' '.repeat(height - i);
          
          // Add stars for this row
          let stars = '*'.repeat(2 * i - 1);
          
          // Combine spaces and stars for this row
          pattern += spaces + stars + '\\n';
      }
      
      return pattern;
  }
  console.log(printPyramid(5));`);

    const [typingUsers, setTypingUsers] = useState(new Set())
  const [output, setOutput] = useState("")
  const [consoleOutput, setConsoleOutput] = useState<Array<{ type: "log" | "error" | "info"; content: string }>>([])
  const lastTypingEventRef = useRef<number>(0)
  const TYPING_INTERVAL = 1000 // Minimum time between typing events in ms
  const { socket, isConnected } = useSocket()

  useEffect(() => {
    const timer = setTimeout(() => {
      setShowConnectingSplash(false);
    }, 2000); // 2 seconds

    return () => clearTimeout(timer);
  }, []);

  // Memoized variants
  const pageVariants = useMemo(
    () => ({
      hidden: { opacity: 0, scale: 0.9 },
      visible: {
        opacity: 1,
        scale: 1,
        transition: {
          duration: 0.5,
          ease: "easeOut",
          staggerChildren: 0.1,
        },
      },
    }),
    [],
  )

  const itemVariants = useMemo(
    () => ({
      hidden: { y: 20, opacity: 0 },
      visible: {
        y: 0,
        opacity: 1,
        transition: { duration: 0.5, ease: "easeOut" },
      },
    }),
    [],
  )

  // Effects
  useEffect(() => {
    // Trigger initial animation when the page loads
    setIsPageLoaded(true)
    controls.start("visible")
  }, [controls])

  useEffect(() => {
    if (!socket || !isConnected) return

    if (!username || !roomId) {
      toast.error("Missing room ID or username")
      window.location.href = "/"
      return
    }

    console.log("Joining room with:", { roomId, username: username })

    socket.emit(ACTIONS.JOIN, {
      id: roomId,
      user: username,
    })

    // Handle join response
    socket.on(ACTIONS.JOINED, ({ clients, user, socketId }) => {
      console.log("JOINED event received:", { clients, user, socketId })
      toast.success(`${user} joined the room`)
      setClients(clients)
      setConnectionStatus("connected")
      setIsLoading(false)
    })

    socket.on(ACTIONS.DISCONNECTED, ({ socketId, user, clients: updatedClients }) => {
      console.log("DISCONNECTED event received:", { socketId, user, clients: updatedClients })
      setClients(updatedClients)
      toast.info(`${user} left the room`)
    })

    const handleBeforeUnload = () => {
      if (socket && roomId) {
        socket.emit(ACTIONS.LEAVE, { roomId })
      }
    }

    window.addEventListener("beforeunload", handleBeforeUnload)

    socket.on(ACTIONS.CODE_CHANGE, ({ code }) => {
      setCode(code)
    })

    socket.on(ACTIONS.SYNC_CODE, ({ code }) => {
      setCode(code)
    })

    socket.on(ACTIONS.COMPILE_RESULT, ({ result, error }) => {
      if (error) {
        setOutput(error)
        setConsoleOutput((prev) => [...prev, { type: "error", content: error }])
      } else {
        setOutput(result)
        setConsoleOutput((prev) => [...prev, { type: "log", content: result }])
      }
    })

    socket.on("error", handleSocketError)

    return () => {
      socket.off(ACTIONS.JOINED)
      socket.off(ACTIONS.DISCONNECTED)
      socket.off(ACTIONS.CODE_CHANGE)
      socket.off(ACTIONS.SYNC_CODE)
      handleBeforeUnload()
      window.removeEventListener("beforeunload", handleBeforeUnload)
      socket.off(ACTIONS.COMPILE_RESULT)
      socket.off("error")
    }
  }, [socket, isConnected, roomId, username])

  useEffect(() => {
    if (!socket || !isConnected) return

    // Handle typing events
    const handleTyping = ({ username }: { username: string }) => {
      setTypingUsers((prev) => {
        const newSet = new Set(prev)
        newSet.add(username)
        return newSet
      })

      // Clear existing timeout for this user if it exists
      if (typingTimeoutRef.current[username]) {
        clearTimeout(typingTimeoutRef.current[username])
      }

      // Set new timeout
      typingTimeoutRef.current[username] = setTimeout(() => {
        setTypingUsers((prev) => {
          const newSet = new Set(prev)
          newSet.delete(username)
          return newSet
        })
        delete typingTimeoutRef.current[username]
      }, 1500) // Slightly longer than the server timeout
    }

    const handleStopTyping = ({ username }: { username: string }) => {
      // Clear timeout if it exists
      if (typingTimeoutRef.current[username]) {
        clearTimeout(typingTimeoutRef.current[username])
        delete typingTimeoutRef.current[username]
      }

      setTypingUsers((prev) => {
        const newSet = new Set(prev)
        newSet.delete(username)
        return newSet
      })
    }

    socket.on(ACTIONS.TYPING, handleTyping)
    socket.on(ACTIONS.STOP_TYPING, handleStopTyping)

    // Cleanup
    return () => {
      socket.off(ACTIONS.TYPING)
      socket.off(ACTIONS.STOP_TYPING)
      // Clear all typing timeouts
      Object.values(typingTimeoutRef.current).forEach(clearTimeout)
      typingTimeoutRef.current = {}
    }
  }, [socket, isConnected])

  // Handlers
  const clearConsole = () => setConsoleOutput([])

  const handleCodeChange = (value: string) => {
    setCode(value)
    socket?.emit(ACTIONS.CODE_CHANGE, { roomId, code: value })

    if (!username) return

    // Clear any existing typing timeout
    if (typingTimeoutRef.current) {
      Object.values(typingTimeoutRef.current).forEach(clearTimeout)
    }

    // Always emit typing event for the current user
    socket?.emit(ACTIONS.TYPING, {
      roomId,
      username,
    })

    // Set timeout to clear typing status
    if (!username) return
    typingTimeoutRef.current[username] = setTimeout(() => {
      socket?.emit(ACTIONS.STOP_TYPING, {
        roomId,
        username,
      })
    }, 1000)
  }

  const handleRunCode = () => {
    try {
      socket?.emit(ACTIONS.COMPILE, { roomId, code, language })
    } catch (err: any) {
      setOutput(`Error: ${err.message}`)
    }
  }

  const handleSocketError = (err: any) => {
    console.error("Socket error:", err)
    toast.error(err.message || "Failed to connect to server. Please try again.")
  }

  const copyRoomId = async () => {
    try {
      await navigator.clipboard.writeText(roomId as string)
      toast.success("Room ID copied to clipboard")
    } catch (err: any) {
      toast.error("Failed to copy room ID")
    }
  }

  const leaveRoom = () => {
    setIsLeaveDialogOpen(true)
  }

  const confirmLeaveRoom = () => {
    try {
      if (socket) {
        socket.emit(ACTIONS.LEAVE, { roomId })
        socket.disconnect()
      }
      window.location.href = "/"
    } catch (error) {
      console.error("Error leaving room:", error)
      toast.error("Failed to leave room")
    }
  }

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen()
      setIsFullscreen(true)
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen()
        setIsFullscreen(false)
      }
    }
  }

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode)
    setTheme(isDarkMode ? "vs-light" : "vs-dark")
  }

  const toggleSettings = () => {
    setIsSettingsOpen(!isSettingsOpen)
  }

  // Render functions
  const renderSkeleton = () => (
    <div className="flex flex-col space-y-4 animate-pulse">
      <Skeleton className="h-12 w-full" />
      <div className="flex space-x-4">
        <Skeleton className="h-8 w-24" />
        <Skeleton className="h-8 w-24" />
      </div>
      <Skeleton className="h-64 w-full" />
      <div className="flex space-x-4">
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-8 w-1/3" />
        <Skeleton className="h-8 w-1/3" />
      </div>
    </div>
  )

  if (showConnectingSplash) {
    return (
      <div className="flex h-screen w-full  overflow-hidden items-center justify-center bg-black/100">
        <motion.div
          className="flex flex-col items-center space-y-8 p-12 backdrop-blur-lg rounded-3xl shadow-2xl"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, ease: "easeOut" }}
          variants={pageVariants}
        >
          <motion.h2
            className="text-4xl font-bold text-white text-center"
            initial={{ y: -20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.5 }}
          >
            Connecting to session
          </motion.h2>
          <div className="relative w-40 h-40">
            <WaveLoader />
          </div>
          <motion.div
            className="text-blue-300 text-lg"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.5 }}
          >
            Please wait...
          </motion.div>
        </motion.div>
      </div>
    );
  }

  if (connectionStatus === "connecting") {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
        <motion.div
          className="flex flex-col items-center space-y-4"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="text-2xl font-bold text-white">Connecting to session...</div>
          <motion.div
            className="w-20 h-20 border-4 border-blue-500 border-t-transparent rounded-full"
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          />
        </motion.div>
      </div>
    )
  }

  if (connectionStatus === "failed") {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800">
        <motion.div
          className="flex flex-col items-center space-y-6 text-white"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <div className="text-3xl font-bold">Failed to connect to session</div>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => window.location.reload()}
            className="px-6 py-3 bg-blue-600 rounded-lg text-lg font-semibold hover:bg-blue-700 transition-colors"
          >
            Retry Connection
          </motion.button>
        </motion.div>
      </div>
    )
  }

  return (
    <motion.div
      className={`h-screen w-full overflow-hidden flex ${isDarkMode ? "bg-gray-900 text-white" : "bg-gray-100 text-gray-900"}`}
      initial="hidden"
      animate={isPageLoaded ? "visible" : "hidden"}
      variants={pageVariants}
    >
      {/* Sidebar */}
      <AnimatePresence>
        {isSidebarOpen && (
          <motion.div
            variants={itemVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            className="w-80 bg-gradient-to-b from-gray-800 to-gray-900 border-gray-700 border-r flex flex-col"
          >
            {/* Connected Users */}
            <ScrollArea className="flex-1 p-4">
              <motion.h2 variants={itemVariants} className="text-sm  justify-center items-center text-center mx-auto font-semibold uppercase mb-4">
                <span className="bg-gradient-to-r from-cyan-300 to-blue-400 text-transparent bg-clip-text">Connected</span> <span className="text-gray-400 lowercase">({clients.length} users)</span>
              </motion.h2>
              <motion.div className="max-h-[calc(100vh-200px)] overflow-y-auto space-y-3" variants={itemVariants}>
                {clients.map((client) => (
                  <motion.div key={client.socketId} variants={itemVariants}>
                    <Client
                      user={client.username}
                      isActive={client.socketId === socket?.id}
                      isTyping={typingUsers.has(client.username)}
                      lastActive={new Date().toISOString()}
                      messageCount={0}
                      mood="busy"
                    />
                  </motion.div>
                ))}
              </motion.div>
            </ScrollArea>

            {/* Room Controls */}
            <motion.div variants={itemVariants} className="p-4 border-t border-gray-700 space-y-3">
              <Button data-color="white" effect="gooeyLeft" variant="secondary" className="w-full" onClick={() => setIsShareDialogOpen(true)}>
                <Share className="h-5 w-5 mr-2" />
                Share Room
              </Button>
              <Button data-color="red" effect="gooeyLeft" variant="destructive" className="w-full" onClick={leaveRoom}>
                <LogOut className="h-5 w-5 mr-2" />
                Leave Room
              </Button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Editor Section */}
      <motion.div className="flex-1 h-full flex flex-col overflow-hidden" variants={itemVariants}>
        {/* Editor Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            type: "spring",
            stiffness: 200,
            damping: 15,
            duration: 0.5
          }}
          className={`${isDarkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"
            } border-b p-4 flex items-center justify-between`}
        >
          <div className="flex items-center space-x-4">
            <motion.div
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsSidebarOpen(!isSidebarOpen)}
              >
                {isSidebarOpen ? <ChevronLeft className="h-5 w-5" /> : <ChevronRight className="h-5 w-5" />}
              </Button>
            </motion.div>

            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              initial={{ backgroundColor: "transparent" }}
              animate={{
                backgroundColor: isSidebarOpen ? "rgba(22, 163, 74, 0.2)" : "transparent"
              }}
              transition={{ duration: 0.3 }}
              className="rounded-md"
            >
              <Button
                variant="default"
                className="bg-green-600 hover:bg-green-700 transition-colors duration-300"
                onClick={handleRunCode}
              >
                <Play className="h-5 w-5 mr-2" />
                Run Code
              </Button>
            </motion.div>

            <div className={`${isDarkMode ? "text-gray-400" : "text-gray-600"}`}>
              Language: {language}
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              onClick={() => setIsAiPanelOpen(!isAiPanelOpen)}
              className="relative h-10 px-4 group"
            >
              <span className="flex items-center">
                <Bot className="h-5 w-5 mr-2 group-hover:text-blue-400 transition-colors" />
                Ask AI
              </span>
              <motion.div
                className="absolute -top-1 -right-1"
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.5, 1, 0.5]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                <Sparkles className="h-3 w-3 text-blue-400" />
              </motion.div>
              <motion.div
                className="absolute left-0 bottom-0 w-full h-0.5 bg-blue-400"
                initial={{ scaleX: 0 }}
                animate={{ scaleX: isAiPanelOpen ? 1 : 0 }}
                transition={{ duration: 0.2 }}
              />
            </Button>

            <Button
              variant="ghost"
              onClick={() => setIsChatOpen(!isChatOpen)}
              className="relative h-10 px-4 group "
            >
              <span className="flex items-center">
                <MessageSquare className="h-5 w-5 mr-2 hover:bg-white group-hover:text-blue-400 transition-colors" />
                Chat
              </span>
              <motion.div
                className="absolute left-0 bottom-0 w-full h-0.5 bg-blue-400"
                initial={{ scaleX: 0 }}
                animate={{ scaleX: isChatOpen ? 1 : 0 }}
                transition={{ duration: 0.2 }}
              />
            </Button>
          </div>
          <div className="flex items-center space-x-2">
            {[
              {                icon: isFullscreen ? <Minimize className="h-5 w-5" /> : <Maximize className="h-5 w-5" />,
                onClick: toggleFullscreen
              },
              {
                icon: isDarkMode ? <SunMoon className="h-5 w-5" /> : <Moon className="h-5 w-5" />,
                onClick: toggleDarkMode
              },
              {
                icon: <Settings className="h-5 w-5" />,
                onClick: toggleSettings
              }
            ].map((button, index) => (
              <motion.div
                key={index}
                whileHover={{ rotate: 0, scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <Button variant="ghost" size="icon" onClick={button.onClick}>
                  {button.icon}
                </Button>
              </motion.div>
            ))}
          </div>
        </motion.div>
        {/* Editor and Output */}
        <motion.div className="flex-1 flex" variants={itemVariants}>
          {/* Code Editor */}
          {/* Code Editor */}
<motion.div 
  className="flex-1 flex flex-col overflow-hidden" 
  variants={itemVariants}
>
  <motion.div 
    className="flex-1" 
    ref={editorRef}
    style={{ 
      height: isConsoleOpen ? `calc(100vh - ${consoleHeight + 120}px)` : 'calc(100vh - 120px)',
      transition: 'height 0.3s ease'
    }}
  >
    {isLoading ? (
      renderSkeleton()
    ) : (
      <MonacoEditor
        roomId={roomId as string}
        language={language}
        fontSize={fontSize}
        value={code}
        onChange={handleCodeChange}
        theme={theme}
      />
    )}
  </motion.div>

  <ConsoleOutput
    isOpen={isConsoleOpen}
    onClose={() => setIsConsoleOpen(false)}
    consoleOutput={consoleOutput}
    onClear={clearConsole}
    height={consoleHeight}
    onHeightChange={setConsoleHeight}
    isSidebarOpen={isSidebarOpen}
  />

  {!isConsoleOpen && (
    <Button
      className="fixed bottom-4 right-4 bg-gray-800"
      onClick={() => setIsConsoleOpen(true)}
    >
      <Terminal className="w-4 h-4 mr-2" />
      Show Console
    </Button>
  )}
</motion.div>
          <motion.div className="w-90 border-l max-h-full border-gray-700" variants={itemVariants}>
            <Chat
              roomId={roomId as string}
              username={username || ""}
              isOpen={isChatOpen}
              onToggle={() => setIsChatOpen(!isChatOpen)}
            />
          </motion.div>
          <AiAssistant
            isOpen={isAiPanelOpen}
            onToggle={() => setIsAiPanelOpen(!isAiPanelOpen)}
          />
        </motion.div>
      </motion.div>

      {/* Settings Panel */}
      <AnimatePresence>
        {isSettingsOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 1 }}
            animate={{ opacity: 1, y: 1, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 1 }}
            transition={{ type: "spring", stiffness: 300, damping: 25 }}
            className={`absolute right-4 top-16 w-80 p-6 rounded-lg shadow-lg ${isDarkMode ? "bg-gray-800" : "bg-white"
              }`}
          >
            <h3 className="text-xl font-semibold mb-6">Settings</h3>
            <div className="space-y-6">
              <div>
                <label htmlFor="fontSize" className="block mb-2 text-sm font-medium">
                  Font Size: {fontSize}px
                </label>
                <Slider
                  id="fontSize"
                  min={10}
                  max={24}
                  step={1}
                  value={[fontSize]}
                  onValueChange={(value) => setFontSize(value[0])}
                />
              </div>
              <div>
                <label htmlFor="language" className="block mb-2 text-sm font-medium">
                  Language
                </label>
                <Select value={language} onValueChange={setLanguage}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a language" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="javascript">JavaScript</SelectItem>
                    <SelectItem value="python">Python</SelectItem>
                    <SelectItem value="java">Java</SelectItem>
                    <SelectItem value="cpp">C++</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <label htmlFor="theme" className="block mb-2 text-sm font-medium">
                  Theme
                </label>
                <Select value={theme} onValueChange={setTheme}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a theme" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="vs-dark">Dark</SelectItem>
                    {/* <SelectItem value="vs-light">Light</SelectItem> */}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {!isOutputPanelOpen && (
        <motion.button
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: 20 }}
          transition={{ duration: 0.3 }}
          className="fixed right-0 top-1/2 transform -translate-y-1/2 bg-primary text-primary-foreground p-2 rounded-l-md"
          onClick={() => setIsOutputPanelOpen(true)}
        >
          <ChevronLeft className="h-5 w-5" />
        </motion.button>
      )}

      {/* Floating Action Buttons */}


      {/* Share Dialog */}
      <Dialog open={isShareDialogOpen} onOpenChange={setIsShareDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Share Room</DialogTitle>
            <DialogDescription>Copy the link below to invite others to this room.</DialogDescription>
          </DialogHeader>
          <div className="flex items-center space-x-2">
            <Input className="italic" value={`${window.location.origin}/editor/${roomId}`} readOnly />
            <Button onClick={copyRoomId}>Copy Room</Button>
          </div>
          <div className="text-sm text-gray-500 mt-2">
            Room ID can be used to rejoin this session later.
          </div>
        </DialogContent>
      </Dialog>

      {/* Leave Room Dialog */}
      <Dialog open={isLeaveDialogOpen} onOpenChange={setIsLeaveDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Leave Room</DialogTitle>
            <DialogDescription>Are you sure you want to leave this room?</DialogDescription>
          </DialogHeader>
          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setIsLeaveDialogOpen(false)}>
              Cancel
            </Button>
            <Button variant="destructive" onClick={confirmLeaveRoom}>
              Leave
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      <Toaster />
    </motion.div>
  )
}

export default function EditorPage() {
  return (
    <Suspense fallback={<div></div>}>
      <EditorPageContent />
    </Suspense>
  )
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

/* In your CSS or a global style */
.will-change-transform {
  transform: translateZ(0);
}


@layer utilities {
  .scroll-section {
    @apply relative min-h-screen w-full;
  }
  
  .parallax-bg {
    @apply relative w-full h-full transform will-change-transform;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


:root {
  /* Font size scale */
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;
  
  /* Line heights */
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.75;
  
  /* Font weights */
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;

  /* Letter spacing */
  --letter-spacing-tight: -0.025em;
  --letter-spacing-normal: 0;
  --letter-spacing-wide: 0.025em;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import localFont from "next/font/local";
import "./globals.css";
import { ThemeProvider } from "next-themes";
import { Toaster } from "sonner";
import { SocketProvider } from "@/providers/socketProvider";

// Load Google Fonts
const inter = Inter({ subsets: ["latin"], display: "swap", variable: "--font-inter" });

// // Load Local Fonts
// const calSans = localFont({
//   src: [{ path: "/fonts/CalSans-SemiBold.woff2", weight: "600", style: "normal" }],
//   variable: "--font-cal",
// });

// const jetbrainsMono = localFont({
//   src: [
//     { path: "/fonts/JetBrainsMono-Regular.woff2", weight: "400", style: "normal" },
//     { path: "/fonts/JetBrainsMono-Bold.woff2", weight: "700", style: "normal" },
//   ],
//   variable: "--font-jetbrains",
// });

export const metadata: Metadata = {
  title: "Code Connect",
  description: "Real-time collaborative code editor",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={`${inter.variable}`}>
      <body className="antialiased">
        <ThemeProvider attribute="class">
          <SocketProvider>
            {children}
            <Toaster expand={false} position="top-center" richColors theme="dark" />
          </SocketProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}

================
File: src/app/not-found.tsx
================
"use client"
import { Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import { motion } from "framer-motion";
import Link from "next/link";

function NotFoundContent() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-r from-gray-900 to-black text-white">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="text-center"
      >
        <motion.h1
          className="text-6xl font-bold text-gray-100"
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.4 }}
        >
          404
        </motion.h1>
        <p className="mt-4 text-xl text-gray-400">Oops! Page Not Found.</p>

        <motion.div
          className="mt-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
        >
          <Link href="/">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="px-6 py-3 rounded-lg bg-blue-600 hover:bg-blue-500 text-white font-medium transition-all duration-300 shadow-lg"
            >
              Return Home
            </motion.button>
          </Link>
        </motion.div>
      </motion.div>
    </div>
  );
}


export default function NotFound() {
  return (
    <Suspense fallback={<div></div>}>
      <NotFoundContent />
    </Suspense>
  )
}

================
File: src/app/page.tsx
================
"use client"

import { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence, useInView } from "framer-motion"
import { v4 as uuidV4 } from "uuid"
import { toast } from "sonner"
import {
  Sparkles,
  Code,
  Terminal,
  Zap,
  Globe,
  Users,
  Laptop,
  Server,
  GitBranch,
  Boxes,
  CheckCircle2,
} from "lucide-react"
import AnimatedBackground from "@/components/Dashboard/AnimatedBackground"
import {
  FloatingHexagon,
  CodeBlock,
  AnimatedLogo
} from "@/components/Dashboard/Decorative"
import { MobileNav } from "@/components/Dashboard/Header"
import { CodeConnectSlider } from "@/components/Dashboard/Slider"
import FAQSection from "@/components/Dashboard/FaqSection"
import ModernLoader from "@/components/Dashboard/LoadinAnimation"
import LoadingScreen from "@/components/Dashboard/LoadingScreen"
import SmoothCursor from "@/components/Dashboard/Cursor"
import InteractiveDemo from "@/components/Code/CodeViz"
import { HoverCard } from "@/components/Dashboard/cards/HoverCard"
import { FuturisticInput } from "@/components/Dashboard/buttons/FuturisticInput"
import { StatsCard } from "@/components/Dashboard/cards/StatsCard"
import { NeonGlow } from "@/components/Dashboard/animations/NeonGlow"
import { ParticleField } from "@/components/Dashboard/animations/ParticleField"
import { ParallaxScroll } from "@/components/Dashboard/animations/ParallaxScroll"
import { RevealAnimation } from "@/components/Dashboard/animations/RevealAnimation"
import { GlowingButton } from "@/components/Dashboard/buttons/GlowingButton"
import MoreUseCases from "@/components/Dashboard/cards/MoreUseCases"
import WhyCodeConnect from "@/components/Dashboard/cards/WhyCodeConnect"
// import AdvancedCodeFlow from "@/components/CodeViz"

export default function CodeConnect() {
  const [roomId, setRoomId] = useState("")
  const [username, setUsername] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [pageLoading, setPageLoading] = useState(true) // Add this state
  const formRef = useRef(null)
  const isInView = useInView(formRef, { once: true })


  const handleJoin = async () => {
    if (!roomId || !username) {
      toast.error("Please enter both room ID and username")
      return
    }

    try {
      setIsLoading(true)
      const baseUrl = window.location.origin
      window.location.href = `${baseUrl}/editor/${roomId}?username=${encodeURIComponent(username)}`
    } catch (error) {
      console.error("Join error:", error)
      toast.error("Failed to join room")
      setIsLoading(false)
    }
  }

  const createNewRoom = (e: any) => {
    e.preventDefault()
    const id = uuidV4()
    setRoomId(id)
    navigator.clipboard.writeText(id).then(() => {
      toast.success("Created a new room", {
        description: "Room ID copied to clipboard!",
      })
    })
  }

  const handleInputKeyUp = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleJoin()
    }
  }



  return (
    <div className="overflow-hidden relative">
      <LoadingScreen />
      <SmoothCursor />
      <ParallaxScroll
        speed={0.2}
        direction="up"
        springConfig={{
          stiffness: 30,
          damping: 60,
          mass: 1,
        }}
        easing={[0.1, 2, 0.2, 2]}
      >

        <div className="relative min-h-screen bg-gradient-to-b from-slate-900 via-slate-800 to-slate-900 text-white overflow-hidden">
          <div>
            <AnimatedBackground />
          </div>

          <ParticleField
            particleCount={1000}
            minDuration={2}
            maxDuration={4}
            maxDelay={3}
            particleSize="4px"
            particleColor="rgb(6 182 212 / 0.3)"
          />
          <NeonGlow />
          <div className="absolute inset-0 overflow-hidden">
            {[...Array(30)].map((_, i) => (
              <FloatingHexagon key={i} delay={i * 0.3} />
            ))}
          </div>

          <div className="z-10 relative">
            <RevealAnimation>
              <div className="container mx-auto px-4 py-8">
                <motion.header
                  className="flex items-center justify-between mb-16"
                  initial={{ opacity: 0, y: -50 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.8, ease: "easeOut" }}
                >
                  <motion.div
                    className="flex items-center space-x-2"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <AnimatedLogo />
                    <motion.span
                      className="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 text-transparent bg-clip-text"
                      animate={{
                        backgroundPosition: ["0%", "100%", "0%"],
                      }}
                      transition={{
                        duration: 3,
                        repeat: Number.POSITIVE_INFINITY,
                        repeatType: "reverse",
                      }}
                    >
                      CodeConnect
                    </motion.span>
                  </motion.div>

                  {/* Desktop Navigation */}
                  <motion.nav
                    className="hidden lg:flex space-x-6"
                    variants={{
                      hidden: { opacity: 0, y: -20 },
                      visible: {
                        opacity: 1,
                        y: 0,
                        transition: {
                          staggerChildren: 0.1,
                        },
                      },
                    }}
                    initial="hidden"
                    animate="visible"
                  >
                    {["Features", "How It Works", "FAQ"].map((item) => (
                      <motion.a
                        key={item}
                        href={`#${item.toLowerCase().replace(/\s+/g, "-")}`}
                        className="text-slate-300 hover:text-white transition-colors relative"
                        variants={{
                          hidden: { opacity: 0, y: -20 },
                          visible: { opacity: 1, y: 0 },
                        }}
                        whileHover={{ scale: 1.1 }}
                      >
                        {item}
                        <motion.div
                          className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-cyan-400 to-blue-500"
                          initial={{ scaleX: 0 }}
                          whileHover={{ scaleX: 1 }}
                          transition={{ duration: 0.3 }}
                        />
                      </motion.a>
                    ))}
                  </motion.nav>

                  {/* Add the Mobile Navigation */}
                  <div className="lg:hidden">
                    <MobileNav />
                  </div>
                </motion.header>

                <RevealAnimation>
                  <main className="z-10 flex flex-col lg:flex-row items-center justify-between gap-12">
                    <motion.div
                      className="lg:w-1/2"
                      initial={{ opacity: 0, x: -100 }}
                      animate={isInView ? { opacity: 1, x: 0 } : {}}
                      transition={{ duration: 0.8, ease: "easeOut" }}
                    >
                      <motion.h1
                        className="text-4xl lg:text-5xl font-bold mb-6 leading-tight"
                        variants={{
                          hidden: { opacity: 0, y: 50 },
                          visible: { opacity: 1, y: 0 },
                        }}
                        initial="hidden"
                        animate="visible"
                        transition={{ duration: 0.8, delay: 0.3 }}
                      >
                        Collaborate in Real-Time <br />
                        with{" "}
                        <motion.span
                          className="bg-gradient-to-r from-cyan-400 to-blue-500 text-transparent bg-clip-text"
                          animate={{
                            backgroundPosition: ["0%", "100%", "0%"],
                          }}
                          transition={{
                            duration: 10,
                            repeat: Number.POSITIVE_INFINITY,
                            repeatType: "reverse",
                          }}
                        >
                          CodeConnect
                        </motion.span>
                      </motion.h1>
                      <motion.p
                        className="text-xl text-slate-300 mb-8"
                        variants={{
                          hidden: { opacity: 0, y: 50 },
                          visible: { opacity: 1, y: 0 },
                        }}
                        initial="hidden"
                        animate="visible"
                        transition={{ duration: 0.8, delay: 0.4 }}
                      >
                        Join a room, share your code, and build amazing projects together. Experience seamless collaboration
                        like never before.
                      </motion.p>
                      <div className="grid grid-cols-2 gap-4 mb-8">
                        <StatsCard icon={Globe} title="Active Rooms" value="1,234" />
                        <StatsCard icon={Users} title="Connected Devs" value="5,678" />
                      </div>
                      <CodeBlock />
                    </motion.div>

                    <motion.div
                      ref={formRef}
                      className="lg:w-1/2 w-full max-w-md"
                      initial={{ opacity: 0, x: 100 }}
                      animate={isInView ? {
                        opacity: 1,
                        x: 0,
                      } : {}}
                      transition={{
                        duration: 1.2,
                        delay: 0.4,
                        ease: [0.22, 1, 0.36, 1]
                      }}
                    >
                      <motion.div
                        className="bg-slate-800/50 backdrop-blur-xl rounded-2xl p-8 shadow-2xl "
                        whileHover={{
                          boxShadow: "0 0 50px rgba(6, 182, 212, 0.3)",
                          scale: 1.02,
                          transition: {
                            duration: 0.4,
                            ease: "easeOut"
                          }
                        }}
                        initial={{ scale: 0.95, opacity: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        transition={{
                          duration: 0.8,
                          delay: 0.6,
                          ease: [0.34, 1.56, 0.64, 1]
                        }}
                      >
                        <h2 className="text-2xl font-bold mb-6 text-center">Join a Room</h2>
                        <div className="space-y-6">
                          <FuturisticInput
                            label="Room ID"
                            id="room-id"
                            icon={Terminal}
                            value={roomId}
                            onChange={(e: any) => setRoomId(e.target.value)}
                            onKeyUp={handleInputKeyUp}
                            placeholder="Enter room ID"
                          />
                          <FuturisticInput
                            label="Username"
                            id="username"
                            icon={Users}
                            value={username}
                            onChange={(e: any) => setUsername(e.target.value)}
                            onKeyUp={handleInputKeyUp}
                            placeholder="Choose a username"
                          />
                          <GlowingButton
                            className="w-full"
                            onClick={async () => {
                              setIsLoading(true); // Set loading state immediately
                              await new Promise(resolve => setTimeout(resolve, 2000));
                              handleJoin();
                            }}
                            disabled={isLoading}
                          >
                            <AnimatePresence mode="wait">
                              {isLoading ? (
                                <motion.div
                                  key="loading"
                                  className="flex items-center justify-center"
                                  initial={{ opacity: 0, y: 10 }}
                                  animate={{ opacity: 1, y: 0 }}
                                  exit={{ opacity: 0, y: -10 }}
                                  transition={{
                                    duration: 0.4,
                                    ease: "easeOut"
                                  }}
                                >
                                  <motion.div
                                    animate={{
                                      rotate: 360,
                                    }}
                                    transition={{
                                      duration: 2,
                                      repeat: Number.POSITIVE_INFINITY,
                                      ease: "linear",
                                    }}
                                  >
                                    <Code className="w-5 h-5 mr-2" />
                                  </motion.div>
                                  Connecting...
                                </motion.div>
                              ) : (
                                <motion.div
                                  key="join"
                                  className="flex items-center justify-center"
                                  initial={{ opacity: 0, y: 10 }}
                                  animate={{ opacity: 1, y: 0 }}
                                  exit={{ opacity: 0, y: -10 }}
                                  transition={{
                                    duration: 0.4,
                                    ease: "easeOut"
                                  }}
                                >
                                  <Sparkles className="w-5 h-5 mr-2" />
                                  Join Room
                                </motion.div>
                              )}
                            </AnimatePresence>
                          </GlowingButton>
                        </div>
                        <p className="text-center text-sm text-slate-400 mt-6">
                          Don&apos;t have an invite?{" "}
                          <motion.button
                            onClick={createNewRoom}
                            className="text-cyan-400 hover:text-cyan-300 transition-colors relative group"
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            transition={{
                              duration: 0.2,
                              ease: "easeOut"
                            }}
                          >
                            Create New Room
                            <span className="absolute bottom-0 left-0 w-0 h-px bg-cyan-300 transition-all duration-500 ease-out group-hover:w-full" />
                          </motion.button>
                        </p>
                      </motion.div>
                    </motion.div>
                  </main>
                </RevealAnimation>
              </div>
            </RevealAnimation>

            <RevealAnimation>
              <motion.section id="features" className="mt-32 px-6 justify-center  items-center mx-auto">
                <h2 className="text-4xl font-bold text-center mb-16">Key Features</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8 w-full">
                  <HoverCard
                    icon={Laptop}
                    title="Real-time Collaboration"
                    description="Code together in real-time with multiple developers, just like you're in the same room."
                  />
                  <HoverCard
                    icon={Server}
                    title="Secure Rooms"
                    description="Create private, secure rooms for your team to collaborate without worries."
                  />
                  <HoverCard
                    icon={Zap}
                    title="Instant Sync"
                    description="Changes sync instantly across all connected devices, ensuring everyone's always on the same page."
                  />
                </div>
              </motion.section>
            </RevealAnimation>

            <RevealAnimation>
              <motion.section id="how-it-works" className="mt-32">
                <h2 className="text-4xl font-bold text-center mb-16">How It Works</h2>
                <div className="flex flex-col md:flex-row justify-center items-center space-y-8 md:space-y-0 md:space-x-12">
                  {[
                    { icon: GitBranch, title: "Create or Join", description: "Start a new room or join an existing one" },
                    { icon: Users, title: "Collaborate", description: "Work together in real-time with your team" },
                    { icon: Boxes, title: "Build", description: "Create amazing projects faster than ever" },
                  ].map((step, index) => (
                    <motion.div
                      key={step.title}
                      className="flex flex-col items-center text-center"
                      initial={{ opacity: 0, y: 50 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.8, delay: index * 0.2 }}
                    >
                      <div className="relative">
                        <motion.div
                          className="absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full opacity-20"
                          animate={{
                            scale: [1, 1.3, 0.8],
                            opacity: [0.2, 0.1, 0.1],
                          }}
                          transition={{
                            duration: 2,
                            repeat: Number.POSITIVE_INFINITY,
                            repeatType: "reverse",
                          }}
                        />
                        <div className="relative bg-slate-800 p-6 rounded-full">
                          <step.icon className="w-10 h-10 text-cyan-400" />
                        </div>
                      </div>
                      <h3 className="mt-6 text-2xl font-semibold">{step.title}</h3>
                      <p className="mt-2 text-slate-400">{step.description}</p>
                    </motion.div>
                  ))}
                </div>
              </motion.section>
            </RevealAnimation>

            <RevealAnimation>
              <WhyCodeConnect />
            </RevealAnimation>

            <RevealAnimation>
              <MoreUseCases />
            </RevealAnimation>

            <RevealAnimation>
              <InteractiveDemo />
            </RevealAnimation>

            <RevealAnimation>
              <FAQSection />
            </RevealAnimation>

            <RevealAnimation>
              <CodeConnectSlider />
            </RevealAnimation>

            {/* <RevealAnimation> */}
            <footer className="mt-32 mb-20 text-center text-sm text-slate-400">
              <p>© 2023 CodeConnect. All rights reserved.</p>
              <p className="mt-2">
                Built with love by{" "}
                <a
                  href={"http://github.com/dhaval079"}
                  className="text-cyan-400 hover:text-cyan-300 transition-colors relative group inline-block"
                >
                  @Dhaval Rupapara
                  <span className="absolute bottom-0 left-0 w-0 h-px bg-cyan-300 transition-all duration-300 ease-out group-hover:w-full" />
                </a>
              </p>
            </footer>
            {/* </RevealAnimation> */}
          </div>
        </div>
      </ParallaxScroll>
    </div>
  )
}

================
File: src/components/Code/Dashboard/AnimatedBackground.tsx
================
import React from "react"
import { useRef, useEffect } from "react"
import * as THREE from "three"

const AnimatedBackground = () => {
  const containerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (!containerRef.current) return

    const scene = new THREE.Scene()
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
    const renderer = new THREE.WebGLRenderer({ alpha: true })

    renderer.setSize(window.innerWidth, window.innerHeight)
    containerRef.current.appendChild(renderer.domElement)

    const geometry = new THREE.IcosahedronGeometry(1, 1)
    const material = new THREE.MeshBasicMaterial({
      color: 0x06b6d4,
      wireframe: true,
      transparent: true,
      opacity: 0.3,
    })
    const icosahedron = new THREE.Mesh(geometry, material)
    scene.add(icosahedron)

    camera.position.z = 5

    const animate = () => {
      requestAnimationFrame(animate)
      icosahedron.rotation.x += 0.001
      icosahedron.rotation.y += 0.001
      renderer.render(scene, camera)
    }

    animate()

    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight
      camera.updateProjectionMatrix()
      renderer.setSize(window.innerWidth, window.innerHeight)
    }

    window.addEventListener("resize", handleResize)

    return () => {
      window.removeEventListener("resize", handleResize)
      containerRef.current?.removeChild(renderer.domElement)
    }
  }, [])

  return <div ref={containerRef} className="fixed inset-0 pointer-events-none" />
}

export default AnimatedBackground

================
File: src/components/Code/Dashboard/Dashboard.tsx
================
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"

import { HTMLMotionProps } from "framer-motion";

export const GlowingButton: React.FC<{
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
  disabled?: boolean;
} & Omit<HTMLMotionProps<"button">, "children" | "className" | "onClick" | "disabled">> = ({ children, className, onClick, disabled, ...props }) => {
  const buttonRef = useRef(null)
  const [isHovered, setIsHovered] = useState(false)

  return (
    <motion.button
      ref={buttonRef}
      className={cn(
        "relative overflow-hidden px-6 py-3 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500  text-white font-medium",
        "shadow-lg shadow-cyan-500/20 hover:shadow-cyan-500/40 transition-all duration-300",
        disabled ? "opacity-50 cursor-not-allowed" : "",
        className,
      )}
      onClick={onClick}
      disabled={disabled}
      whileHover={!disabled ? { scale: 1.05 } : {}}
      whileTap={!disabled ? { scale: 0.95 } : {}}
      onHoverStart={() => !disabled && setIsHovered(true)}
      onHoverEnd={() => !disabled && setIsHovered(false)}
      {...props}
    >
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-blue-400"
        initial={{ x: "-100%" }}
        animate={{ x: isHovered ? "0%" : "-100%" }}
        transition={{ duration: 0.3 }}
      />
      <span className="relative z-10">{children}</span>
    </motion.button>
  )
}


interface FuturisticInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string;
  icon: React.FC<React.SVGProps<SVGSVGElement>>;
}

export const FuturisticInput: React.FC<FuturisticInputProps> = ({ label, icon: Icon, ...props }) => {
  const [isFocused, setIsFocused] = useState(false);

  return (
    <div className="space-y-2 relative w-full">
      <label className="text-sm font-medium text-cyan-300" htmlFor={props.id}>
        {label}
      </label>

      <div className="relative group">
        {/* Text Input */}
        <input
          {...props}
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          className={`
            w-full bg-slate-800/50 
            border-2 border-cyan-500/20 
            text-white placeholder:text-slate-500 
            rounded-lg px-4 py-2 pl-10 
            outline-none transition-all duration-300 
            hover:border-cyan-600
            focus:border-cyan-500 focus:ring-4 focus:ring-cyan-500/30
          `}
        />

        {/* Input Icon */}
        <Icon className="absolute left-3 top-1/2 -translate-y-1/2 text-cyan-400 w-5 h-5 pointer-events-none" />

        {/* AnimatePresence for Focus Glow */}
        <AnimatePresence>
          {isFocused && (
            <motion.div
              key="focusGlow"
              className="absolute inset-0 rounded-lg pointer-events-none"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ duration: 0.2 }}
            >
              {/* Pulsing border glow */}
              <motion.div
                className="absolute inset-0 rounded-lg"
                initial={{ boxShadow: '0 0 0 0 rgba(6,182,212,0.6)' }}
                animate={{
                  boxShadow: [
                    '0 0 0 0 rgba(6,182,212,0.6)',
                    '0 0 15px 2px rgba(6,182,212,0.8)',
                    '0 0 0 0 rgba(6,182,212,0.6)',
                  ],
                }}
                transition={{ duration: 1.5, repeat: Infinity, repeatType: 'loop' }}
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Neon-like glow on hover (behind input) */}
        <motion.div
          className="absolute inset-0 rounded-lg pointer-events-none z-[-1]"
          initial={{ opacity: 0 }}
          whileHover={{ opacity: 1, boxShadow: '0 0 25px 5px rgba(6,182,212,0.4)' }}
          transition={{ duration: 0.5, ease: 'easeInOut' }}
        />
      </div>
    </div>
  );
};


export const FloatingHexagon = ({ delay = 0 }) => (
  <motion.div
    className="absolute"
    style={{
      top: `${Math.random() * 100}%`,
      left: `${Math.random() * 100}%`,
    }}
    initial={{ opacity: 0, scale: 0 }}
    animate={{
      opacity: [0.1, 0.3, 0.1],
      scale: [1, 1.2, 1],
      rotate: [0, 360],
    }}
    transition={{
      duration: 20,
      delay,
      repeat: Number.POSITIVE_INFINITY,
      ease: "linear",
    }}
  >
    <Hexagon className="w-8 h-8 text-cyan-500/10" />
  </motion.div>
)

export const StatsCard = ({ icon: Icon, title, value }: { icon: LucideIcon; title: string; value: string | number }) => {
  const controls = useAnimation()
  const [isHovered, setIsHovered] = useState(false)

  useEffect(() => {
    if (isHovered) {
      controls.start({
        scale: [1, 1.1, 1],
        transition: { duration: 0.3, times: [0, 0.5, 1] },
      })
    }
  }, [isHovered, controls])

  return (
    <motion.div
      className="bg-slate-800/50 rounded-xl p-4 flex items-center space-x-4 cursor-pointer"
      whileHover={{ boxShadow: "0 0 20px rgba(6, 182, 212, 0.3)" }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <motion.div className="bg-cyan-500/20 p-2 rounded-lg" animate={controls}>
        <Icon className="w-6 h-6 text-cyan-400" />
      </motion.div>
      <div>
        <p className="text-sm text-slate-400">{title}</p>
        <motion.p
          className="text-2xl font-bold text-white"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          {value}
        </motion.p>
      </div>
    </motion.div>
  )
}

export const ParticleField = ({ 
  particleCount = 1000,  // Increased from 450 to 800
  minDuration = 2,
  maxDuration = 5,
  maxDelay = 2,
  particleSize = "2px",
  particleColor = "rgb(6 182 212 / 0.3)", // tailwind cyan-500/30
}) => {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {[...Array(particleCount)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute rounded-full"
          style={{
            top: `${Math.random() * 100}%`,
            left: `${Math.random() * 100}%`,
            width: particleSize,
            height: particleSize,
            backgroundColor: particleColor,
          }}
          animate={{
            scale: [0, 1, 0],
            opacity: [0, 1, 0],
            z: [0, 50, 0],
          }}
          transition={{
            duration: Math.random() * (maxDuration - minDuration) + minDuration,
            repeat: Number.POSITIVE_INFINITY,
            repeatType: "loop",
            ease: "easeInOut",
            delay: Math.random() * maxDelay,
          }}
        />
      ))}
    </div>
  )
}

export const CodeBlock = () => {
    const codeLines = [
        "const room = new CodeRoom();",
        "room.onJoin((user) => {",
        "    console.log(`${user} joined`);",
        "});",
        "",
        "room.onMessage((msg) => {",
        "    collaborators.push(msg);",
        "});",
    ]

    return (
        <motion.div
            className="bg-slate-800/70 rounded-lg p-4 font-mono text-sm text-cyan-300 overflow-hidden relative whitespace-pre"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.5 }}
        >
            {codeLines.map((line, index) => (
                <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                >
                    {line}
                </motion.div>
            ))}
            <motion.div
                className="absolute top-0 left-0 w-full h-full bg-gradient-to-r from-cyan-500/10 to-blue-500/10"
                animate={{
                    opacity: [0.5, 0.8, 0.5],
                }}
                transition={{
                    duration: 2,
                    repeat: Number.POSITIVE_INFINITY,
                    repeatType: "reverse",
                }}
            />
        </motion.div>
    )
}

interface FeatureCardProps {
  icon: LucideIcon;
  title: string;
  description: string;
}

export const FeatureCard = ({ icon: Icon, title, description }: FeatureCardProps) => {
  const controls = useAnimation()
  const [isHovered, setIsHovered] = useState(false)

  useEffect(() => {
    if (isHovered) {
      controls.start({
        rotate: [0, 10, -10, 0],
        transition: { duration: 0.5 },
      })
    }
  }, [isHovered, controls])

  return (
    <motion.div
      className="bg-slate-800/50 rounded-xl p-6 flex flex-col items-center text-center cursor-pointer"
      whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(6, 182, 212, 0.2)" }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <motion.div className="bg-cyan-500/20 p-3 rounded-full mb-4" animate={controls}>
        <Icon className="w-8 h-8 text-cyan-400" />
      </motion.div>
      <h3 className="text-xl font-bold mb-2">{title}</h3>
      <p className="text-slate-400">{description}</p>
    </motion.div>
  )
}

export const AnimatedLogo = () => (
  <motion.div
    className="relative w-12 h-12"
    animate={{
      rotate: [0, 360],
    }}
    transition={{
      duration: 20,
      repeat: Number.POSITIVE_INFINITY,
      ease: "linear",
    }}
  >
    <motion.div
      className="absolute inset-0"
      animate={{
        scale: [1, 1.2, 1],
        opacity: [0.7, 1, 0.7],
      }}
      transition={{
        duration: 3,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "reverse",
      }}
    >
      <Hexagon className="w-full h-full text-cyan-400" />
    </motion.div>
    <motion.div
      className="absolute inset-0"
      animate={{
        rotate: [0, -360],
      }}
      transition={{
        duration: 40,
        repeat: Number.POSITIVE_INFINITY,
        ease: "linear",
      }}
    >
      <Hexagon className="w-full h-full text-blue-400 opacity-50" />
    </motion.div>
  </motion.div>
)

export const PulsingCircle = () => (
  <div className="relative">
    <motion.div
      className="absolute inset-0 bg-cyan-500 rounded-full"
      animate={{
        scale: [1, 1.5, 1],
        opacity: [0.5, 0, 0.5],
      }}
      transition={{
        duration: 2,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "loop",
      }}
    />
    <div className="relative bg-cyan-500 w-3 h-3 rounded-full" />
  </div>
)

import React from "react"

interface RevealAnimationProps {
  children: React.ReactNode
  offsetY?: number
  duration?: number
  delay?: number
  threshold?: number | number[]
  rootMargin?: string
  /** If false, animations re-trigger whenever it re-enters view */
  triggerOnce?: boolean
}

export const RevealAnimation: React.FC<RevealAnimationProps> = ({
  children,
  offsetY = 50,
  duration = 0.8,
  delay = 0,
  threshold = 0.2,
  rootMargin = "-100px",
  triggerOnce = true,
}) => {
  // Check user’s “prefers-reduced-motion” setting
  const prefersReducedMotion = useReducedMotion()

  const { ref, inView } = useInView({
    triggerOnce,
    threshold,
    rootMargin,
  })

  // Variants for motion
  const variants = {
    hidden: {
      opacity: 0,
      y: prefersReducedMotion ? 0 : offsetY,
    },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: prefersReducedMotion ? 0.01 : duration,
        ease: "easeOut",
        delay,
      },
    },
  }

  return (
    <motion.div
      ref={ref}
      // Initial and animate states driven by intersection observer
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={variants}
      style={{ willChange: "opacity, transform" }} // Hint for performance
    >
      {children}
    </motion.div>
  )
}


interface RoadmapItemProps {
  icon: LucideIcon;
  title: string;
  description: string;
}

export const RoadmapItem: React.FC<RoadmapItemProps> = ({ icon: Icon, title, description }) => (
  <motion.div
    className="flex items-start space-x-4"
    initial={{ opacity: 0, x: -20 }}
    whileInView={{ opacity: 1, x: 0 }}
    transition={{ duration: 0.5 }}
  >
    <div className="bg-cyan-500/20 p-2 rounded-full"></div>
  </motion.div>
)

import type { LucideIcon } from "lucide-react"

interface HoverCardProps {
  icon: LucideIcon
  title: string
  description: string
}

export const HoverCard = ({ icon: Icon, title, description }: HoverCardProps) => {
  return (
    <motion.div
      className="bg-slate-800/50 backdrop-blur-xl rounded-xl p-6 shadow-lg"
      whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(6, 182, 212, 0.3)" }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex items-center mb-4">
        <Icon className="w-8 h-8 text-cyan-400 mr-3" />
        <h3 className="text-xl font-semibold">{title}</h3>
      </div>
      <p className="text-slate-300">{description}</p>
    </motion.div>
  )
}


export const NeonGlow = () => {
  return (
    <motion.div
      className="fixed inset-0 pointer-events-none z-0"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 2 }}
    >
      <div className="absolute top-0 left-0 w-1/2 h-1/2 bg-blue-500 rounded-full filter blur-[150px] opacity-20" />
      <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-purple-500 rounded-full filter blur-[150px] opacity-20" />
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1/2 h-1/2 bg-cyan-500 rounded-full filter blur-[150px] opacity-20" />
    </motion.div>
  )
}

import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { cn } from "@/lib/utils"

interface ParallaxScrollProps {
    children: ReactNode;
    speed?: number;           
    direction?: "up" | "down"; 
    easing?: "linear" | "easeIn" | "easeOut" | "easeInOut" | number[];  // Modified to accept array
    springConfig?: {          
        stiffness?: number;
        damping?: number;
        mass?: number;
    };
    threshold?: number[];      
}

export function ParallaxScroll({
  children,
  speed = 0.5, // make it small for slower effect
  direction = "up",
}: ParallaxScrollProps) {
  const elementRef = useRef<HTMLDivElement>(null)
  const [elementTop, setElementTop] = useState(0)
  const [clientHeight, setClientHeight] = useState(0)

  // Intersection observer to see if in viewport
  const { ref: inViewRef, inView } = useInView({ threshold: 0.2 })

  // Merge refs so we can both track size and observe intersection
  const mergedRef = (node: HTMLDivElement) => {
    elementRef.current = node
    inViewRef(node)
  }

  // Track window scroll
  const { scrollY } = useScroll()

  // On mount or resize, recalc positions
  useEffect(() => {
    const element = elementRef.current
    if (!element) return

    const onResize = () => {
      setElementTop(element.offsetTop)
      setClientHeight(window.innerHeight)
    }
    onResize()
    window.addEventListener("resize", onResize)
    return () => window.removeEventListener("resize", onResize)
  }, [])

  // Calculate how far the parallax should move
  const scrollRange = [
    Math.max(elementTop - clientHeight, 0),
    elementTop + (elementRef.current?.offsetHeight ?? 0)
  ]
  const totalDistance = (scrollRange[1] - scrollRange[0]) * speed
  
  const transformRange = 
    direction === "up" ? [0, -totalDistance] : [0, totalDistance]

  // 1) Option A: Direct transform with ease
  // const y = useTransform(scrollY, scrollRange, transformRange, {
  //   ease: "easeOut",
  // })

  // 2) Option B: Spring-based, but slower config + no velocity
  const rawY = useTransform(scrollY, scrollRange, transformRange)
  const y = useSpring(rawY, {
    stiffness: 60,
    damping: 30,
    mass: 1,
    // velocity: 0 // or skip it
  })

  return (
    <motion.div
      ref={mergedRef}
      style={{
        y: inView ? y : 0,
        willChange: "transform",
        transform: "translateZ(0)", // GPU hint
      }}
      className="will-change-transform"
    >
      {children}
    </motion.div>
  )
}

export default function WaveLoader() {
  return (
    <svg viewBox="0 0 100 100" className="w-full h-full">
      {[0, 1, 2, 3].map((index) => (
        <motion.circle
          key={index}
          cx="50"
          cy="50"
          r="48"
          fill="none"
          stroke={`rgba(96, 165, 250, ${0.1 + index * 0.2})`}
          strokeWidth="4"
          initial={{ scale: 0, opacity: 0 }}
          animate={{
            scale: [0, 1, 1],
            opacity: [1, 0.5, 0],
          }}
          transition={{
            duration: 2,
            repeat: Number.POSITIVE_INFINITY,
            delay: index * 0.4,
            ease: "easeInOut",
          }}
        />
      ))}
    </svg>
  )
}

================
File: src/components/Code/Dashboard/Faq-section.tsx
================
"use client"

import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { motion, AnimatePresence } from "framer-motion"
import { Plus, Minus } from "lucide-react"

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    },
  },
}

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 100,
      damping: 15,
    },
  },
}

const faqData = [
  {
    question: "Do I need to install anything first?",
    answer: "No, CodeConnect runs entirely in your browser. No installation required!",
  },
  {
    question: "What programming languages does CodeConnect support?",
    answer: "We currently support JavaScript, Python, Java, and C++ with full syntax highlighting and error checking.",
  },
  {
    question: "Will my code be saved if I close the browser?",
    answer: "Your code is temporary and not saved on our servers. Make sure to copy or download before closing.",
  },
  {
    question: "Can I customize the editor appearance?",
    answer: "Yes! You can customize the font size, switch themes, and adjust the layout to your liking.",
  },
  {
    question: "How can I use the AI assistant effectively?",
    answer: "The AI assistant can help debug code, explain segments, suggest optimizations, answer questions, and generate examples—all while being contextually aware of your codebase.",
  },
] as const

export default function FAQSection() {
  return (
    <section className="py-16 px-4 md:px-6 lg:px-8 max-w-5xl mx-auto">
      <motion.div
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, margin: "-100px" }}
        variants={containerVariants}
        className="text-center mb-12"
      >
        <motion.span
          variants={itemVariants}
          className="text-orange-400 font-medium mb-4 block"
        >
          FREQUENTLY ASKED QUESTIONS
        </motion.span>
        <motion.h2
          variants={itemVariants}
          className="text-4xl md:text-5xl font-bold text-white"
        >
          You ask? We{" "}
          <span className="italic font-serif text-slate-300">answer</span>
        </motion.h2>
      </motion.div>

      <motion.div
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        viewport={{ once: true, margin: "-100px" }}
        transition={{ duration: 0.4 }}
        className="bg-slate-800/50 backdrop-blur-xl rounded-2xl shadow-lg p-6 md:p-8"
      >
        <Accordion type="single" collapsible className="space-y-4">
          <AnimatePresence>
            {faqData.map((faq, index) => (
              <motion.div
                key={`item-${index + 1}`}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true, margin: "-50px" }}
                transition={{
                  delay: index * 0.1,
                  type: "spring",
                  stiffness: 100,
                  damping: 15,
                }}
              >
                <AccordionItem value={`item-${index + 1}`} className="border-none">
                  <AccordionTrigger className="flex justify-between items-center w-full py-4 text-left text-lg font-semibold text-white hover:no-underline">
                    {({ isExpanded }) => (
                      <>
                        <span>{faq.question}</span>
                        <motion.div
                          className="shrink-0 ml-4 p-2 rounded-full border border-slate-700"
                          animate={{ rotate: isExpanded ? 180 : 0 }}
                          transition={{ type: "spring", stiffness: 200, damping: 20 }}
                        >
                          {isExpanded ? (
                            <Minus className="h-4 w-4 text-orange-400" />
                          ) : (
                            <Plus className="h-4 w-4 text-slate-400" />
                          )}
                        </motion.div>
                      </>
                    )}
                  </AccordionTrigger>

                  <AccordionContent className="text-slate-300 pt-2 pb-4 italic">
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ type: "spring", stiffness: 150, damping: 15 }}
                    >
                      "{faq.answer}"
                    </motion.div>
                  </AccordionContent>
                </AccordionItem>
              </motion.div>
            ))}
          </AnimatePresence>
        </Accordion>
      </motion.div>
    </section>
  )
}

================
File: src/components/Code/Dashboard/TechSlider.tsx
================
"use client"

import { motion } from "framer-motion"

const phrases = ["Code Together", "Build Faster", "Ship Better", "Scale Higher", "Dream Bigger"]

export const CodeConnectSlider = () => {
  return (
    <div className="w-full overflow-hidden bg-slate-900/50 py-32">
      <motion.div
        className="whitespace-nowrap"
        animate={{
          x: [0, -1920],
        }}
        transition={{
          x: {
            repeat: Number.POSITIVE_INFINITY,
            repeatType: "loop",
            duration: 20,
            ease: "linear",
          },
        }}
      >
        <div className="inline-flex">
          {[...phrases, ...phrases].map((text, i) => (
            <div key={i} className="mx-4 inline-flex items-center text-[120px] font-bold tracking-tighter">
              <span className="bg-gradient-to-r from-white to-white/50 bg-clip-text text-transparent">{text}</span>
              <span className="mx-8 text-slate-600">/</span>
            </div>
          ))}
        </div>
      </motion.div>
    </div>
  )
}

================
File: src/components/Code/AiAssistant.tsx
================
"use client";
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Bot, Send, ChevronRight, Copy, Check, Loader2, SendIcon, BotOffIcon, BotIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';
import OpenAI from 'openai';
import { FuturisticInput } from '../Dashboard/buttons/FuturisticInput';
const { GoogleGenerativeAI } = require("@google/generative-ai");

const messageAnimations = {
  initial: { 
    opacity: 0, 
    y: 20,
    scale: 0.95
  },
  animate: { 
    opacity: 1, 
    y: 0,
    scale: 1,
    transition: {
      duration: 0.3,
      ease: "easeOut"
    }
  },
  exit: { 
    opacity: 0,
    scale: 0.95,
    transition: {
      duration: 0.2
    }
  }
};

const CodeBlock = ({ code, language }: { code: string; language: string }) => {
  const [copied, setCopied] = React.useState(false);
  const [isHovered, setIsHovered] = React.useState(false);

  const copyCode = async () => {
    await navigator.clipboard.writeText(code);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div
      className="relative my-2 rounded-lg overflow-hidden bg-gray-900 border border-gray-700"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="flex items-center justify-between px-4 py-2 bg-gray-800">
        <span className="text-xs text-gray-400">
          {language || 'code'}
        </span>
        <Button
          variant="ghost"
          size="sm"
          onClick={copyCode}
          className="h-8 px-2 hover:bg-gray-700"
        >
          {copied ? (
            <Check className="h-4 w-4 text-green-400" />
          ) : (
            <Copy className="h-4 w-4 text-gray-400" />
          )}
        </Button>
      </div>
      <pre className="p-4 overflow-x-auto">
        <code className="text-sm text-gray-300 font-mono whitespace-pre-wrap break-words">
          {code}
        </code>
      </pre>
    </div>
  );
};

interface MessagePart {
  type: 'text' | 'code';
  content: string;
  language?: string;
}

const formatMessage = (content: string): MessagePart[] => {
  const parts: MessagePart[] = [];
  let currentText = '';
  let inCodeBlock = false;
  let currentCode = '';
  let language = '';

  const lines = content.split('\n');

  for (const line of lines) {
    if (line.startsWith('```')) {
      if (inCodeBlock) {
        parts.push({ type: 'code', content: currentCode.trim(), language });
        currentCode = '';
        language = '';
        inCodeBlock = false;
      } else {
        if (currentText) {
          parts.push({ type: 'text', content: currentText.trim() });
          currentText = '';
        }
        language = line.slice(3).trim();
        inCodeBlock = true;
      }
      continue;
    }

    if (inCodeBlock) {
      currentCode += line + '\n';
    } else {
      currentText += line + '\n';
    }
  }

  if (currentText) {
    parts.push({ type: 'text', content: currentText.trim() });
  }

  return parts;
};

export const MessageContent = ({ content }: { content: string }) => {
  const parts = formatMessage(content);

  return (
    <div className="space-y-2">
      {parts.map((part, index) => {
        if (part.type === 'code') {
          return (
            <CodeBlock
              key={index}
              code={part.content}
              language={part.language ?? 'text'}
            />
          );
        }
        return (
          <motion.p
            key={index}
            className="text-sm leading-relaxed whitespace-pre-wrap break-words"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: index * 0.1 }}
          >
            {part.content}
          </motion.p>
        );
      })}
    </div>
  );
};

const MessageContainer = React.forwardRef<HTMLDivElement, React.PropsWithChildren<{}>>(
  ({ children }, ref) => (
    <ScrollArea className="flex-1 p-4">
      <div ref={ref} className="space-y-6">
        {children}
      </div>
    </ScrollArea>
  )
);

MessageContainer.displayName = 'MessageContainer';

const openai = new OpenAI({
  dangerouslyAllowBrowser: true,
  baseURL: "https://openrouter.ai/api/v1",
  apiKey: "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",
  defaultHeaders: {
    "HTTP-Referer":  "",
    "X-Title": "CodeConnect"
  }
});

// client = genai.Client(api_key="AIzaSyCF6mKRofVaWa-4RC6hjYQtijNqxOZSt58")


interface AiAssistantProps {
  isOpen: boolean;
  onToggle: () => void;
}

const AiAssistant = ({ isOpen, onToggle }: AiAssistantProps) => {
  interface Message {
    type: 'user' | 'assistant';
    content: string;
    timestamp: string;
  }
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollRef = useRef<HTMLDivElement>(null);


  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTo({ top: scrollRef.current.scrollHeight, behavior: 'smooth' });
    }
  }, [messages]);

  const askAI = async (question:any) => {
    try {
      setIsLoading(true);

      // const completion = await openai.chat.completions.create({
      //   model: "google/gemini-flash-1.5-8b-exp",
      //   // max_tokens: 1000,
      //   // temperature: 0.7,
      //   messages: [
      //     {
      //       role: "user",
      //       content: question
      //     }
      //   ]
      // });

      const genAI = new GoogleGenerativeAI("AIzaSyCF6mKRofVaWa-4RC6hjYQtijNqxOZSt58");
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

      const prompt = question;

      const result = await model.generateContent(prompt);
      console.log(result.response.text());

      // console.log('OpenRouter response:', completion);

      // const responseContent = completion?.choices?.[0]?.message?.content;
      // if (responseContent) {
      //   return responseContent;
      // }

      const responseContent = result.response.text();
      console.log("ResponseContent is : ", responseContent);
      if (responseContent) {
        return responseContent;
      }

      throw new Error('Invalid response format from AI service');
    } catch (error) {
      console.error('AI request error:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e:any) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      type: 'user',
      content: input,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');

    try {
      const aiResponse = await askAI(input);
      const aiMessage: Message = {
        type: 'assistant',
        content: aiResponse,
        timestamp: new Date().toISOString()
      };

      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      const errorMessage: Message = {
        type: 'assistant',
        content: "I apologize, but I'm having trouble right now. Please try again in a moment.",
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ x: 320, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          exit={{ x: 320, opacity: 0 }}
          transition={{ type: "spring", stiffness: 300, damping: 30 }}
          className="h-full border-l border-gray-700 bg-gray-800/95 backdrop-blur-sm flex flex-col fixed right-0 top-0 bottom-0 w-80 z-50"
        >
          <motion.div
            className="p-4 border-b border-gray-700 flex items-center justify-between"
            initial={{ y: -20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2 }}
          >
            <div className="flex items-center space-x-2">
              <motion.div
                animate={{
                  rotate: [0, -10, 10, -10, 0],
                  scale: [1, 1.1, 1]
                }}
                transition={{
                  duration: 0.5,
                  ease: "easeInOut",
                  times: [0, 0.2, 0.5, 0.8, 1]
                }}
              >
                <Bot className="w-5 h-5 text-blue-400" />
              </motion.div>
              <span className="font-semibold text-white">AI Assistant</span>
            </div>
            <Button
              variant="ghost"
              size="icon"
              onClick={onToggle}
              className="hover:bg-gray-700"
            >
              <motion.div
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <ChevronRight className="w-5 h-5" />
              </motion.div>
            </Button>
          </motion.div>

          {/* <ScrollArea className="flex-1 p-4" ref={scrollRef}>
            <div className="space-y-6">
              <AnimatePresence>
                {messages.map((message, index) => (
                  <motion.div
                    key={index}
                    variants={messageAnimations}
                    initial="initial"
                    animate="animate"
                    exit="exit"
                    className={`flex ${
                      message.type === 'user' ? 'justify-end' : 'justify-start'
                    }`}
                  >
                    <motion.div
                      className={`max-w-[90%] rounded-lg p-4 ${
                        message.type === 'user'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-700/70 backdrop-blur-sm text-gray-100'
                      }`}
                      whileHover={{ scale: 1.01 }}
                    >
                      <MessageContent content={message.content} />
                      <motion.span 
                        className="text-xs opacity-50 mt-2 block"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 0.5 }}
                        transition={{ delay: 0.5 }}
                      >
                        {new Date(message.timestamp).toLocaleTimeString()}
                      </motion.span>
                    </motion.div>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
            {isLoading && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 10 }}
                className="flex justify-start mt-4"
              >
                <div className="bg-gray-700/70 backdrop-blur-sm rounded-lg p-3 flex items-center space-x-2">
                  <Loader2 className="w-4 h-4 animate-spin text-blue-400" />
                  <span className="text-sm text-gray-300">AI is thinking...</span>
                </div>
              </motion.div>
            )}
          </ScrollArea> */}
          <MessageContainer ref={scrollRef}>
            <AnimatePresence>
              {messages.map((message, index) => (
                <motion.div
                  key={index}
                  variants={messageAnimations}
                  initial="initial"
                  animate="animate"
                  exit="exit"
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'
                    }`}
                >
                  <motion.div
                    className={`max-w-[90%] rounded-lg p-4 ${message.type === 'user'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-700/70 backdrop-blur-sm text-gray-100'
                      }`}
                    whileHover={{ scale: 1.01 }}
                  >
                    <MessageContent content={message.content} />
                    <motion.span
                      className="text-xs opacity-50 mt-2 block"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 0.5 }}
                      transition={{ delay: 0.5 }}
                    >
                      {new Date(message.timestamp).toLocaleTimeString()}
                    </motion.span>
                  </motion.div>
                </motion.div>
              ))}
            </AnimatePresence>
            {isLoading && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: 10 }}
                className="flex justify-start mt-4"
              >
                <div className="bg-gray-700/70 backdrop-blur-sm rounded-lg p-3 flex items-center space-x-2">
                  <Loader2 className="w-4 h-4 animate-spin text-blue-400" />
                  <span className="text-sm text-gray-300">AI is thinking...</span>
                </div>
              </motion.div>
            )}
          </MessageContainer>
          <motion.form
            onSubmit={handleSubmit}
            className="p-4 border-t border-gray-700"
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.3 }}
          >
            <div className="flex space-x-2">
              <FuturisticInput
               disabled={isLoading}
                value={input}
                icon={BotIcon}
                onChange={(e:any) => setInput(e.target.value)}
                label=""
                id="ai-input"
                className="flex-1 mb-4 bg-gray-700/70 backdrop-blur-sm border-gray-600 text-white"
              />
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button
                  type="submit"
                  size="icon"
                  disabled={isLoading || !input.trim()}
                  className="bg-blue-600 hover:bg-blue-700 mt-2"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </motion.div>
            </div>
          </motion.form>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AiAssistant;

================
File: src/components/Code/Chat.tsx
================
"use client"

import React, { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { Send, Paperclip, X, MessageSquare, Video, Image } from 'lucide-react'
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { ACTIONS } from "@/lib/actions"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { useSocket } from "@/providers/socketProvider"
import { MessageBubble } from "./MessageBubble"

interface Message {
  id: string
  content: string
  sender: string
  timestamp: number
  attachments?: { type: "image" | "video" | "audio"; url: string }[]
}

interface ChatProps {
  roomId: string
  username: string
  isOpen: boolean
  onToggle: () => void
}

export const Chat = ({ roomId, username, isOpen, onToggle }: ChatProps) => {
  const [messages, setMessages] = useState<Message[]>([])
  const [newMessage, setNewMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const [showAttachmentModal, setShowAttachmentModal] = useState(false)
  const { socket } = useSocket()
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)
  const hasInitialized = useRef(false)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  // Convert username to lowercase at component level
  const normalizedUsername = username.toLowerCase()

  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })
    }
  }

  useEffect(() => {
    const timeoutId = setTimeout(scrollToBottom, 100)
    return () => clearTimeout(timeoutId)
  }, [messages])

  useEffect(() => {
    if (!socket) return

    const handleSyncMessages = ({ messages: syncedMessages }: { messages: Message[] }) => {
      if (!hasInitialized.current) {
        // Normalize existing usernames
        const normalizedMessages = syncedMessages.map(msg => ({
          ...msg,
          sender: msg.sender.toLowerCase()
        }))
        setMessages(normalizedMessages)
        hasInitialized.current = true
        setTimeout(scrollToBottom, 100)
      }
    }

    const handleReceiveMessage = (message: Message) => {
      // Normalize incoming message username
      const normalizedMessage = {
        ...message,
        sender: message.sender.toLowerCase()
      }

      setMessages((prev) => {
        if (prev.some((m) => m.id === normalizedMessage.id)) return prev
        return [...prev, normalizedMessage].sort((a, b) => a.timestamp - b.timestamp)
      })
      setTimeout(scrollToBottom, 100)
    }

    const handleTypingStart = ({ username: typingUser }: { username: string }) => {
      if (typingUser.toLowerCase() !== normalizedUsername) {
        setIsTyping(true)
      }
    }

    const handleTypingStop = ({ username: typingUser }: { username: string }) => {
      if (typingUser.toLowerCase() !== normalizedUsername) {
        setIsTyping(false)
      }
    }

    socket.on(ACTIONS.SYNC_MESSAGES, handleSyncMessages)
    socket.on(ACTIONS.RECEIVE_MESSAGE, handleReceiveMessage)
    
    return () => {
      socket.off(ACTIONS.SYNC_MESSAGES)
      socket.off(ACTIONS.RECEIVE_MESSAGE)
      hasInitialized.current = false
    }
  }, [socket, normalizedUsername])

  const sendMessage = (e: React.FormEvent) => {
    e.preventDefault()
    if (!newMessage.trim()) return

    const message: Message = {
      id: `${Date.now()}-${Math.random()}`,
      content: newMessage.trim(),
      sender: normalizedUsername,
      timestamp: Date.now(),
    }

    socket?.emit(ACTIONS.SEND_MESSAGE, { roomId, message })
    setNewMessage("")
  }

  const handleAttachment = (type: "image" | "video", url: string) => {
    const message: Message = {
      id: `${Date.now()}-${Math.random()}`,
      content: type === "image" ? "Image attachment" : "Video attachment",
      sender: normalizedUsername,
      timestamp: Date.now(),
      attachments: [{ type, url }],
    }

    socket?.emit(ACTIONS.SEND_MESSAGE, { roomId, message })
    setShowAttachmentModal(false)
  }

  return (
    <>
      <Button
        variant="ghost"
        size="icon"
        onClick={onToggle}
        className="fixed bottom-4 right-4 z-50 rounded-full bg-blue-600 shadow-lg hover:bg-blue-700"
      >
        {isOpen ? (
          <X className="h-5 w-5 text-white" />
        ) : (
          <MessageSquare className="h-5 w-5 text-white" />
        )}
      </Button>

      <AnimatePresence mode="wait">
        {isOpen && (
          <motion.div
            initial={{ x: '100%', opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: '100%', opacity: 0 }}
            transition={{ type: 'spring', damping: 20 }}
            className="fixed right-0 top-0 h-full w-80 border-l border-gray-700 bg-gray-800/95 backdrop-blur-sm"
          >
            <TooltipProvider>
              <div className="flex flex-col h-full bg-gradient-to-br from-gray-900 to-gray-800 rounded-lg shadow-xl">
                <motion.div className="flex-none flex items-center justify-center gap-4 py-5 border-b border-gray-700 bg-gray-800">
                  <h2 className="text-lg font-semibold text-gray-100">Chat</h2>
                  <div className="text-sm text-gray-400">
                    ({messages.length} message{messages.length !== 1 ? "s" : ""})
                  </div>
                </motion.div>

                <div className="flex-1 relative overflow-hidden">
                  {messages.length === 0 ? (
                    <motion.div 
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="absolute inset-0 flex items-center justify-center text-gray-400"
                    >
                      <div className="text-center">
                        <p className="text-xl mb-2">No messages yet</p>
                        <p className="text-sm">Start a conversation by sending a message</p>
                      </div>
                    </motion.div>
                  ) : ( 
                    <ScrollArea 
                      ref={scrollAreaRef}
                      className="h-[calc(100vh-13rem)] absolute inset-0"
                    >
                      <div className="flex flex-col space-y-4 p-4 min-h-full">
                        <AnimatePresence initial={false}>
                          {messages.map((message) => (
                            <MessageBubble
                              key={message.id} 
                              message={message} 
                              isOwnMessage={message.sender === normalizedUsername}
                            />
                          ))}
                        </AnimatePresence>
                        <div ref={messagesEndRef} />
                      </div>
                    </ScrollArea>
                  )}
                </div>

                <motion.div className="flex-none p-4 border-t border-gray-700 bg-gray-800">
                  <form onSubmit={sendMessage} className="flex gap-2">
                    <input
                      ref={inputRef}
                      type="text"
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      placeholder="Type a message..."
                      className="flex-1 bg-gray-700 text-gray-100 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300"
                    />
                    <div className="flex gap-3">
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            type="submit"
                            size="icon"
                            className="rounded-full bg-blue-600 hover:bg-blue-700 transition-colors duration-300"
                            disabled={!newMessage.trim()}
                          >
                            <Send className="h-4 w-4 text-white" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>Send message</TooltipContent>
                      </Tooltip>

                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            type="button"
                            size="icon"
                            variant="ghost"
                            className="rounded-full text-gray-300 hover:text-gray-100 hover:bg-gray-700"
                            onClick={() => setShowAttachmentModal(true)}
                          >
                            <Paperclip className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>Attach file</TooltipContent>
                      </Tooltip>
                    </div>
                  </form>

                  {showAttachmentModal && (
                    <AttachmentModal 
                      onClose={() => setShowAttachmentModal(false)} 
                      onAttach={handleAttachment} 
                    />
                  )}
                </motion.div>
              </div>
            </TooltipProvider>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}

interface AttachmentModalProps {
  onClose: () => void
  onAttach: (type: "image" | "video", url: string) => void
}

const AttachmentModal: React.FC<AttachmentModalProps> = ({ onClose, onAttach }) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null)

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      setSelectedFile(file)
    }
  }

  const handleAttach = () => {
    if (selectedFile) {
      const type = selectedFile.type.startsWith("image/") ? "image" : "video"
      const url = URL.createObjectURL(selectedFile)
      onAttach(type, url)
    }
  }

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center"
      >
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.9, opacity: 0 }}
          className="bg-gray-800 p-6 rounded-lg shadow-xl"
        >
          <h3 className="text-lg font-semibold mb-4 text-gray-100">Attach File</h3>
          <div className="flex flex-col gap-4">
            <input
              type="file"
              accept="image/*,video/*"
              onChange={handleFileChange}
              className="hidden"
              id="file-input"
            />
            <label
              htmlFor="file-input"
              className="flex items-center justify-center gap-2 p-4 border-2 border-dashed border-gray-600 rounded-lg cursor-pointer hover:bg-gray-700 transition-colors duration-200"
            >
              {selectedFile ? (
                <span className="text-gray-300">{selectedFile.name}</span>
              ) : (
                <>
                  <Image className="w-6 h-6 text-gray-400" />
                  <Video className="w-6 h-6 text-gray-400" />
                  <span className="text-gray-400">Choose an image or video</span>
                </>
              )}
            </label>
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={onClose} className="text-gray-300 border-gray-600 hover:bg-gray-700">
                Cancel
              </Button>
              <Button onClick={handleAttach} disabled={!selectedFile} className="bg-blue-600 hover:bg-blue-700">
                Attach
              </Button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  )
}


const TypingIndicator: React.FC = () => {
  const dotVariants = {
    initial: { y: 0 },
    animate: { y: [0, -5, 0] },
  }

  return (
    <div className="flex space-x-1 mt-2">
      {[0, 1, 2].map((dot) => (
        <motion.div
          key={dot}
          className="w-2 h-2 bg-blue-400 rounded-full"
          variants={dotVariants}
          initial="initial"
          animate="animate"
          transition={{
            duration: 0.6,
            repeat: Number.POSITIVE_INFINITY,
            repeatType: "loop",
            delay: dot * 0.2,
          }}
        />
      ))}
    </div>
  )
}

================
File: src/components/Code/Client.tsx
================
"use client"

import React, { useState, useEffect, useRef } from "react"
import { motion, AnimatePresence, useAnimation, useInView } from "framer-motion"
import { createAvatar } from "@dicebear/core"
import { Sparkles, MessageSquare, Zap, Activity } from 'lucide-react'
import type { Style } from '@dicebear/core';
import { 
  lorelei, 
  bottts, 
  pixelArt, 
  adventurer,
  micah,
  openPeeps,
  avataaars,
  bigSmile,
  funEmoji,
  notionists,
  personas
} from '@dicebear/collection';

// Define avatar style type
type AvatarStyle = Style<{
  backgroundColor?: string[];
  seed: string;
}>;

// Background colors that work well with all styles
const commonBackgroundColors = [
  "b6e3f4",  // Light Blue
  "c0aede",  // Soft Purple
  "d1d4f9",  // Periwinkle
  "ffd5dc",  // Light Pink
  "ffdfbf"   // Light Peach
];

// Organized avatar styles with balance between masculine, feminine, and neutral options
const avatarStyles = [
  // Feminine-leaning styles
  lorelei as unknown as AvatarStyle,         // Artistic feminine
  notionists as unknown as AvatarStyle,      // Professional feminine
  personas as unknown as AvatarStyle,        // Modern feminine
  
  // Masculine-leaning styles
  adventurer as unknown as AvatarStyle,      // Adventure game masculine
  avataaars as unknown as AvatarStyle,       // Professional masculine
  bigSmile as unknown as AvatarStyle,        // Friendly masculine

  // Gender-neutral styles
  bottts as unknown as AvatarStyle,          // Robot/neutral
  pixelArt as unknown as AvatarStyle,        // Pixel art/neutral
  micah as unknown as AvatarStyle,           // Abstract/neutral
  openPeeps as unknown as AvatarStyle,       // Modern/neutral
  funEmoji as unknown as AvatarStyle         // Emoji/neutral
];

// Configuration for avatar creation
const avatarConfig = {
  backgroundColor: commonBackgroundColors
};

export { 
  avatarStyles, 
  avatarConfig,
  type AvatarStyle 
};

interface ClientProps {
  user: string
  isActive: boolean
  isTyping: boolean
  lastActive: string
  messageCount: number
  mood: "happy" | "neutral" | "busy"
}

const moodColors = {
  happy: "#4ade80",
  neutral: "#60a5fa",
  busy: "#f87171"
} as const

const moodEmojis = {
  happy: "😊",
  neutral: "😐",
  busy: "😓"
} as const

// const avatarStyles = [
//   bottts as unknown as AvatarStyle,
//   lorelei as unknown as AvatarStyle,
//   micah as unknown as AvatarStyle,
//   pixelArt as unknown as AvatarStyle,
//   adventurer as unknown as AvatarStyle,
// ];

const TypingAnimation = () => {
  return (
    <div className="flex space-x-1">
      {[0, 1, 2].map((dot) => (
        <motion.div
          key={dot}
          className="w-2 h-2 bg-blue-400 rounded-full"
          initial={{ y: 0 }}
          animate={{
            y: [0, -6, 0],
            transition: {
              duration: 0.6,
              repeat: Infinity,
              delay: dot * 0.2,
            },
          }}
        />
      ))}
    </div>
  )
}

export const Client: React.FC<ClientProps> = ({ 
  user, 
  isActive, 
  isTyping, 
  lastActive, 
  messageCount, 
  mood 
}) => {
  const [avatar, setAvatar] = useState("")
  const controls = useAnimation()
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true })

  useEffect(() => {
    // Get consistent avatar style for user
    const styleIndex = user
      .split('')
      .reduce((acc, char) => acc + char.charCodeAt(0), 0) % avatarStyles.length;
    const style = avatarStyles[styleIndex];
    
    const avatarSvg = createAvatar(style, {
      seed: user,
      backgroundColor: ["b6e3f4", "c0aede", "d1d4f9", "ffd5dc", "ffdfbf"],
    }).toDataUri()
    
    setAvatar(avatarSvg)
  }, [user])

  useEffect(() => {
    if (isInView) {
      controls.start("visible")
    }
  }, [controls, isInView])

  const cardVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.6,
        ease: "easeOut",
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
  } as const

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.6, ease: "easeOut" },
    },
  } as const

  return (
    <motion.div
      ref={ref}
      className="relative flex items-center overflow-y-scroll space-x-4 p-6 rounded-xl bg-gradient-to-r from-slate-800/50 to-slate-700/50 hover:from-slate-700/50 hover:to-slate-600/50 transition-all duration-300 shadow-lg overflow-hidden"
      variants={cardVariants}
      initial="hidden"
      animate={controls}
      whileHover={{ scale: 1.03 }}
    >
      <motion.div className="relative z-10" variants={itemVariants}>
        <AnimatePresence>
          {isActive && (
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{
                scale: [1, 1.1, 1],
                opacity: [0.5, 1, 0.5],
              }}
              exit={{ scale: 0.8, opacity: 0 }}
              transition={{
                duration: 1.5,
                repeat: Infinity,
                ease: "easeInOut",
              }}
              className="absolute -inset-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 opacity-75 blur-lg"
            />
          )}
        </AnimatePresence>

        <motion.div
          className="relative rounded-full overflow-hidden"
          whileHover={{ scale: 1.1, rotate: 360 }}
          transition={{ type: "spring", stiffness: 300, damping: 10 }}
        >
          <img src={avatar || "/placeholder.svg"} alt={user} className="w-16 h-16" />
        </motion.div>
      </motion.div>

      <div className="flex flex-col min-w-0 flex-1 z-10">
        <motion.div className="flex items-center space-x-2 mb-1" variants={itemVariants}>
          <motion.span
            className="font-medium text-white truncate text-lg"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2 }}
          >
            {user}
          </motion.span>
          {isActive && (
            <motion.span
              className="text-xs bg-gradient-to-r from-cyan-500 via-blue-500 to-indigo-500 text-white px-2 py-1 rounded-full flex items-center space-x-1"
              initial={{ opacity: 0, scale: 0 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.4, type: "spring" }}
            >
              <Sparkles size={12} />
              <span>Active</span>
            </motion.span>
          )}
        </motion.div>

        <AnimatePresence mode="wait">
          {isTyping ? (
            <motion.div
              key="typing"
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="text-sm text-blue-400 flex items-center space-x-2"
              variants={itemVariants}
            >
              <MessageSquare size={14} />
              <span>typing</span>
              <TypingAnimation />
            </motion.div>
          ) : (
            <motion.div
              key="last-active"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 10 }}
              className="text-sm text-gray-400 flex items-center space-x-1"
              variants={itemVariants}
            >
              <Zap size={14} />
              <span>Last active: {lastActive}</span>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      <motion.div
        className="absolute top-2 right-2 bg-gray-700 rounded-full px-2 py-1 text-xs text-white flex items-center space-x-1"
        initial={{ opacity: 0, scale: 0, rotate: -45 }}
        animate={{ opacity: 1, scale: 1, rotate: 0 }}
        transition={{ delay: 0.6, type: "spring" }}
        whileHover={{ scale: 1.1, rotate: 5 }}
        variants={itemVariants}
      >
        <MessageSquare size={12} />
        <span>{messageCount}</span>
      </motion.div>

      <motion.div
        className="absolute bottom-2 right-2"
        initial={{ opacity: 0, scale: 0 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 0.8, type: "spring" }}
        variants={itemVariants}
      >
        <Activity size={16} className="text-gray-400" />
      </motion.div>
    </motion.div>
  )
}

export default Client

================
File: src/components/Code/CodeViz.tsx
================
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence, useAnimation } from 'framer-motion';
import { 
  Bot, MessageSquare, Users, Sparkles, 
  Code, Gift, Terminal, Zap, Check
} from 'lucide-react';

interface User {
  id: number;
  name: string;
  status: string;
  role: string;
}
interface AISuggestion {
  id: number;
  type: string;
  content: string;
  code: string;
}

interface Message {
  id: number;
  user: string;
  content: string;
}
const EnhancedInteractiveDemo = () => {
  const [demoState, setDemoState] = useState('initial');
  const [code, setCode] = useState(`// Let's build something amazing together\nfunction optimizeCode() {\n  // Start coding...\n}`);
  const [messages, setMessages] = useState<Message[]>([]);
 
  const [activeUsers, setActiveUsers] = useState<User[]>([]);
  const [aiSuggestions, setAiSuggestions] = useState<AISuggestion[]>([]);
  const controls = useAnimation();
  const editorRef = useRef(null);

  // Synthetic typing effect
  const typeCode = async (finalCode:any) => {
    const chars = finalCode.split('');
    let currentCode = '';
    
    for (const char of chars) {
      currentCode += char;
      setCode(currentCode);
      // Variable delay for more natural typing
      await new Promise(r => setTimeout(r, Math.random() * 10 + 30));
    }
  };

  // Demo sequence with enhanced interactions
  useEffect(() => {
    const demoSequence = async () => {
      // Initial setup
      setDemoState('connecting');
      await controls.start({ opacity: 1, y: 0 });
      
      // User 1 joins
      setActiveUsers([
        { id: 1, name: 'Sarah Chen', status: 'active', role: 'Frontend Dev' },
        { id: 2, name: 'Alex Rivera', status: 'active', role: 'Backend Dev' }
      ]);
      
      // Start coding
      setDemoState('coding');
      await typeCode(`function optimizePerformance(code: string) {
  // Analyze code structure
  const analysis = analyzeComplexity(code);
  
  // Apply optimizations
  return applyBestPractices(analysis);
}`);

      // AI Assistant suggestion
      setDemoState('ai-suggesting');
      setAiSuggestions([{
        id: 1,
        type: 'improvement',
        content: 'Consider adding error handling for invalid inputs',
        code: `function optimizePerformance(code: string) {
  if (!code) throw new Error('Code input required');
  
  // Analyze code structure
  const analysis = analyzeComplexity(code);
  
  // Apply optimizations
  return applyBestPractices(analysis);
}`,
      }]);

      // User 2 joins
      await new Promise(r => setTimeout(r, 1000));
      setActiveUsers(prev => [...prev, 
        { id: 2, name: 'Alex Rivera', status: 'active', role: 'Backend Dev' }
      ]);

      // Chat interaction
      setDemoState('collaborating');
      setMessages([
        { id: 1, user: 'Sarah Chen', content: 'Added base optimization function' },
        { id: 2, user: 'Alex Rivera', content: 'Good catch by AI on error handling' },
        { id: 3, user: 'AI Assistant', content: 'Would you like some improvements' },
      ]);

      // Reset and loop
      await new Promise(r => setTimeout(r, 3000));
      setDemoState('initial');
      demoSequence();
    };

    demoSequence();
  }, []);

  return (
    <div className="relative max-w-4xl max-h-2xl mx-auto mt-36 mb-36">
      {/* Main Container */}
      <motion.div
        className="bg-slate-900/50 backdrop-blur-xl rounded-2xl border border-slate-700/50 overflow-hidden"
        initial={{ opacity: 0, y: 20 }}
        animate={controls}
      >
        {/* Feature Navigation */}
        <div className="border-b border-slate-700/50 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-6">
              {[
                { icon: Code, label: 'Editor', state: 'coding' },
                { icon: Bot, label: 'AI Assistant', state: 'ai-suggesting' },
                { icon: Users, label: 'Collaboration', state: 'collaborating' },
                { icon: Terminal, label: 'Console', state: 'debugging' }
              ].map((feature) => (
                <motion.div
                  key={feature.label}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-lg cursor-pointer
                    ${demoState === feature.state ? 'bg-blue-500/10 text-blue-400' : 'text-slate-400 hover:text-slate-200'}`}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <feature.icon className="w-4 h-4" />
                  <span className="text-sm font-medium">{feature.label}</span>
                </motion.div>
              ))}
            </div>
            
            {/* Active Users */}
            <div className="flex items-center space-x-2">
              {activeUsers.map((user) => (
                <motion.div
                  key={user.id}
                  className="flex items-center space-x-2 px-3 py-1.5 rounded-full bg-slate-800/50"
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                >
                  <div className="relative">
                    <div className="w-2 h-2 rounded-full bg-green-500 absolute -top-0.5 -right-0.5" />
                    <div className="w-6 h-6 rounded-full bg-gradient-to-br from-blue-500 to-purple-500">
                      <span className="text-xs font-bold text-white flex items-center justify-center h-full">
                        {user.name[0]}
                      </span>
                    </div>
                  </div>
                  <span className="text-sm text-slate-300">{user.name}</span>
                </motion.div>
              ))}
            </div>
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-3 gap-6 p-6 h-[600px]">
          {/* Code Editor */}
          <div className="col-span-2 relative">
            <motion.div
              ref={editorRef}
              className="h-full bg-slate-950 rounded-xl p-6 font-mono text-sm overflow-hidden"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
            >
              {/* Editor Chrome */}
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-4">
                  <div className="flex space-x-1">
                    <div className="w-3 h-3 rounded-full bg-red-500" />
                    <div className="w-3 h-3 rounded-full bg-yellow-500" />
                    <div className="w-3 h-3 rounded-full bg-green-500" />
                  </div>
                  <div className="flex items-center space-x-2 px-3 py-1 rounded-md bg-slate-900">
                    <Gift className="w-4 h-4 text-blue-400" />
                    <span className="text-xs text-slate-400">main</span>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  <motion.div
                    className="px-3 py-1 rounded-md bg-blue-400/10 text-blue-400 text-xs"
                    animate={{
                      opacity: demoState === 'coding' ? 1 : 0.5
                    }}
                  >
                    <Zap className="w-4 h-4 inline-block mr-1" />
                    Live Collaboration
                  </motion.div>
                </div>
              </div>

              {/* Code Area */}
              <pre className="relative text-slate-300">
                <code>{code}</code>

                {/* Typing Indicator */}
                {demoState === 'coding' && (
                  <motion.div
                    className="absolute bottom-4 right-4 flex items-center space-x-2 px-3 py-1.5 rounded-full bg-blue-500/10"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                  >
                    <div className="flex space-x-1">
                      <motion.div
                        className="w-1.5 h-1.5 rounded-full bg-blue-400"
                        animate={{ y: [0, -3, 0] }}
                        transition={{ duration: 0.6, repeat: Infinity }}
                      />
                      <motion.div
                        className="w-1.5 h-1.5 rounded-full bg-blue-400"
                        animate={{ y: [0, -3, 0] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                      />
                      <motion.div
                        className="w-1.5 h-1.5 rounded-full bg-blue-400"
                        animate={{ y: [0, -3, 0] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}
                      />
                    </div>
                    <span className="text-xs text-blue-400">typing...</span>
                  </motion.div>
                )}
              </pre>
            </motion.div>

            {/* AI Suggestions Overlay */}
            <AnimatePresence>
              {demoState === 'ai-suggesting' && (
                <motion.div
                  className="absolute -right-4 top-1/2 transform -translate-y-1/2"
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: 20 }}
                >
                  {aiSuggestions.map((suggestion) => (
                    <motion.div
                      key={suggestion.id}
                      className="bg-blue-500/10 backdrop-blur-xl border border-blue-500/20 rounded-xl p-4 mb-4 max-w-sm"
                      whileHover={{ scale: 1.02 }}
                    >
                      <div className="flex items-center space-x-2 mb-3">
                        <Bot className="w-5 h-5 text-blue-400" />
                        <span className="text-sm font-medium text-blue-400">AI Suggestion</span>
                      </div>
                      <p className="text-sm text-slate-300 mb-3">{suggestion.content}</p>
                      <div className="flex items-center space-x-2">
                        <motion.button
                          className="px-3 py-1.5 rounded-lg bg-blue-500/20 text-blue-400 text-sm flex items-center space-x-1"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          <Check className="w-4 h-4" />
                          <span>Apply</span>
                        </motion.button>
                      </div>
                    </motion.div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          {/* Chat & Collaboration Panel */}
          <div className="space-y-6">
            {/* Team Chat */}
            <motion.div
              className="h-1/2 bg-slate-950 rounded-xl p-4"
              animate={{
                borderColor: demoState === 'collaborating' ? 'rgba(59, 130, 246, 0.5)' : 'transparent'
              }}
            >
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-2">
                  <MessageSquare className="w-4 h-4 text-blue-400" />
                  <span className="font-medium text-slate-200">Team Chat</span>
                </div>
                <motion.div
                  className="px-2 py-1 rounded-md bg-slate-900 text-xs text-slate-400"
                  animate={{
                    opacity: messages.length > 0 ? 1 : 0.5
                  }}
                >
                  {messages.length} messages
                </motion.div>
              </div>

              <div className="space-y-4 h-[calc(100%-4rem)] overflow-y-auto">
                <AnimatePresence>
                  {messages.map((message) => (
                    <motion.div
                      key={message.id}
                      className="flex items-start space-x-3"
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                    >
                      <div className="w-6 h-6 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center">
                        <span className="text-xs font-bold text-white">{message.user[0]}</span>
                      </div>
                      <div>
                        <div className="flex items-center space-x-2 mb-1">
                          <span className="text-sm font-medium text-slate-300">{message.user}</span>
                          <span className="text-xs text-slate-500">just now</span>
                        </div>
                        <p className="text-sm text-slate-400">{message.content}</p>
                      </div>
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            </motion.div>

            {/* Activity Feed */}
            <motion.div
              className="h-1/2 bg-slate-950 rounded-xl p-4"
              animate={{
                borderColor: demoState === 'debugging' ? 'rgba(59, 130, 246, 0.5)' : 'transparent'
              }}
            >
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-2">
                  <Terminal className="w-4 h-4 text-blue-400" />
                  <span className="font-medium text-slate-200">Activity</span>
                </div>
              </div>

              <div className="space-y-2">
                {activeUsers.map((user) => (
                  <motion.div
                    key={user.id}
                    className="flex items-center justify-between p-2 rounded-lg bg-slate-900/50"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                  >
                    <div className="flex items-center space-x-3">
                      <div className="relative">
                        <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center">
                          <span className="text-sm font-bold text-white">{user.name[0]}</span>
                        </div>
                        <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-slate-950 
                          ${user.status === 'active' ? 'bg-green-500' : 'bg-yellow-500'}`} />
                      </div>
                      <div>
                        <div className="text-sm font-medium text-slate-200">{user.name}</div>
                        <div className="text-xs text-slate-400">{user.role}</div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      {user.status === 'active' && (
                        <motion.div
                          className="px-2 py-1 rounded-full bg-green-500/10 text-green-400 text-xs"
                          animate={{
                            scale: [1, 1.05, 1],
                            transition: { duration: 2, repeat: Infinity }
                          }}
                        >
                          Active
                        </motion.div>
                      )}
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          </div>
        </div>

        {/* Status Bar */}
        <div className="border-t border-slate-700/50 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-6">
              {/* Connection Status */}
              <motion.div
                className="flex items-center space-x-2"
                animate={{
                  color: demoState === 'connecting' ? '#60A5FA' : '#34D399'
                }}
              >
                <motion.div
                  className="w-2 h-2 rounded-full"
                  animate={{
                    backgroundColor: demoState === 'connecting' ? '#60A5FA' : '#34D399',
                    scale: [1, 1.2, 1],
                    transition: { duration: 2, repeat: Infinity }
                  }}
                />
                <span className="text-sm">
                  {demoState === 'connecting' ? 'Connecting...' : 'Connected'}
                </span>
              </motion.div>

              {/* Active Features */}
              <div className="flex items-center space-x-4">
                {[
                  { icon: Code, label: 'Editor' },
                  { icon: Bot, label: 'AI' },
                  { icon: Users, label: 'Team' }
                ].map((feature, index) => (
                  <motion.div
                    key={index}
                    className="flex items-center space-x-1 text-slate-400"
                    whileHover={{ color: '#60A5FA' }}
                  >
                    <feature.icon className="w-4 h-4" />
                    <span className="text-xs">{feature.label}</span>
                  </motion.div>
                ))}
              </div>
            </div>

            {/* Real-time Indicators */}
            <div className="flex items-center space-x-4">
              <motion.div
                className="flex items-center space-x-2 text-slate-400"
                animate={{
                  opacity: demoState === 'coding' ? 1 : 0.5
                }}
              >
                <Zap className="w-4 h-4" />
                <span className="text-xs">Real-time sync enabled</span>
              </motion.div>

              <motion.div
                className="flex items-center space-x-2 text-slate-400"
                animate={{
                  opacity: demoState === 'ai-suggesting' ? 1 : 0.5
                }}
              >
                <Sparkles className="w-4 h-4" />
                <span className="text-xs">AI Assistant active</span>
              </motion.div>
            </div>
          </div>
        </div>
      </motion.div>

      {/* Feature Highlights */}
      <AnimatePresence>
        {demoState !== 'initial' && (
          <motion.div
            className="absolute -bottom-22 left-1.5 transform -translate-x-1/2"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
          >
            <div className="flex items-center space-x-8">
              {[
                { state: 'coding', icon: Code, label: 'Real-time Editing' },
                { state: 'ai-suggesting', icon: Bot, label: 'AI Assistance' },
                { state: 'collaborating', icon: Users, label: 'Team Collaboration' },
                { state: 'debugging', icon: Terminal, label: 'Live Debugging' }
              ].map((feature, index) => (
                <motion.div
                  key={index}
                  className={`flex items-center space-x-2 px-4 py-2 rounded-full
                    ${demoState === feature.state ? 'bg-blue-500/20 text-blue-400' : 'text-slate-400'}`}
                  animate={{
                    scale: demoState === feature.state ? 1.1 : 1,
                    opacity: demoState === feature.state ? 1 : 0.7
                  }}
                >
                  <feature.icon className="w-4 h-4" />
                  <span className="text-sm">{feature.label}</span>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default EnhancedInteractiveDemo;

================
File: src/components/Code/ConsoleOutput.tsx
================
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronDown, ChevronRight, X, Copy, Trash } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

interface ConsoleOutputProps {
  isOpen: boolean;
  onClose: () => void;
  consoleOutput: Array<{ type: string; content: string }>;
  onClear: () => void;
  isSidebarOpen: boolean;
  height: number;
  onHeightChange: (height: number) => void;
}

const ConsoleOutput = ({ 
  isOpen, 
  onClose, 
  consoleOutput, 
  onClear,
  isSidebarOpen,
  height,
  onHeightChange
}: ConsoleOutputProps) => {
  const [isDragging, setIsDragging] = useState(false);
  const dragStartY = useRef(0);
  const dragStartHeight = useRef(height);
  const containerRef = useRef(null);

  useEffect(() => {
    const handleMouseMove = (e:any) => {
      if (!isDragging) return;
      
      const deltaY = dragStartY.current - e.clientY;
      const maxHeight = window.innerHeight * 0.8; // Maximum 80% of viewport height
      const newHeight = Math.min(Math.max(150, dragStartHeight.current + deltaY), maxHeight);
      onHeightChange(newHeight);
    };

    const handleMouseUp = () => {
      setIsDragging(false);
    };

    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isDragging, onHeightChange]);

  const handleDragStart = (e:any) => {
    dragStartY.current = e.clientY;
    dragStartHeight.current = height;
    setIsDragging(true);
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          ref={containerRef}
          initial={{ height: 0, opacity: 0 }}
          animate={{ height, opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
          transition={{ type: "spring", bounce: 0.2, duration: 0.5 }}
          className={`fixed bottom-0 ${isSidebarOpen ? 'left-80' : 'left-0'} right-0 bg-gray-800 border-t border-gray-700`}
          style={{ zIndex: 0 }}
        >
          {/* Drag Handle */}
          <div
            className="absolute -top-3 left-0 right-0 h-3 cursor-ns-resize flex items-center justify-center"
            onMouseDown={handleDragStart}
          >
            <div className="w-20 h-1 bg-gray-600 rounded-full hover:bg-gray-500 transition-colors" />
          </div>

          <div className="h-full flex flex-col">
            {/* Console Header */}
            <div className="flex items-center justify-between px-4 py-2 border-b border-gray-700">
              <div className="flex items-center space-x-2">
                <Button 
                  variant="ghost" 
                  size="sm"
                  onClick={onClose}
                >
                  <ChevronDown className="h-4 w-4" />
                </Button>
                <span className="text-base font-medium text-white">Console Output</span>
              </div>
              <div className="flex items-center space-x-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onClear}
                  className="text-gray-400 hover:text-black"
                >
                  <Trash className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onClose}
                  className="text-gray-400 hover:text-black"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Console Content */}
            <ScrollArea className="flex-1 p-4 font-mono">
              <motion.div layout className="space-y-2">
                {consoleOutput.map((log, index) => (
                  <ConsoleEntry key={index} log={log} />
                ))}
                {consoleOutput.length === 0 && (
                  <div className="text-gray-400 text-sm italic">No console output (run code)</div>
                )}
              </motion.div>
            </ScrollArea>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

interface ConsoleLog {
  type: string;
  content: string;
}

const ConsoleEntry = ({ log }: { log: ConsoleLog }) => {
  const [isCopied, setIsCopied] = useState(false);

  const copyContent = async () => {
    await navigator.clipboard.writeText(log.content);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  };

  const contentLines = log.content.split('\n');

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className={cn(
        "group rounded px-2 py-1 flex items-start space-x-2",
        log.type === 'error' ? 'bg-red-500/10 text-red-400' :
        log.type === 'warn' ? 'bg-yellow-500/10 text-yellow-400' :
        'bg-gray-700/50 text-gray-200'
      )}
    >
      <div className="mt-1">
        {log.type === 'error' ? '⚠️' : log.type === 'warn' ? '⚡' : '→'}
      </div>
      <div className="flex-1 break-all whitespace-pre-wrap">
        {contentLines.map((line, i) => (
          <React.Fragment key={i}>
            {line}
            {i < contentLines.length - 1 && <br />}
          </React.Fragment>
        ))}
      </div>
      <Button
        variant="ghost"
        size="sm"
        className="opacity-0 group-hover:opacity-100 transition-opacity"
        onClick={copyContent}
      >
        {isCopied ? (
          <motion.span
            initial={{ scale: 0.5 }}
            animate={{ scale: 1 }}
            className="text-green-400"
          >
            ✓
          </motion.span>
        ) : (
          <Copy className="h-4 w-4" />
        )}
      </Button>
    </motion.div>
  );
};

export default ConsoleOutput;

================
File: src/components/Code/Editor.tsx
================
// src/lib/editor-types.ts
import { Socket } from "socket.io-client";

export interface EditorProps {
  socketRef: React.MutableRefObject<Socket | null>;
  roomId: string;
  onCodeChange: (code: string) => void;
}

export interface EditorConfig {
  mode: {
    name: string;
    json?: boolean;
  };
  theme: string;
  autoCloseTags: boolean;
  autoCloseBrackets: boolean;
  lineNumbers: boolean;
  lineWrapping?: boolean;
  scrollPastEnd?: boolean;
  autofocus?: boolean;
  tabSize?: number;
  indentUnit?: number;
  smartIndent?: boolean;
}

export interface CodeOutput {
  type: 'success' | 'error';
  content: string;
}

// Editor themes
export const EDITOR_THEMES = {
  DRACULA: 'dracula',
  MONOKAI: 'monokai',
  GITHUB_DARK: 'github-dark',
  NORD: 'nord',
} as const;

// Language modes
export const LANGUAGE_MODES = {
  JAVASCRIPT: 'javascript',
  TYPESCRIPT: 'typescript',
  PYTHON: 'python',
  HTML: 'html',
  CSS: 'css',
} as const;

// Default editor configuration
export const DEFAULT_EDITOR_CONFIG: EditorConfig = {
  mode: { name: LANGUAGE_MODES.JAVASCRIPT, json: true },
  theme: EDITOR_THEMES.DRACULA,
  autoCloseTags: true,
  autoCloseBrackets: true,
  lineNumbers: true,
  scrollPastEnd: true,
  autofocus: true,
  tabSize: 2,
  indentUnit: 2,
  smartIndent: true,
  lineWrapping: true,
};

// Default code template
export const DEFAULT_CODE = `// Start coding here
console.log("Hello, CodeConnect!");

// Example function
function greet(name) {
  return \`Welcome to CodeConnect, \${name}!\`;
}`;

// Utility to execute code safely
export const executeCode = (code: string): Promise<CodeOutput> => {
  return new Promise((resolve) => {
    try {
      // Create a new function from the code and execute it
      const fn = new Function('console', `
        let output = [];
        const customConsole = {
          log: (...args) => output.push(args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
          ).join(' ')),
          error: (...args) => output.push(\`Error: \${args.join(' ')}\`),
          warn: (...args) => output.push(\`Warning: \${args.join(' ')}\`)
        };
        try {
          ${code}
        } catch (error) {
          customConsole.error(error.message);
        }
        return output.join('\\n');
      `);

      const result = fn(console);
      resolve({ type: 'success', content: result });
    } catch (error) {
      resolve({ 
        type: 'error', 
        content: error instanceof Error ? error.message : 'An error occurred'
      });
    }
  });
};

================
File: src/components/Code/MessageBubble.tsx
================
import React from "react"
import { motion } from "framer-motion"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import Image from "next/image"
import { createAvatar } from '@dicebear/core';
import { lorelei, bottts, pixelArt, adventurer } from '@dicebear/collection';
import type { Style } from '@dicebear/core';

interface Message {
  id: string
  content: string
  sender: string
  timestamp: number
  attachments?: { type: "image" | "video" | "audio"; url: string }[]
}

interface MessageBubbleProps {
  message: Message
  isOwnMessage: boolean
}

// Define specific types for our avatar configurations
type AvatarStyle = Style<{
  backgroundColor?: string[];
  seed: string;
}>;

interface AvatarStyleConfig {
  style: AvatarStyle;
  config: {
    backgroundColor: string[];
  };
}

const getAvatarUrl = (seed: string) => {
  const styles: AvatarStyleConfig[] = [
    {
      style: lorelei as unknown as AvatarStyle,
      config: {
        backgroundColor: ["b6e3f4", "c0aede", "d1d4f9", "ffd5dc", "ffdfbf"],
      }
    },
    {
      style: bottts as unknown as AvatarStyle,
      config: {
        backgroundColor: ["b6e3f4", "c0aede", "d1d4f9"],
      }
    },
    {
      style: pixelArt as unknown as AvatarStyle,
      config: {
        backgroundColor: ["b6e3f4", "c0aede", "d1d4f9"],
      }
    },
    {
      style: adventurer as unknown as AvatarStyle,
      config: {
        backgroundColor: ["b6e3f4", "c0aede", "d1d4f9"],
      }
    }
  ];

  // Get consistent style for user
  const styleIndex = seed
    .split('')
    .reduce((acc, char) => acc + char.charCodeAt(0), 0) % styles.length;
  const { style, config } = styles[styleIndex];

  // Create avatar with specific configuration
  const avatar = createAvatar(style, {
    seed,
    backgroundColor: config.backgroundColor,
  });

  return avatar.toDataUri();
};

export const MessageBubble: React.FC<MessageBubbleProps> = ({ message, isOwnMessage }) => {
  const bubbleVariants = {
    initial: { opacity: 0, scale: 0.8, y: 20 },
    animate: { opacity: 1, scale: 1, y: 0 },
    exit: { opacity: 0, scale: 0.8, y: -20 },
  } as const;

  const attachmentVariants = {
    initial: { opacity: 0, scale: 0.9 },
    animate: { opacity: 1, scale: 1 },
  } as const;

  const avatarVariants = {
    initial: { scale: 0.8, rotate: -10 },
    animate: { scale: 1, rotate: 0 },
    hover: { scale: 1.1, rotate: 10 },
  } as const;

  return (
    <motion.div
      layout
      initial="initial"
      animate="animate"
      exit="exit"
      variants={bubbleVariants}
      transition={{ type: "spring", stiffness: 500, damping: 30 }}
      className={`flex ${isOwnMessage ? "justify-end" : "justify-start"} mb-4`}
    >
      <div className={`flex ${isOwnMessage ? "flex-row-reverse" : "flex-row"} items-end group`}>
        <motion.div
          variants={avatarVariants}
          initial="initial"
          animate="animate"
          whileHover="hover"
          className="relative"
        >
          <Avatar className="w-8 h-8 ring-2 ring-offset-2 ring-offset-background transition-all duration-300
            ring-blue-500/50 group-hover:ring-blue-500">
            <AvatarImage src={getAvatarUrl(message.sender)} />
            <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-500">
              {message.sender[0].toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <motion.div
            className="absolute inset-0 bg-blue-500/20 rounded-full blur-md"
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.3 }}
          />
        </motion.div>

        <motion.div
          className={`max-w-[70%] break-words rounded-2xl px-4 py-2 ${
            isOwnMessage 
              ? "bg-gradient-to-br from-blue-600 to-blue-700 text-white ml-2" 
              : "bg-gradient-to-br from-gray-700 to-gray-800 text-gray-100 mr-2"
          } shadow-lg`}
          whileHover={{ scale: 1.02 }}
          transition={{ type: "spring", stiffness: 400, damping: 10 }}
        >
          <p className="text-sm">{message.content}</p>
          {message.attachments && message.attachments.length > 0 && (
            <motion.div
              className="mt-2"
              initial="initial"
              animate="animate"
              variants={attachmentVariants}
              transition={{ delay: 0.2 }}
            >
              {message.attachments.map((attachment, index) => (
                <React.Fragment key={index}>
                  {attachment.type === "image" && (
                    <div className="relative rounded-lg overflow-hidden shadow-lg">
                      <Image
                        src={attachment.url || "/placeholder.svg"}
                        alt="Image attachment"
                        width={200}
                        height={150}
                        className="rounded-lg object-cover transition-transform duration-300 hover:scale-105"
                      />
                    </div>
                  )}
                  {attachment.type === "video" && (
                    <video 
                      src={attachment.url} 
                      controls 
                      className="rounded-lg w-full max-w-[200px] shadow-lg" 
                    />
                  )}
                  {attachment.type === "audio" && (
                    <audio 
                      src={attachment.url} 
                      controls 
                      className="w-full rounded-lg shadow-lg" 
                    />
                  )}
                </React.Fragment>
              ))}
            </motion.div>
          )}
          <div className="text-xs text-gray-400 mt-1">
            {new Date(message.timestamp).toLocaleTimeString()}
          </div>
        </motion.div>
      </div>
    </motion.div>
  )
}

================
File: src/components/Code/monaco-editor.tsx
================
import { useRef, useEffect } from 'react';
import Editor, { loader } from '@monaco-editor/react';
import { useSocket } from '@/providers/socketProvider';
import { ACTIONS } from '@/lib/actions';
import type { editor } from 'monaco-editor';

interface MonacoEditorProps {
  roomId: string;
  language?: string;
  theme?: string;
  fontSize?: number;
  value?: string;
  onChange?: (value: string) => void;
}

// One Dark Pro theme definition with proper types
const oneDarkPro: editor.IStandaloneThemeData = {
  base: 'vs-dark',
  inherit: true,
  rules: [
    { token: '', foreground: 'abb2bf' },
    { token: 'variable', foreground: 'e06c75' },
    { token: 'variable.predefined', foreground: 'e06c75' },
    { token: 'variable.parameter', foreground: 'abb2bf' },
    { token: 'keyword', foreground: 'c678dd' },
    { token: 'keyword.control', foreground: 'c678dd' },
    { token: 'keyword.operator', foreground: 'c678dd' },
    { token: 'storage', foreground: 'c678dd' },
    { token: 'storage.type', foreground: 'c678dd' },
    { token: 'constant', foreground: 'd19a66' },
    { token: 'constant.numeric', foreground: 'd19a66' },
    { token: 'constant.character', foreground: 'd19a66' },
    { token: 'constant.language', foreground: 'd19a66' },
    { token: 'support', foreground: '61afef' },
    { token: 'support.function', foreground: '61afef' },
    { token: 'support.constant', foreground: 'd19a66' },
    { token: 'support.type', foreground: '56b6c2' },
    { token: 'support.class', foreground: 'e5c07b' },
    { token: 'string', foreground: '98c379' },
    { token: 'comment', foreground: '5c6370', fontStyle: 'italic' },
    { token: 'function', foreground: '61afef' },
    { token: 'function.declaration', foreground: '61afef' },
    { token: 'entity.name.type', foreground: 'e5c07b' },
    { token: 'entity.name.class', foreground: 'e5c07b' },
    { token: 'entity.name.function', foreground: '61afef' },
    { token: 'punctuation.definition.string', foreground: '98c379' },
    { token: 'punctuation.definition.variable', foreground: 'e06c75' },
    { token: 'punctuation.definition.string.begin', foreground: '98c379' },
    { token: 'punctuation.definition.string.end', foreground: '98c379' },
    { token: 'punctuation.definition.parameters', foreground: 'abb2bf' },
    { token: 'punctuation.definition.heading', foreground: '61afef' },
    { token: 'punctuation.definition.identity', foreground: '61afef' },
    { token: 'meta.brace', foreground: 'abb2bf' },
    { token: 'meta.delimiter.period', foreground: 'abb2bf' },
    { token: 'meta.selector', foreground: '98c379' },
    { token: 'invalid', foreground: 'ffffff', background: 'e05252' }
  ],
  colors: {
    'editor.background': '#282c34',
    'editor.foreground': '#abb2bf',
    'editor.lineHighlightBackground': '#2c313c',
    'editor.selectionBackground': '#3e4451',
    'editor.findMatchBackground': '#42557b',
    'editor.findMatchHighlightBackground': '#314365',
    'editorCursor.foreground': '#528bff',
    'editorWhitespace.foreground': '#3b4048',
    'editorIndentGuide.background': '#3b4048',
    'editorIndentGuide.activeBackground': '#c8c8c859',
    'editor.selectionHighlightBorder': '#222218',
    'editorLineNumber.foreground': '#495162',
    'editorLineNumber.activeForeground': '#abb2bf',
    'editorBracketMatch.background': '#515a6b',
    'editorBracketMatch.border': '#515a6b',
    'tab.activeBackground': '#282c34',
    'tab.inactiveBackground': '#21252b',
    'tab.border': '#181a1f',
    'tab.activeBorder': '#528bff'
  }
};

const MonacoEditor = ({ 
  roomId, 
  language = 'javascript',
  fontSize = 14,
  value,
  onChange 
}: MonacoEditorProps) => {
  const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null);
  const { socket } = useSocket();
  const searchParams = new URLSearchParams(window.location.search);
  const currentUsername = searchParams.get('username');

  // Define Monaco theme before editor mounts
  useEffect(() => {
    const defineTheme = async () => {
      const monaco = await loader.init();
      monaco.editor.defineTheme('onedarkpro', oneDarkPro);
    };
    defineTheme();
  }, []);

  const handleEditorChange = (value: string | undefined) => {
    if (!value || !currentUsername) return;
    
    // Emit code change
    socket?.emit(ACTIONS.CODE_CHANGE, {
      roomId,
      code: value,
    });

    // Emit typing event with username
    socket?.emit(ACTIONS.TYPING, {
      roomId,
      username: currentUsername
    });
    
    onChange?.(value);
  };

  const handleEditorDidMount = (editor: editor.IStandaloneCodeEditor, monaco: typeof import('monaco-editor')) => {
    editorRef.current = editor;
    monaco.editor.setTheme('onedarkpro');
  };

  const options: editor.IStandaloneEditorConstructionOptions = {
    fontSize,
    minimap: { enabled: true },
    scrollBeyondLastLine: false,
    wordWrap: 'on',
    autoClosingBrackets: 'always',
    autoClosingQuotes: 'always',
    formatOnPaste: true,
    formatOnType: true,
    fontFamily: 'JetBrains Mono, monospace',
    fontLigatures: true,
    cursorBlinking: 'smooth',
    smoothScrolling: true,
    cursorSmoothCaretAnimation: 'on',
    renderLineHighlight: 'all',
    contextmenu: true,
    mouseWheelZoom: true,
    lineNumbers: 'on',
    // renderIndentGuides: true,
    automaticLayout: true,
    padding: { top: 16, bottom: 16 }
  };

  return (
    <Editor
      height="100%"
      defaultLanguage={language}
      language={language}
      theme="onedarkpro"
      value={value}
      options={options}
      onChange={handleEditorChange}
      onMount={handleEditorDidMount}
      className="w-full h-full min-h-[300px] border border-gray-700 rounded-lg overflow-hidden"
    />
  );
};

export default MonacoEditor;

================
File: src/components/Code/TypingIndicator.tsx
================
// src/components/TypingIndicator.tsx
'use client';

import { motion } from 'framer-motion';

interface TypingIndicatorProps {
  activeUser: string | null;
}

export const TypingIndicator = ({ activeUser }: TypingIndicatorProps) => {
  if (!activeUser) return null;

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="flex items-center space-x-2 py-2 px-4 rounded-lg bg-slate-800/50"
    >
      <span className="text-sm text-white/90">{activeUser} is typing</span>
      <div className="flex space-x-1">
        {[...Array(3)].map((_, i) => (
          <motion.div
            key={i}
            className="w-1.5 h-1.5 bg-blue-400 rounded-full"
            animate={{
              y: ["0%", "-50%", "0%"],
            }}
            transition={{
              duration: 0.6,
              repeat: Infinity,
              delay: i * 0.2,
            }}
          />
        ))}
      </div>
    </motion.div>
  );
};

export default TypingIndicator;

================
File: src/components/Dashboard/animations/NeonGlow.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

export const NeonGlow = () => {
    return (
      <motion.div
        className="fixed inset-0 pointer-events-none z-0"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 2 }}
      >
        <div className="absolute top-0 left-0 w-1/2 h-1/2 bg-blue-500 rounded-full filter blur-[150px] opacity-20" />
        <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-purple-500 rounded-full filter blur-[150px] opacity-20" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1/2 h-1/2 bg-cyan-500 rounded-full filter blur-[150px] opacity-20" />
      </motion.div>
    )
  }

================
File: src/components/Dashboard/animations/ParallaxScroll.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";


interface ParallaxScrollProps {
    children: ReactNode;
    speed?: number;           
    direction?: "up" | "down"; 
    easing?: "linear" | "easeIn" | "easeOut" | "easeInOut" | number[];  // Modified to accept array
    springConfig?: {          
        stiffness?: number;
        damping?: number;
        mass?: number;
    };
    threshold?: number[];      
}

export function ParallaxScroll({
  children,
  speed = 0.5, // make it small for slower effect
  direction = "up",
}: ParallaxScrollProps) {
  const elementRef = useRef<HTMLDivElement>(null)
  const [elementTop, setElementTop] = useState(0)
  const [clientHeight, setClientHeight] = useState(0)

  // Intersection observer to see if in viewport
  const { ref: inViewRef, inView } = useInView({ threshold: 0.2 })

  // Merge refs so we can both track size and observe intersection
  const mergedRef = (node: HTMLDivElement) => {
    elementRef.current = node
    inViewRef(node)
  }

  // Track window scroll
  const { scrollY } = useScroll()

  // On mount or resize, recalc positions
  useEffect(() => {
    const element = elementRef.current
    if (!element) return

    const onResize = () => {
      setElementTop(element.offsetTop)
      setClientHeight(window.innerHeight)
    }
    onResize()
    window.addEventListener("resize", onResize)
    return () => window.removeEventListener("resize", onResize)
  }, [])

  // Calculate how far the parallax should move
  const scrollRange = [
    Math.max(elementTop - clientHeight, 0),
    elementTop + (elementRef.current?.offsetHeight ?? 0)
  ]
  const totalDistance = (scrollRange[1] - scrollRange[0]) * speed
  
  const transformRange = 
    direction === "up" ? [0, -totalDistance] : [0, totalDistance]

  // 1) Option A: Direct transform with ease
  // const y = useTransform(scrollY, scrollRange, transformRange, {
  //   ease: "easeOut",
  // })

  // 2) Option B: Spring-based, but slower config + no velocity
  const rawY = useTransform(scrollY, scrollRange, transformRange)
  const y = useSpring(rawY, {
    stiffness: 60,
    damping: 30,
    mass: 1,
    // velocity: 0 // or skip it
  })

  return (
    <motion.div
      ref={mergedRef}
      style={{
        y: inView ? y : 0,
        willChange: "transform",
        transform: "translateZ(0)", // GPU hint
      }}
      className="will-change-transform"
    >
      {children}
    </motion.div>
  )
}

================
File: src/components/Dashboard/animations/ParticleField.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

export const ParticleField = ({ 
    particleCount = 1000,  // Increased from 450 to 800
    minDuration = 2,
    maxDuration = 5,
    maxDelay = 2,
    particleSize = "3px",
    particleColor = "rgb(6 182 212 / 0.3)", // tailwind cyan-500/30
  }) => {
    return (
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(particleCount)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute rounded-full"
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              width: particleSize,
              height: particleSize,
              backgroundColor: particleColor,
            }}
            animate={{
              scale: [0, 1, 0],
              opacity: [0, 1, 0],
              z: [0, 50, 0],
            }}
            transition={{
              duration: Math.random() * (maxDuration - minDuration) + minDuration,
              repeat: Number.POSITIVE_INFINITY,
              repeatType: "loop",
              ease: "easeInOut",
              delay: Math.random() * maxDelay,
            }}
          />
        ))}
      </div>
    )
  }

================
File: src/components/Dashboard/animations/RevealAnimation.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

interface RevealAnimationProps {
  children: React.ReactNode
  offsetY?: number
  duration?: number
  delay?: number
  threshold?: number | number[]
  rootMargin?: string
  /** If false, animations re-trigger whenever it re-enters view */
  triggerOnce?: boolean
}

export const RevealAnimation: React.FC<RevealAnimationProps> = ({
  children,
  offsetY = 50,
  duration = 0.8,
  delay = 0,
  threshold = 0.2,
  rootMargin = "-100px",
  triggerOnce = true,
}) => {
  // Check user’s “prefers-reduced-motion” setting
  const prefersReducedMotion = useReducedMotion()

  const { ref, inView } = useInView({
    triggerOnce,
    threshold,
    rootMargin,
  })

  // Variants for motion
  const variants = {
    hidden: {
      opacity: 0,
      y: prefersReducedMotion ? 0 : offsetY,
    },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: prefersReducedMotion ? 0.01 : duration,
        ease: "easeOut",
        delay,
      },
    },
  }

  return (
    <motion.div
      ref={ref}
      // Initial and animate states driven by intersection observer
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
      variants={variants}
      style={{ willChange: "opacity, transform" }} // Hint for performance
    >
      {children}
    </motion.div>
  )
}

================
File: src/components/Dashboard/animations/WaveLoader.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";


export default function WaveLoader() {
    return (
      <svg viewBox="0 0 100 100" className="w-full h-full">
        {[0, 1, 2, 3].map((index) => (
          <motion.circle
            key={index}
            cx="50"
            cy="50"
            r="48"
            fill="none"
            stroke={`rgba(96, 165, 250, ${0.1 + index * 0.2})`}
            strokeWidth="4"
            initial={{ scale: 0, opacity: 0 }}
            animate={{
              scale: [0, 1, 1],
              opacity: [1, 0.5, 0],
            }}
            transition={{
              duration: 2,
              repeat: Number.POSITIVE_INFINITY,
              delay: index * 0.4,
              ease: "easeInOut",
            }}
          />
        ))}
      </svg>
    )
  }

================
File: src/components/Dashboard/buttons/FuturisticInput.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";


interface FuturisticInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
    label: string;
    icon: React.FC<React.SVGProps<SVGSVGElement>>;
  }
  
  export const FuturisticInput: React.FC<FuturisticInputProps> = ({ label, icon: Icon, ...props }) => {
    const [isFocused, setIsFocused] = useState(false);
  
    return (
      <div className="space-y-2 relative w-full">
        <label className="text-sm font-medium text-cyan-300" htmlFor={props.id}>
          {label}
        </label>
  
        <div className="relative group">
          {/* Text Input */}
          <input
            {...props}
            onFocus={() => setIsFocused(true)}
            onBlur={() => setIsFocused(false)}
            className={`
              w-full bg-slate-800/50 
              border-2 border-cyan-500/20 
              text-white placeholder:text-slate-500 
              rounded-lg px-4 py-2 pl-10 
              outline-none transition-all duration-300 
              hover:border-cyan-600
              focus:border-cyan-500 focus:ring-4 focus:ring-cyan-500/30
            `}
          />
  
          {/* Input Icon */}
          <Icon className="absolute left-3 top-1/2 -translate-y-1/2 text-cyan-400 w-5 h-5 pointer-events-none" />
  
          {/* AnimatePresence for Focus Glow */}
          <AnimatePresence>
            {isFocused && (
              <motion.div
                key="focusGlow"
                className="absolute inset-0 rounded-lg pointer-events-none"
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.2 }}
              >
                {/* Pulsing border glow */}
                <motion.div
                  className="absolute inset-0 rounded-lg"
                  initial={{ boxShadow: '0 0 0 0 rgba(6,182,212,0.6)' }}
                  animate={{
                    boxShadow: [
                      '0 0 0 0 rgba(6,182,212,0.6)',
                      '0 0 15px 2px rgba(6,182,212,0.8)',
                      '0 0 0 0 rgba(6,182,212,0.6)',
                    ],
                  }}
                  transition={{ duration: 1.5, repeat: Infinity, repeatType: 'loop' }}
                />
              </motion.div>
            )}
          </AnimatePresence>
  
          {/* Neon-like glow on hover (behind input) */}
          <motion.div
            className="absolute inset-0 rounded-lg pointer-events-none z-[-1]"
            initial={{ opacity: 0 }}
            whileHover={{ opacity: 1, boxShadow: '0 0 25px 5px rgba(6,182,212,0.4)' }}
            transition={{ duration: 0.5, ease: 'easeInOut' }}
          />
        </div>
      </div>
    );
  };

================
File: src/components/Dashboard/buttons/GlowingButton.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

export const GlowingButton: React.FC<{
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
  disabled?: boolean;
} & Omit<HTMLMotionProps<"button">, "children" | "className" | "onClick" | "disabled">> = ({ children, className, onClick, disabled, ...props }) => {
  const buttonRef = useRef(null)
  const [isHovered, setIsHovered] = useState(false)

  return (
    <motion.button
      ref={buttonRef}
      className={cn(
        "relative overflow-hidden px-6 py-3 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500  text-white font-medium",
        "shadow-lg shadow-cyan-500/20 hover:shadow-cyan-500/40 transition-all duration-300",
        disabled ? "opacity-50 cursor-not-allowed" : "",
        className,
      )}
      onClick={onClick}
      disabled={disabled}
      whileHover={!disabled ? { scale: 1.05 } : {}}
      whileTap={!disabled ? { scale: 0.95 } : {}}
      onHoverStart={() => !disabled && setIsHovered(true)}
      onHoverEnd={() => !disabled && setIsHovered(false)}
      {...props}
    >
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-blue-400"
        initial={{ x: "-100%" }}
        animate={{ x: isHovered ? "0%" : "-100%" }}
        transition={{ duration: 0.3 }}
      />
      <span className="relative z-10">{children}</span>
    </motion.button>
  )
}

================
File: src/components/Dashboard/buttons/MoveToTop.tsx
================
"use client"

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { ArrowUp } from 'lucide-react'

export default function MoveToTopButton() {
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    const toggleVisibility = () => {
      if (window.pageYOffset > 300) {
        setIsVisible(true)
      } else {
        setIsVisible(false)
      }
    }

    window.addEventListener('scroll', toggleVisibility)

    return () => window.removeEventListener('scroll', toggleVisibility)
  }, [])

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    })
  }

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.button
          className="fixed bottom-8 right-8 p-3 bg-slate-700/30 hover:bg-slate-700/50 text-white rounded-full backdrop-blur-md shadow-lg z-50"
          onClick={scrollToTop}
          initial={{ opacity: 0, scale: 0.5 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.5 }}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
        >
          <ArrowUp className="w-6 h-6" />
        </motion.button>
      )}
    </AnimatePresence>
  )
}

================
File: src/components/Dashboard/cards/FeatureCard.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

interface FeatureCardProps {
  icon: LucideIcon;
  title: string;
  description: string;
}

export const FeatureCard = ({ icon: Icon, title, description }: FeatureCardProps) => {
  const controls = useAnimation()
  const [isHovered, setIsHovered] = useState(false)

  useEffect(() => {
    if (isHovered) {
      controls.start({
        rotate: [0, 10, -10, 0],
        transition: { duration: 0.5 },
      })
    }
  }, [isHovered, controls])

  return (
    <motion.div
      className="bg-slate-800/50 rounded-xl p-6 flex flex-col items-center text-center cursor-pointer"
      whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(6, 182, 212, 0.2)" }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      <motion.div className="bg-cyan-500/20 p-3 rounded-full mb-4" animate={controls}>
        <Icon className="w-8 h-8 text-cyan-400" />
      </motion.div>
      <h3 className="text-xl font-bold mb-2">{title}</h3>
      <p className="text-slate-400">{description}</p>
    </motion.div>
  )
}

================
File: src/components/Dashboard/cards/HoverCard.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

interface HoverCardProps {
icon?: LucideIcon
title: string
  description: string
}

export const HoverCard = ({ icon: Icon, title, description }: HoverCardProps) => {
  return (
    <motion.div
      className="bg-slate-800/50 backdrop-blur-xl rounded-xl p-6 shadow-lg"
      whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(6, 182, 212, 0.3)" }}
      transition={{ duration: 0.3 }}
    >
      <div className="flex items-center mb-4">
        {Icon && <Icon className="w-8 h-8 text-cyan-400 mr-3" />}
        <h3 className="text-xl font-semibold">{title}</h3>
      </div>
      <p className="text-slate-300">{description}</p>
    </motion.div>
  )
}

================
File: src/components/Dashboard/cards/MoreUseCases.tsx
================
"use client"

import { useRef, useEffect } from 'react'
import { motion, useAnimation, useInView, useScroll, useTransform } from "framer-motion"
import { NeonGlow } from '../animations/NeonGlow'
import { HoverCard } from './HoverCard'

const useCases = [
    {
        title: "Remote Pair Programming",
        description: "Work with your teammates on live coding projects in real-time.",
    },
    {
        title: "Live Coding Interviews",
        description:
            "Assess candidates with actual coding tasks, track their thought process, and communicate via chat.",
    },
    {
        title: "Coding Bootcamps & Education",
        description:
            "Engage students by coding together, explaining concepts visually, and sharing snippets instantly.",
    },
    {
        title: "Hackathons & Team Challenges",
        description: "Organize competitive coding sessions where teams can collaborate dynamically.",
    },
    {
        title: "Freelancers & Consultants",
        description:
            "Work with clients on live projects, debug issues, and showcase solutions interactively.",
    },
]

export default function MoreUseCases() {
    const controls = useAnimation()
    const ref = useRef(null)
    const inView = useInView(ref, { once: true })
    const { scrollYProgress } = useScroll()
    const y = useTransform(scrollYProgress, [0, 1], ["0%", "5%"])

    useEffect(() => {
        if (inView) {
            controls.start("visible")
        }
    }, [controls, inView])

    const staggerVariants = {
        hidden: { opacity: 0, y: 50 },
        visible: (i: number) => ({
            opacity: 1,
            y: 0,
            transition: {
                delay: i * 0.1,
                duration: 0.5,
                ease: "easeOut",
            },
        }),
    }

    return (
        <motion.section 
            id="use-cases" 
            className="mt-32 relative overflow-hidden"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 1 }}
            ref={ref}
        >
            <motion.div 
                className="absolute inset-0 bg-[url('/subtle-pattern.png')] opacity-10"
                style={{ y }}
            />
            <motion.h2 
                className="text-4xl font-bold text-center mb-16"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
            >
                <motion.span
                    initial={{ display: "inline-block" }}
                    animate={{ rotateX: [0, 90, 0] }}
                    transition={{ duration: 1.5, delay: 1, ease: "easeInOut" }}
                >
                    More Use Cases
                </motion.span>
            </motion.h2>
            <div className="max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-8">
                {useCases.map((useCase, index) => (
                    <motion.div
                        key={useCase.title}
                        className="bg-slate-800/50 backdrop-blur-xl rounded-xl p-6"
                        variants={staggerVariants}
                        initial="hidden"
                        animate={controls}
                        custom={index}
                        whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
                        whileTap={{ scale: 0.98 }}
                    >
                        <h3 className="text-2xl font-semibold mb-2">{useCase.title}</h3>
                        <p className="text-slate-300">{useCase.description}</p>
                    </motion.div>
                ))}
            </div>
            <motion.button
                className="fixed bottom-8 right-8 bg-slate-800/50 backdrop-blur-xl rounded-full p-3 text-white"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 2 }}
                whileHover={{ scale: 1.1 }}
                onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
            >
            </motion.button>
        </motion.section>
    )
}

================
File: src/components/Dashboard/cards/RoadmapItem.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";


interface RoadmapItemProps {
    icon: LucideIcon;
    title: string;
    description: string;
  }
  
  export const RoadmapItem: React.FC<RoadmapItemProps> = ({ icon: Icon, title, description }) => (
    <motion.div
      className="flex items-start space-x-4"
      initial={{ opacity: 0, x: -20 }}
      whileInView={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="bg-cyan-500/20 p-2 rounded-full"></div>
    </motion.div>
  )

================
File: src/components/Dashboard/cards/StatsCard.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon, LucideIcon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";

export const StatsCard = ({ icon: Icon, title, value }: { icon: LucideIcon; title: string; value: string | number }) => {
    const controls = useAnimation()
    const [isHovered, setIsHovered] = useState(false)
  
    useEffect(() => {
      if (isHovered) {
        controls.start({
          scale: [1, 1.1, 1],
          transition: { duration: 0.3, times: [0, 0.5, 1] },
        })
      }
    }, [isHovered, controls])
  
    return (
      <motion.div
        className="bg-slate-800/50 rounded-xl p-4 flex items-center space-x-4 cursor-pointer"
        whileHover={{ boxShadow: "0 0 20px rgba(6, 182, 212, 0.3)" }}
        onHoverStart={() => setIsHovered(true)}
        onHoverEnd={() => setIsHovered(false)}
      >
        <motion.div className="bg-cyan-500/20 p-2 rounded-lg" animate={controls}>
          <Icon className="w-6 h-6 text-cyan-400" />
        </motion.div>
        <div>
          <p className="text-sm text-slate-400">{title}</p>
          <motion.p
            className="text-2xl font-bold text-white"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            {value}
          </motion.p>
        </div>
      </motion.div>
    )
  }

================
File: src/components/Dashboard/cards/WhyCodeConnect.tsx
================
import { useScroll, useTransform, useSpring } from "framer-motion"
import { type ReactNode } from "react"
import { Ease } from "gsap"
import { motion, useReducedMotion } from "framer-motion"
import { CheckCircle2, Code, Hexagon, LucideIcon, Users, Zap } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";
import { HoverCard } from "./HoverCard"

export default function WhyCodeConnect() { 
    return (
        <motion.section id="why-codeconnect" className="mt-32">
        <h2 className="text-4xl font-bold text-center mb-16">Why CodeConnect?</h2>
        <div className="max-w-4xl mx-auto bg-slate-800/50 backdrop-blur-xl rounded-2xl p-8 shadow-2xl shadow-cyan-500/10">
          <p className="text-lg text-slate-300 mb-6">
            CodeConnect is built for developers, by developers. Whether you're working remotely, teaching, or
            conducting interviews, our platform enables smoother, faster, and more interactive coding sessions. We
            remove the friction from pair programming by ensuring low latency, secure connections, and real-time
            updates, making remote collaboration as effective as in-person coding.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <HoverCard
              icon={Zap}
              title="Zero Latency"
              description="Built with WebRTC for ultra-fast peer-to-peer connections."
            />
            <HoverCard
              icon={Users}
              title="Seamless Collaboration"
              description="Join a room instantly and start coding together."
            />
            <HoverCard
              icon={CheckCircle2}
              title="Secure & Private"
              description="All rooms are encrypted to ensure data privacy."
            />
            <HoverCard
              icon={Code}
              title="Developer-Friendly"
              description="Powered by modern web technologies like React, WebRTC, and CodeMirror."
            />
          </div>
        </div>
      </motion.section>
    );
}

================
File: src/components/Dashboard/AnimatedBackground.tsx
================
import { useRef, useEffect } from "react"
import * as THREE from "three"

const AnimatedBackground = () => {
  const containerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (!containerRef.current) return

    const scene = new THREE.Scene()
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
    const renderer = new THREE.WebGLRenderer({ alpha: true })

    renderer.setSize(window.innerWidth, window.innerHeight)
    containerRef.current.appendChild(renderer.domElement)

    const geometry = new THREE.IcosahedronGeometry(1, 1)
    const material = new THREE.MeshBasicMaterial({
      color: 0x06b6d4,
      wireframe: true,
      transparent: true,
      opacity: 0.3,
    })
    const icosahedron = new THREE.Mesh(geometry, material)
    scene.add(icosahedron)

    camera.position.z = 5

    const animate = () => {
      requestAnimationFrame(animate)
      icosahedron.rotation.x += 0.001
      icosahedron.rotation.y += 0.001
      renderer.render(scene, camera)
    }

    animate()

    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight
      camera.updateProjectionMatrix()
      renderer.setSize(window.innerWidth, window.innerHeight)
    }

    window.addEventListener("resize", handleResize)

    return () => {
      window.removeEventListener("resize", handleResize)
      containerRef.current?.removeChild(renderer.domElement)
    }
  }, [])

  return <div ref={containerRef} className="fixed inset-0 pointer-events-none" />
}

export default AnimatedBackground

================
File: src/components/Dashboard/Cursor.tsx
================
"use client"

import type React from "react"
import { useEffect, useRef, useState, useCallback } from "react"
import { gsap } from "gsap"
import { debounce } from "lodash"

const AdvancedCursor: React.FC = () => {
  const cursorOuterRef = useRef<HTMLDivElement>(null)
  const cursorInnerRef = useRef<HTMLDivElement>(null)
  const [isHovering, setIsHovering] = useState(false)
  const [isClicking, setIsClicking] = useState(false)

  const handleMouseMove = useCallback(
    debounce((e: MouseEvent) => {
      const { clientX, clientY } = e
      if (cursorOuterRef.current && cursorInnerRef.current) {
        gsap.to(cursorOuterRef.current, {
          x: clientX,
          y: clientY,
          duration: 0.6,
          ease: "power3.out",
        })
        gsap.to(cursorInnerRef.current, {
          x: clientX,
          y: clientY,
          duration: 0.2,
          ease: "power3.out",
        })
      }

      // Add slight tilt based on velocity
      const speed = Math.sqrt(e.movementX ** 2 + e.movementY ** 2)
      const tiltX = gsap.utils.clamp(-20, 20, e.movementY * 2)
      const tiltY = gsap.utils.clamp(-20, 20, -e.movementX * 2)

      if (cursorOuterRef.current) {
        gsap.to(cursorOuterRef.current, {
          rotateX: tiltX,
          rotateY: tiltY,
          duration: 0.5,
        })
      }
    }, 5),
    [],
  )

  const handleMouseDown = useCallback(() => {
    setIsClicking(true)
    gsap.to([cursorOuterRef.current, cursorInnerRef.current], {
      scale: 0.8,
      duration: 0.2,
    })
  }, [])

  const handleMouseUp = useCallback(() => {
    setIsClicking(false)
    gsap.to([cursorOuterRef.current, cursorInnerRef.current], {
      scale: 1,
      duration: 0.2,
    })
  }, [])

  const handleElementsHover = useCallback(() => {
    const interactiveElements = document.querySelectorAll("button, a, input, [data-cursor-interact]")

    interactiveElements.forEach((element) => {
      element.addEventListener("mouseenter", () => {
        setIsHovering(true)
        gsap.to(cursorOuterRef.current, {
          scale: 1.5,
          backgroundColor: "rgba(6, 182, 212, 0.1)",
          duration: 0.3,
        })
        gsap.to(cursorInnerRef.current, {
          scale: 0.5,
          backgroundColor: "rgba(6, 182, 212, 1)",
          duration: 0.3,
        })
      })

      element.addEventListener("mouseleave", () => {
        setIsHovering(false)
        gsap.to([cursorOuterRef.current, cursorInnerRef.current], {
          scale: 1,
          backgroundColor: "rgba(6, 182, 212, 0.3)",
          duration: 0.3,
        })
      })
    })
  }, [])

  const initMagneticButtons = useCallback(() => {
    const buttons = document.querySelectorAll("[data-magnetic]")

    buttons.forEach((button) => {
      button.addEventListener("mousemove", (e) => {
        const rect = button.getBoundingClientRect()
        const mouseEvent = e as MouseEvent
        const centerX = rect.left + rect.width / 2
        const centerY = rect.top + rect.height / 2
        const distance = Math.sqrt(Math.pow(mouseEvent.clientX - centerX, 2) + Math.pow(mouseEvent.clientY - centerY, 2))

        if (distance < 100) {
          const magneticPull = (100 - distance) / 100
          gsap.to(cursorOuterRef.current, {
            x: centerX + (mouseEvent.clientX- centerX) * 0.4,
            y: centerY + (mouseEvent.clientY - centerY) * 0.4,
            duration: 0.3,
          })
        }
      })
    })
  }, [])

  useEffect(() => {
    // Initialize rotation timeline
    const rotateTl = gsap.timeline({ repeat: -1, defaults: { ease: "none" } })
    rotateTl.to(cursorOuterRef.current, {
      rotate: 360,
      duration: 5,
      ease: "none",
    })

    // Add event listeners
    window.addEventListener("mousemove", handleMouseMove)
    window.addEventListener("mousedown", handleMouseDown)
    window.addEventListener("mouseup", handleMouseUp)

    // Initialize interactions
    handleElementsHover()
    initMagneticButtons()

    // Cleanup function
    return () => {
      window.removeEventListener("mousemove", handleMouseMove)
      window.removeEventListener("mousedown", handleMouseDown)
      window.removeEventListener("mouseup", handleMouseUp)
      rotateTl.kill()
    }
  }, [handleMouseMove, handleMouseDown, handleMouseUp, handleElementsHover, initMagneticButtons])

  return (
    <>
      {/* Outer cursor */}
      <div
        ref={cursorOuterRef}
        className="fixed pointer-events-none z-50 mix-blend-difference w-10 h-10 -ml-5 -mt-5 transform will-change-transform"
      >
        {/* Animated border */}
        <div className="absolute inset-0">
          {[...Array(4)].map((_, i) => (
            <div
              key={i}
              className="absolute inset-0 rounded-full border border-cyan-400/30"
              style={{
                transform: `rotate(${i * 90}deg)`,
                animation: `spin${i + 1} 4s linear infinite`,
              }}
            />
          ))}
        </div>
      </div>

      {/* Inner cursor */}
      <div
        ref={cursorInnerRef}
        className="fixed w-4 h-4 pointer-events-none z-50 rounded-full bg-cyan-400/30 backdrop-blur-sm -ml-2 -mt-2 transform will-change-transform mix-blend-difference"
      >
        {/* Inner dot */}
        <div
          className={`absolute top-1/2 left-1/2 w-1 h-1 -ml-0.5 -mt-0.5 rounded-full bg-cyan-400 transition-transform duration-200 ease-in-out ${
            isClicking ? "scale-150" : "scale-100"
          }`}
        />
      </div>

      <style jsx global>{`
        * {
          cursor: none !important;
        }

        @keyframes spin1 {
          0% { transform: rotate(0deg) scale(1); }
          50% { transform: rotate(180deg) scale(1.2); }
          100% { transform: rotate(360deg) scale(1); }
        }

        @keyframes spin2 {
          0% { transform: rotate(90deg) scale(1.1); }
          50% { transform: rotate(270deg) scale(1); }
          100% { transform: rotate(450deg) scale(1.1); }
        }

        @keyframes spin3 {
          0% { transform: rotate(180deg) scale(1.2); }
          50% { transform: rotate(360deg) scale(1); }
          100% { transform: rotate(540deg) scale(1.2); }
        }

        @keyframes spin4 {
          0% { transform: rotate(270deg) scale(1); }
          50% { transform: rotate(450deg) scale(1.1); }
          100% { transform: rotate(630deg) scale(1); }
        }
      `}</style>
    </>
  )
}

export default AdvancedCursor

================
File: src/components/Dashboard/Decorative.tsx
================
import { motion, useReducedMotion } from "framer-motion"
import { Hexagon } from "lucide-react"
import { useRef, useState, useEffect } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence } from "framer-motion"
import { useInView } from "react-intersection-observer"
import { useAnimation } from "framer-motion"
import { HTMLMotionProps } from "framer-motion";


export const FloatingHexagon = ({ delay = 0 }) => (
  <motion.div
    className="absolute"
    style={{
      top: `${Math.random() * 100}%`,
      left: `${Math.random() * 100}%`,
    }}
    initial={{ opacity: 0, scale: 0 }}
    animate={{
      opacity: [0.1, 0.3, 0.1],
      scale: [1, 1.2, 1],
      rotate: [0, 360],
    }}
    transition={{
      duration: 20,
      delay,
      repeat: Number.POSITIVE_INFINITY,
      ease: "linear",
    }}
  >
    <Hexagon className="w-8 h-8 text-cyan-500/10" />
  </motion.div>
)

export const CodeBlock = () => {
    const codeLines = [
        "const room = new CodeRoom();",
        "room.onJoin((user) => {",
        "    console.log(`${user} joined`);",
        "});",
        "",
        "room.onMessage((msg) => {",
        "    collaborators.push(msg);",
        "});",
    ]

    return (
        <motion.div
            className="bg-slate-800/70 rounded-lg p-4 font-mono text-sm text-cyan-300 overflow-hidden relative whitespace-pre"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.5 }}
        >
            {codeLines.map((line, index) => (
                <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                >
                    {line}
                </motion.div>
            ))}
            <motion.div
                className="absolute top-0 left-0 w-full h-full bg-gradient-to-r from-cyan-500/10 to-blue-500/10"
                animate={{
                    opacity: [0.5, 0.8, 0.5],
                }}
                transition={{
                    duration: 2,
                    repeat: Number.POSITIVE_INFINITY,
                    repeatType: "reverse",
                }}
            />
        </motion.div>
    )
}

export const AnimatedLogo = () => (
  <motion.div
    className="relative w-12 h-12"
    animate={{
      rotate: [0, 360],
    }}
    transition={{
      duration: 20,
      repeat: Number.POSITIVE_INFINITY,
      ease: "linear",
    }}
  >
    <motion.div
      className="absolute inset-0"
      animate={{
        scale: [1, 1.2, 1],
        opacity: [0.7, 1, 0.7],
      }}
      transition={{
        duration: 3,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "reverse",
      }}
    >
      <Hexagon className="w-full h-full text-cyan-400" />
    </motion.div>
    <motion.div
      className="absolute inset-0"
      animate={{
        rotate: [0, -360],
      }}
      transition={{
        duration: 40,
        repeat: Number.POSITIVE_INFINITY,
        ease: "linear",
      }}
    >
      <Hexagon className="w-full h-full text-blue-400 opacity-50" />
    </motion.div>
  </motion.div>
)

export const PulsingCircle = () => (
  <div className="relative">
    <motion.div
      className="absolute inset-0 bg-cyan-500 rounded-full"
      animate={{
        scale: [1, 1.5, 1],
        opacity: [0.5, 0, 0.5],
      }}
      transition={{
        duration: 2,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "loop",
      }}
    />
    <div className="relative bg-cyan-500 w-3 h-3 rounded-full" />
  </div>
)

================
File: src/components/Dashboard/FaqSection.tsx
================
"use client"

import { motion, AnimatePresence } from "framer-motion"
import { Plus, Minus } from "lucide-react"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    },
  },
}

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 100,
      damping: 15,
    },
  },
}

const faqData = [
  {
    question: "Do I need to install anything first?",
    answer: "No, CodeConnect runs entirely in your browser. No installation required!",
  },
  {
    question: "What programming languages does CodeConnect support?",
    answer: "We currently support JavaScript, Python, Java, and C++ with full syntax highlighting and error checking.",
  },
  {
    question: "Will my code be saved if I close the browser?",
    answer: "Your code is temporary and not saved on our servers. Make sure to copy or download before closing.",
  },
  {
    question: "Can I customize the editor appearance?",
    answer: "Yes! You can customize the font size, switch themes, and adjust the layout to your liking.",
  },
  {
    question: "How can I use the AI assistant effectively?",
    answer: "The AI assistant can help debug code, explain segments, suggest optimizations, answer questions, and generate examples—all while being contextually aware of your codebase.",
  },
] as const

export default function FAQSection() {
  return (
    <section className="py-16 px-4 md:px-6 lg:px-8 max-w-5xl mx-auto">
      <motion.div
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, margin: "-100px" }}
        variants={containerVariants}
        className="text-center mb-12"
      >
        <motion.span
          variants={itemVariants}
          className="text-orange-400 font-medium mb-4 block"
        >
          FREQUENTLY ASKED QUESTIONS
        </motion.span>
        <motion.h2
          variants={itemVariants}
          className="text-4xl md:text-5xl font-bold text-white"
        >
          You ask? We{" "}
          <span className="italic font-serif text-slate-300">answer</span>
        </motion.h2>
      </motion.div>

      <motion.div
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1 }}
        viewport={{ once: true, margin: "-100px" }}
        transition={{ duration: 0.4 }}
        className="bg-slate-800/50 backdrop-blur-xl rounded-2xl shadow-lg p-6 md:p-8"
      >
        <Accordion type="single" collapsible className="space-y-4">
          <AnimatePresence>
            {faqData.map((faq, index) => (
              <motion.div
                key={`item-${index + 1}`}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true, margin: "-50px" }}
                transition={{
                  delay: index * 0.1,
                  type: "spring",
                  stiffness: 100,
                  damping: 15,
                }}
              >
                <AccordionItem value={`item-${index + 1}`} className="border-none">
                  <AccordionTrigger className="flex justify-between items-center w-full py-4 text-left text-lg font-semibold text-white hover:no-underline">
                    {({ isExpanded }) => (
                      <>
                        <span>{faq.question}</span>
                        <motion.div
                          className="shrink-0 ml-4 p-2 rounded-full border border-slate-700"
                          animate={{ rotate: isExpanded ? 180 : 0 }}
                          transition={{ type: "spring", stiffness: 200, damping: 20 }}
                        >
                          {isExpanded ? (
                            <Minus className="h-4 w-4 text-orange-400" />
                          ) : (
                            <Plus className="h-4 w-4 text-slate-400" />
                          )}
                        </motion.div>
                      </>
                    )}
                  </AccordionTrigger>

                  <AccordionContent className="text-slate-300 pt-2 pb-4 italic">
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ type: "spring", stiffness: 150, damping: 15 }}
                    >
                      "{faq.answer}"
                    </motion.div>
                  </AccordionContent>
                </AccordionItem>
              </motion.div>
            ))}
          </AnimatePresence>
        </Accordion>
      </motion.div>
    </section>
  )
}

================
File: src/components/Dashboard/Header.tsx
================
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Menu, X } from 'lucide-react';
import { AnimatedLogo } from './Decorative';

export const MobileNav = () => {
  const [isOpen, setIsOpen] = useState(false);

  const menuItems = ["Features", "How It Works", "FAQ"];

  const menuVariants = {
    closed: {
      opacity: 0,
      scale: 0.95,
      transition: {
        staggerChildren: 0.05,
        staggerDirection: -1
      }
    },
    open: {
      opacity: 1,
      scale: 1,
      transition: {
        staggerChildren: 0.05,
        delayChildren: 0.2
      }
    }
  };

  const itemVariants = {
    closed: { opacity: 0, x: -20 },
    open: { opacity: 1, x: 0 }
  };

  return (
    <>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="lg:hidden relative z-50 p-2 text-white top-0"
      >
        <AnimatePresence mode="wait">
          {isOpen ? (
            <motion.div
              key="close"
              initial={{ opacity: 0, rotate: -45 }}
              animate={{ opacity: 1, rotate: 0 }}
              exit={{ opacity: 0, rotate: 45 }}
              transition={{ duration: 0.2 }}
            >
              <X className="w-6 h-6" />
            </motion.div>
          ) : (
            <motion.div
              key="menu"
              initial={{ opacity: 0, rotate: 45 }}
              animate={{ opacity: 1, rotate: 0 }}
              exit={{ opacity: 0, rotate: -45 }}
              transition={{ duration: 0.2 }}
            >
              <Menu className="w-6 h-6" />
            </motion.div>
          )}
        </AnimatePresence>
      </button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 z-40 lg:hidden"
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.95 }}
              transition={{ duration: 0.3 }}
              className="absolute inset-0 bg-slate-900/90 backdrop-blur-xl"
            >
              <motion.nav
                variants={menuVariants}
                initial="closed"
                animate="open"
                exit="closed"
                className="flex flex-col items-center mt-28 justify-top h-full space-y-8"
              >
                {menuItems.map((item) => (
                  <motion.a
                    key={item}
                    href={`#${item.toLowerCase().replace(/\s+/g, "-")}`}
                    variants={itemVariants}
                    onClick={() => setIsOpen(false)}
                    className="text-2xl font-medium text-white relative group"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {item}
                    <motion.div
                      className="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-cyan-400 to-blue-500 group-hover:w-full"
                      transition={{ duration: 0.3 }}
                      layoutId={`underline-${item}`}
                    />
                  </motion.a>
                ))}
              </motion.nav>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

// Modified header section
const Header = () => {
  return (
    <motion.header
      className="flex items-center justify-between mb-16"
      initial={{ opacity: 0, y: -50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8, ease: "easeOut" }}
    >
      <motion.div
        className="flex items-center space-x-2"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <AnimatedLogo />
        <motion.span
          className="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 text-transparent bg-clip-text"
          animate={{
            backgroundPosition: ["0%", "100%", "0%"],
          }}
          transition={{
            duration: 3,
            repeat: Infinity,
            repeatType: "reverse",
          }}
        >
          CodeConnect
        </motion.span>
      </motion.div>
      
      <div className="flex items-center">
        {/* Desktop Navigation */}
        <motion.nav
          className="hidden lg:flex space-x-6"
          variants={{
            hidden: { opacity: 0, y: -20 },
            visible: {
              opacity: 1,
              y: 0,
              transition: {
                staggerChildren: 0.1,
              },
            },
          }}
          initial="hidden"
          animate="visible"
        >
          {["Features", "How It Works", "FAQ"].map((item) => (
            <motion.a
              key={item}
              href={`#${item.toLowerCase().replace(/\s+/g, "-")}`}
              className="text-slate-300 hover:text-white transition-colors relative"
              variants={{
                hidden: { opacity: 0, y: -20 },
                visible: { opacity: 1, y: 0 },
              }}
              whileHover={{ scale: 1.1 }}
            >
              {item}
              <motion.div
                className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-cyan-400 to-blue-500"
                initial={{ scaleX: 0 }}
                whileHover={{ scaleX: 1 }}
                transition={{ duration: 0.3 }}
              />
            </motion.a>
          ))}
        </motion.nav>
        
        {/* Mobile Navigation */}
        <MobileNav />
      </div>
    </motion.header>
  );
};

export default Header;

================
File: src/components/Dashboard/LoadinAnimation.tsx
================
// ModernLoader.tsx
import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';

interface ModernLoaderProps {
  onComplete?: () => void;
  duration?: number; // Allows customizing the total load time (in ms)
}

// ======================
// 1. Custom Hook
// ======================
function useProgress(duration: number, onComplete?: () => void): number {
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    const startTime = Date.now();

    const updateProgress = () => {
      const elapsed = Date.now() - startTime;
      const newProgress = Math.min((elapsed / duration) * 100, 100);

      if (newProgress < 100) {
        setProgress(newProgress);
        requestAnimationFrame(updateProgress);
      } else {
        setProgress(100);
        onComplete?.();
      }
    };

    requestAnimationFrame(updateProgress);
  }, [duration, onComplete]);

  return progress;
}

// ======================
// 2. Constants
// ======================
const RADIUS = 70;
const STROKE_WIDTH = 2;
const CIRCUMFERENCE = 2 * Math.PI * RADIUS;

// Number of pulsing shadows around loader
const PULSING_LAYERS = 4;
// Number of subtle concentric circles behind the progress circle
const SUBTLE_CIRCLES = 3;
// Number of orbiting dots
const ORBITING_DOTS = 12;

// ======================
// 3. Main Component
// ======================
const ModernLoader: React.FC<ModernLoaderProps> = ({
  onComplete,
  duration = 2000, // Default: 3 seconds
}) => {
  // 1. Progress Logic
  const progress = useProgress(duration, onComplete);

  // 2. Stroke offset calculation
  const strokeDashoffset = CIRCUMFERENCE - (progress / 100) * CIRCUMFERENCE;

  return (
    <div className="relative flex items-center justify-center w-68 h-68">
      {/* Soft Teal-Blue Glow Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-teal-900/30 to-blue-800/30 backdrop-blur-xl rounded-full" />

      {/* Pulsing Outer Shadows */}
      {[...Array(PULSING_LAYERS)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute inset-0 rounded-full"
          initial={{ boxShadow: '0 0 0 rgba(56, 189, 248, 0)' }}
          animate={{
            boxShadow: '0 0 60px rgba(56, 189, 248, 0.2)',
          }}
          transition={{
            duration: 1.5,
            repeat: Infinity,
            repeatType: 'reverse',
            delay: i * 0.2,
          }}
        />
      ))}

      {/* Circular SVG Loader */}
      <motion.svg
        className="transform -rotate-90 w-56 h-56"
        viewBox={`0 0 ${(RADIUS + STROKE_WIDTH) * 2} ${
          (RADIUS + STROKE_WIDTH) * 2
        }`}
        animate={{ rotate: [0, 360] }}
        transition={{
          repeat: Infinity,
          duration: 8,
          ease: 'linear',
        }}
      >
        {/* Subtle concentric circles */}
        {[...Array(SUBTLE_CIRCLES)].map((_, i) => (
          <circle
            key={i}
            cx={RADIUS + STROKE_WIDTH}
            cy={RADIUS + STROKE_WIDTH}
            r={RADIUS - i * 4}
            className="stroke-teal-600/30"
            fill="none"
            strokeWidth={0.5}
          />
        ))}

        {/* Progress Circle */}
        <motion.circle
          cx={RADIUS + STROKE_WIDTH}
          cy={RADIUS + STROKE_WIDTH}
          r={RADIUS}
          fill="none"
          stroke="url(#progressGradient)"
          strokeWidth={STROKE_WIDTH}
          strokeDasharray={CIRCUMFERENCE}
          strokeDashoffset={strokeDashoffset}
          strokeLinecap="round"
        />

        {/* Gradient Definition */}
        <defs>
          <linearGradient
            id="progressGradient"
            x1="0%"
            y1="0%"
            x2="100%"
            y2="100%"
          >
            <stop offset="0%" stopColor="#14b8a6">
              <animate
                attributeName="stop-color"
                values="#14b8a6; #0ea5e9; #14b8a6"
                dur="2s"
                repeatCount="indefinite"
              />
            </stop>
            <stop offset="100%" stopColor="#0ea5e9">
              <animate
                attributeName="stop-color"
                values="#0ea5e9; #14b8a6; #0ea5e9"
                dur="2s"
                repeatCount="indefinite"
              />
            </stop>
          </linearGradient>
        </defs>
      </motion.svg>

      {/* Percentage Text & Subtext */}
      <div className="absolute flex flex-col items-center justify-center">
        <div className="relative flex items-baseline">
          <motion.span
            className="text-7xl font-light italic text-transparent bg-clip-text bg-gradient-to-r from-teal-400 to-blue-400"
            animate={{ opacity: [0.8, 1] }}
            transition={{ duration: 0.2 }}
          >
            {Math.round(progress)}
          </motion.span>
          <span className="text-3xl font-light italic text-teal-300/80 ml-1">
            %
          </span>
        </div>

        <motion.div
          className="text-base text-slate-300/80 mt-3 font-light tracking-wider"
        >
          <span className="italic">Loading</span>
          <motion.span
            animate={{ opacity: [0, 1, 0] }}
            transition={{ duration: 0.8, repeat: Infinity }}
          >
            ...
          </motion.span>
        </motion.div>
      </div>

      {/* Orbiting Dots */}
      {[...Array(ORBITING_DOTS)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute w-1.5 h-1.5 rounded-full"
          style={{
            // This calculation sets each dot at an angle of i*(360/ORBITING_DOTS)
            top: `${50 + 40 * Math.sin(i * (2 * Math.PI / ORBITING_DOTS))}%`,
            left: `${50 + 40 * Math.cos(i * (2 * Math.PI / ORBITING_DOTS))}%`,
            background:
              'radial-gradient(circle, rgba(45, 212, 191, 0.6) 0%, rgba(45, 212, 191, 0) 70%)',
          }}
          animate={{
            scale: [0, 1.2, 0],
            opacity: [0, 1, 0],
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            delay: i * 0.15,
          }}
        />
      ))}
    </div>
  );
};

export default ModernLoader;

================
File: src/components/Dashboard/LoadingScreen.tsx
================
// components/LoadingScreen.tsx
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import ModernLoader from './LoadinAnimation';

export default function LoadingScreen() {
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(false);
    }, 3000);
    return () => clearTimeout(timer);
  }, []);

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div 
          initial={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-gradient-to-b from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center z-50"
        >
          <ModernLoader onComplete={() => setIsVisible(false)} />
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: src/components/Dashboard/Slider.tsx
================
"use client"

import React, { useState } from 'react'
import { motion, AnimatePresence } from "framer-motion"

const phrases = ["Code Together", "Build Faster", "Ship Better", "Scale Higher", "Dream Bigger"]

export const CodeConnectSlider = () => {
  const [isHovered, setIsHovered] = useState(false)

  return (
    <div 
      className="w-full overflow-hidden bg-slate-900/50 py-32 relative group"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Subtle background pulse */}
      <motion.div
        className="absolute inset-0 opacity-10"
        animate={{
          opacity: [0.1, 0.15, 0.1],
        }}
        transition={{
          duration: 4,
          repeat: Number.POSITIVE_INFINITY,
          ease: "easeInOut",
        }}
      />

      {/* Main text slider */}
      <div className="relative">
        <motion.div
          className="whitespace-nowrap"
          animate={{
            x: [0, -1920],
          }}
          transition={{
            x: {
              repeat: Number.POSITIVE_INFINITY,
              repeatType: "loop",
              duration: isHovered ? 35 : 25, // Slower base speed with smoother hover transition
              ease: "linear",
            },
          }}
        >
          <div className="inline-flex items-center">
            {[...phrases, ...phrases].map((text, i) => (
              <motion.div
                key={i}
                className="mx-4 inline-flex items-center text-[120px] font-bold tracking-tighter"
                whileHover={{
                  scale: 1.02,
                  transition: {
                    type: "spring",
                    stiffness: 200,
                    damping: 15
                  }
                }}
              >
                <motion.span
                  className="bg-gradient-to-r from-white via-white to-white/50 bg-clip-text text-transparent"
                  initial={{ opacity: 0.9 }}
                  whileHover={{
                    opacity: 1,
                    transition: {
                      duration: 0.2
                    }
                  }}
                >
                  {text}
                </motion.span>
                <motion.span
                  className="mx-8 text-slate-600"
                  animate={{
                    opacity: [0.3, 0.5],
                  }}
                  transition={{
                    duration: 2,
                    repeat: Number.POSITIVE_INFINITY,
                    repeatType: "reverse",
                    ease: "easeInOut"
                  }}
                >
                  /
                </motion.span>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </div>

      {/* Subtle edge fading */}
      <div className="absolute top-0 left-0 w-40 h-full bg-gradient-to-r from-slate-900/50 to-transparent pointer-events-none" />
      <div className="absolute top-0 right-0 w-40 h-full bg-gradient-to-l from-slate-900/50 to-transparent pointer-events-none" />
    </div>
  )
}

export default CodeConnectSlider

================
File: src/components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item 
    ref={ref} 
    className={cn("border-b", className)} 
    {...props} 
  />
))
AccordionItem.displayName = "AccordionItem"

type BaseProps = Omit<React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>, 'children'>;

interface AccordionTriggerProps extends BaseProps {
  children: React.ReactNode | ((props: { isExpanded: boolean }) => React.ReactNode);
}

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  AccordionTriggerProps
>(({ className, children, ...props }, ref) => {
  const [isExpanded, setIsExpanded] = React.useState(false)

  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        ref={ref}
        className={cn(
          "flex flex-1 items-center justify-between transition-all",
          className
        )}
        {...props}
        onMouseDown={() => setIsExpanded(!isExpanded)}
      >
        {typeof children === "function" ? children({ isExpanded }) : children}
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
})
AccordionTrigger.displayName = "AccordionTrigger"

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className={cn(
      "overflow-hidden text-sm transition-all",
      "data-[state=closed]:animate-accordion-up",
      "data-[state=open]:animate-accordion-down"
    )}
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = "AccordionContent"

export { 
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
  type AccordionTriggerProps
}

================
File: src/components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: src/components/ui/button.tsx
================
import * as React from 'react';
import { Slot, Slottable } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      effect: {
        expandIcon: 'group gap-0 relative',
        ringHover: 'transition-all duration-300 hover:ring-2 hover:ring-primary/90 hover:ring-offset-2',
        shine:
          'before:animate-shine relative overflow-hidden before:absolute before:inset-0 before:rounded-[inherit] before:bg-[linear-gradient(45deg,transparent_25%,rgba(255,255,255,0.5)_50%,transparent_75%,transparent_100%)] before:bg-[length:250%_250%,100%_100%] before:bg-no-repeat background-position_0s_ease',
        shineHover:
          'relative overflow-hidden before:absolute before:inset-0 before:rounded-[inherit] before:bg-[linear-gradient(45deg,transparent_25%,rgba(255,255,255,0.5)_50%,transparent_75%,transparent_100%)] before:bg-[length:250%_250%,100%_100%] before:bg-[position:200%_0,0_0] before:bg-no-repeat before:transition-[background-position_0s_ease] hover:before:bg-[position:-100%_0,0_0] before:duration-1000',
        gooeyRight:
        'relative z-0 overflow-hidden transition-all duration-200 before:absolute before:inset-0 before:-z-10 before:translate-x-[150%] before:translate-y-[150%] before:scale-[2.5] before:rounded-[100%] before:bg-primary before:transition-transform before:duration-1000 hover:text-primary-foreground hover:before:translate-x-[0%] hover:before:translate-y-[0%]',
        gooeyLeft:
'relative z-0 overflow-hidden transition-all duration-100 data-[color=white]:after:bg-blue-600/90 data-[color=red]:after:bg-red-600 after:absolute after:inset-0 after:-z-10 after:translate-x-[-150%] after:translate-y-[150%] after:scale-[2.5] after:rounded-[100%] after:transition-transform after:duration-1000 data-[color=white]:hover:text-white data-[color=red]:hover:text-white hover:after:translate-x-[0%] hover:after:translate-y-[0%]',
        underline:
          'relative !no-underline after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-left after:scale-x-100 hover:after:origin-bottom-right hover:after:scale-x-0 after:transition-transform after:ease-in-out after:duration-300',
        hoverUnderline:
          'relative !no-underline after:absolute after:bg-primary after:bottom-2 after:h-[1px] after:w-2/3 after:origin-bottom-right after:scale-x-0 hover:after:origin-bottom-left hover:after:scale-x-100 after:transition-transform after:ease-in-out after:duration-300',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

interface IconProps {
  icon: React.ElementType;
  iconPlacement: 'left' | 'right';
}

interface IconRefProps {
  icon?: never;
  iconPlacement?: undefined;
}

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

export type ButtonIconProps = IconProps | IconRefProps;

const Button = React.forwardRef<HTMLButtonElement, ButtonProps & ButtonIconProps>(
  ({ className, variant, effect, size, icon: Icon, iconPlacement, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp className={cn(buttonVariants({ variant, effect, size, className }))} ref={ref} {...props}>
        {Icon &&
          iconPlacement === 'left' &&
          (effect === 'expandIcon' ? (
            <div className="w-0 translate-x-[0%] pr-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-100 group-hover:pr-2 group-hover:opacity-100">
              <Icon />
            </div>
          ) : (
            <Icon />
          ))}
        <Slottable>{props.children}</Slottable>
        {Icon &&
          iconPlacement === 'right' &&
          (effect === 'expandIcon' ? (
            <div className="w-0 translate-x-[100%] pl-0 opacity-0 transition-all duration-200 group-hover:w-5 group-hover:translate-x-0 group-hover:pl-2 group-hover:opacity-100">
              <Icon />
            </div>
          ) : (
            <Icon />
          ))}
      </Comp>
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };

================
File: src/components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: src/components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: src/components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: src/components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: src/components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: src/components/onedarkpro.json
================
{
    "inherit": true,
    "base": "vs-dark",
    "colors": {
      "activityBar.background": "#282c34",
      "activityBar.foreground": "#d7dae0",
      "activityBarBadge.background": "#4d78cc",
      "activityBarBadge.foreground": "#f8fafd",
      "badge.background": "#282c34",
      "button.background": "#404754",
      "button.secondaryBackground": "#30333d",
      "button.secondaryForeground": "#c0bdbd",
      "checkbox.border": "#404754",
      "debugToolBar.background": "#21252b",
      "descriptionForeground": "#abb2bf",
      "diffEditor.insertedTextBackground": "#00809b33",
      "dropdown.background": "#21252b",
      "dropdown.border": "#21252b",
      "editor.background": "#282c34",
      "editor.findMatchBackground": "#d19a6644",
      "editor.findMatchBorder": "#ffffff5a",
      "editor.findMatchHighlightBackground": "#ffffff22",
      "editor.foreground": "#abb2bf",
      "editorBracketHighlight.foreground1": "#d19a66",
      "editorBracketHighlight.foreground2": "#c678dd",
      "editorBracketHighlight.foreground3": "#56b6c2",
      "editorHoverWidget.highlightForeground": "#61afef",
      "editorInlayHint.foreground": "#abb2bf",
      "editorInlayHint.background": "#2c313c",
      "editor.lineHighlightBackground": "#2c313c",
      "editorLineNumber.activeForeground": "#abb2bf",
      "editorGutter.addedBackground": "#109868",
      "editorGutter.deletedBackground": "#9A353D",
      "editorGutter.modifiedBackground": "#948B60",
      "editorOverviewRuler.addedBackground": "#109868",
      "editorOverviewRuler.deletedBackground": "#9A353D",
      "editorOverviewRuler.modifiedBackground": "#948B60",
      "editor.selectionBackground": "#67769660",
      "editor.selectionHighlightBackground": "#ffffff10",
      "editor.selectionHighlightBorder": "#dddddd",
      "editor.wordHighlightBackground": "#d2e0ff2f",
      "editor.wordHighlightBorder": "#7f848e",
      "editor.wordHighlightStrongBackground": "#abb2bf26",
      "editor.wordHighlightStrongBorder": "#7f848e",
      "editorBracketMatch.background": "#515a6b",
      "editorBracketMatch.border": "#515a6b",
      "editorCursor.background": "#ffffffc9",
      "editorCursor.foreground": "#528bff",
      "editorError.foreground": "#c24038",
      "editorGroup.background": "#181a1f",
      "editorGroup.border": "#181a1f",
      "editorGroupHeader.tabsBackground": "#21252b",
      "editorHoverWidget.background": "#21252b",
      "editorHoverWidget.border": "#181a1f",
      "editorIndentGuide.activeBackground": "#c8c8c859",
      "editorIndentGuide.background": "#3b4048",
      "editorLineNumber.foreground": "#495162",
      "editorMarkerNavigation.background": "#21252b",
      "editorRuler.foreground": "#abb2bf26",
      "editorSuggestWidget.background": "#21252b",
      "editorSuggestWidget.border": "#181a1f",
      "editorSuggestWidget.selectedBackground": "#2c313a",
      "editorWarning.foreground": "#d19a66",
      "editorWhitespace.foreground": "#ffffff1d",
      "editorWidget.background": "#21252b",
      "focusBorder": "#3e4452",
      "gitDecoration.ignoredResourceForeground": "#636b78",
      "input.background": "#1d1f23",
      "input.foreground": "#abb2bf",
      "list.activeSelectionBackground": "#2c313a",
      "list.activeSelectionForeground": "#d7dae0",
      "list.focusBackground": "#323842",
      "list.focusForeground": "#f0f0f0",
      "list.highlightForeground": "#ecebeb",
      "list.hoverBackground": "#2c313a",
      "list.hoverForeground": "#abb2bf",
      "list.inactiveSelectionBackground": "#323842",
      "list.inactiveSelectionForeground": "#d7dae0",
      "list.warningForeground": "#d19a66",
      "menu.foreground": "#abb2bf",
      "menu.separatorBackground": "#343a45",
      "minimapGutter.addedBackground": "#109868",
      "minimapGutter.deletedBackground": "#9A353D",
      "minimapGutter.modifiedBackground": "#948B60",
      "panel.border": "#3e4452",
      "panelSectionHeader.background": "#21252b",
      "peekViewEditor.background": "#1b1d23",
      "peekViewEditor.matchHighlightBackground": "#29244b",
      "peekViewResult.background": "#22262b",
      "scrollbar.shadow": "#23252c",
      "scrollbarSlider.activeBackground": "#747d9180",
      "scrollbarSlider.background": "#4e566660",
      "scrollbarSlider.hoverBackground": "#5a637580",
      "settings.focusedRowBackground": "#282c34",
      "settings.headerForeground": "#fff",
      "sideBar.background": "#21252b",
      "sideBar.foreground": "#abb2bf",
      "sideBarSectionHeader.background": "#282c34",
      "sideBarSectionHeader.foreground": "#abb2bf",
      "statusBar.background": "#21252b",
      "statusBar.debuggingBackground": "#cc6633",
      "statusBar.debuggingBorder": "#ff000000",
      "statusBar.debuggingForeground": "#ffffff",
      "statusBar.foreground": "#9da5b4",
      "statusBar.noFolderBackground": "#21252b",
      "statusBarItem.remoteBackground": "#4d78cc",
      "statusBarItem.remoteForeground": "#f8fafd",
      "tab.activeBackground": "#282c34",
      "tab.activeBorder": "#b4b4b4",
      "tab.activeForeground": "#dcdcdc",
      "tab.border": "#181a1f",
      "tab.hoverBackground": "#323842",
      "tab.inactiveBackground": "#21252b",
      "tab.unfocusedHoverBackground": "#323842",
      "terminal.ansiBlack": "#3f4451",
      "terminal.ansiBlue": "#4aa5f0",
      "terminal.ansiBrightBlack": "#4f5666",
      "terminal.ansiBrightBlue": "#4dc4ff",
      "terminal.ansiBrightCyan": "#4cd1e0",
      "terminal.ansiBrightGreen": "#a5e075",
      "terminal.ansiBrightMagenta": "#de73ff",
      "terminal.ansiBrightRed": "#ff616e",
      "terminal.ansiBrightWhite": "#e6e6e6",
      "terminal.ansiBrightYellow": "#f0a45d",
      "terminal.ansiCyan": "#42b3c2",
      "terminal.ansiGreen": "#8cc265",
      "terminal.ansiMagenta": "#c162de",
      "terminal.ansiRed": "#e05561",
      "terminal.ansiWhite": "#d7dae0",
      "terminal.ansiYellow": "#d18f52",
      "terminal.background": "#282c34",
      "terminal.border": "#3e4452",
      "terminal.foreground": "#abb2bf",
      "terminal.selectionBackground": "#abb2bf30",
      "textBlockQuote.background": "#2e3440",
      "textBlockQuote.border": "#4b5362",
      "textLink.foreground": "#61afef",
      "textPreformat.foreground": "#d19a66",
      "titleBar.activeBackground": "#282c34",
      "titleBar.activeForeground": "#9da5b4",
      "titleBar.inactiveBackground": "#282c34",
      "titleBar.inactiveForeground": "#6b717d",
      "tree.indentGuidesStroke": "#ffffff1d",
      "walkThrough.embeddedEditorBackground": "#2e3440",
      "welcomePage.buttonHoverBackground": "#404754"
    },
    "rules": [
      {
        "foreground": "#abb2bf",
        "token": "meta.embedded"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.delayed.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.list.begin.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.list.end.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.ability.begin.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.ability.end.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.operator.assignment.as.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.separator.pipe.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.separator.delimiter.unison"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.hash.unison"
      },
      {
        "foreground": "#c678dd",
        "token": "variable.other.generic-type.haskell"
      },
      {
        "foreground": "#d19a66",
        "token": "storage.type.haskell"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.magic.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.period.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.element.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.parenthesis.begin.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.parenthesis.end.python"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.parameter.function.language.special.self.python"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.parameter.function.language.special.cls.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "storage.modifier.lifetime.rust"
      },
      {
        "foreground": "#61afef",
        "token": "support.function.std.rust"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.lifetime.rust"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.language.rust"
      },
      {
        "foreground": "#c678dd",
        "token": "support.constant.edge"
      },
      {
        "foreground": "#e06c75",
        "token": "constant.other.character-class.regexp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.word"
      },
      {
        "foreground": "#d19a66",
        "token": "keyword.operator.quantifier.regexp"
      },
      {
        "foreground": "#abb2bf",
        "token": "variable.parameter.function"
      },
      {
        "foreground": "#5c6370",
        "token": "comment markup.link"
      },
      {
        "foreground": "#e5c07b",
        "token": "markup.changed.diff"
      },
      {
        "foreground": "#61afef",
        "token": "meta.diff.header.from-file"
      },
      {
        "foreground": "#61afef",
        "token": "meta.diff.header.to-file"
      },
      {
        "foreground": "#61afef",
        "token": "punctuation.definition.from-file.diff"
      },
      {
        "foreground": "#61afef",
        "token": "punctuation.definition.to-file.diff"
      },
      {
        "foreground": "#98c379",
        "token": "markup.inserted.diff"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.deleted.diff"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.function.c"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.function.cpp"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.begin.bracket.curly.cpp"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.end.bracket.curly.cpp"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.terminator.statement.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.begin.bracket.curly.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.end.bracket.curly.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.parens.begin.bracket.round.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.parens.end.bracket.round.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.parameters.begin.bracket.round.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.parameters.end.bracket.round.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.key-value"
      },
      {
        "foreground": "#61afef",
        "token": "keyword.operator.expression.import"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.constant.math"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.property.math"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.other.constant"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.annotation.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.object.array.java"
      },
      {
        "foreground": "#e06c75",
        "token": "source.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.block.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.method-parameters.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.method-parameters.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.method.identifier.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.method.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.method.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.terminator.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.class.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.class.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.inner-class.begin.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.inner-class.end.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.method-call.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.class.begin.bracket.curly.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.class.end.bracket.curly.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.method.begin.bracket.curly.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.method.end.bracket.curly.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.period.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.bracket.angle.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.annotation.java"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.method.body.java"
      },
      {
        "foreground": "#61afef",
        "token": "meta.method.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.modifier.import.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.generic.java"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.instanceof.java"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.definition.variable.name.java"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.logical"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.bitwise"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.channel"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.property-value.scss"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.property-value.css"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.css"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.scss"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.less"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.color.w3c-standard-color-name.css"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.color.w3c-standard-color-name.scss"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.list.comma.css"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.color.w3c-standard-color-name.css"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.vendored.property-name.css"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.module.node"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.object.module"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.module.node"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.type.module"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.other.readwrite"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.object-literal.key"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.property"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.object.process"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.object.node"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.json"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.instanceof"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.new"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.ternary"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.optional"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.keyof"
      },
      {
        "foreground": "#e06c75",
        "token": "support.type.object.console"
      },
      {
        "foreground": "#d19a66",
        "token": "support.variable.property.process"
      },
      {
        "foreground": "#61afef",
        "token": "entity.name.function"
      },
      {
        "foreground": "#61afef",
        "token": "support.function.console"
      },
      {
        "foreground": "#abb2bf",
        "token": "keyword.operator.misc.rust"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.sigil.rust"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.delete"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.object.dom"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.dom"
      },
      {
        "foreground": "#e06c75",
        "token": "support.variable.property.dom"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.arithmetic"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.comparison"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.decrement"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.increment"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.relational"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.assignment.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.comparison.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.increment.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.decrement.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.bitwise.shift.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.assignment.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.comparison.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.increment.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.decrement.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.bitwise.shift.cpp"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.delimiter"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.separator.c"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.separator.cpp"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.posix-reserved.c"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.posix-reserved.cpp"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.sizeof.c"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.sizeof.cpp"
      },
      {
        "foreground": "#d19a66",
        "token": "variable.parameter.function.language.python"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.python"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.logical.python"
      },
      {
        "foreground": "#d19a66",
        "token": "variable.parameter.function.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.arguments.begin.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.arguments.end.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.arguments.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.list.begin.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.list.end.python"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function-call.generic.python"
      },
      {
        "foreground": "#d19a66",
        "token": "constant.character.format.placeholder.other.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "keyword.operator"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.assignment.compound"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.assignment.compound.js"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.assignment.compound.ts"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.namespace"
      },
      {
        "foreground": "#e06c75",
        "token": "variable"
      },
      {
        "foreground": "#abb2bf",
        "token": "variable.c"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.language"
      },
      {
        "foreground": "#abb2bf",
        "token": "token.variable.parameter.java"
      },
      {
        "foreground": "#e5c07b",
        "token": "import.storage.java"
      },
      {
        "foreground": "#c678dd",
        "token": "token.package.keyword"
      },
      {
        "foreground": "#abb2bf",
        "token": "token.package"
      },
      {
        "foreground": "#61afef",
        "token": "entity.name.function"
      },
      {
        "foreground": "#61afef",
        "token": "meta.require"
      },
      {
        "foreground": "#61afef",
        "token": "support.function.any-method"
      },
      {
        "foreground": "#61afef",
        "token": "variable.function"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.type.namespace"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.class"
      },
      {
        "foreground": "#e5c07b",
        "token": " entity.name.type.class"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.class.identifier.namespace.type"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.class"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.other.class.js"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.other.class.ts"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.other.class.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.type"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.control"
      },
      {
        "foreground": "#d19a66",
        "token": "control.elements"
      },
      {
        "foreground": "#d19a66",
        "token": " keyword.operator.less"
      },
      {
        "foreground": "#61afef",
        "token": "keyword.other.special-method"
      },
      {
        "foreground": "#c678dd",
        "token": "storage"
      },
      {
        "foreground": "#c678dd",
        "token": "token.storage"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.delete"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.in"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.of"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.instanceof"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.new"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.typeof"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.void"
      },
      {
        "foreground": "#e5c07b",
        "token": "token.storage.type.java"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.function"
      },
      {
        "foreground": "#abb2bf",
        "token": "support.type.property-name"
      },
      {
        "foreground": "#e06c75",
        "token": "support.type.property-name.toml"
      },
      {
        "foreground": "#e06c75",
        "token": " support.type.property-name.table.toml"
      },
      {
        "foreground": "#e06c75",
        "token": " support.type.property-name.array.toml"
      },
      {
        "foreground": "#abb2bf",
        "token": "support.constant.property-value"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.font-name"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.tag"
      },
      {
        "foreground": "#98c379",
        "token": "string"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.other.symbol"
      },
      {
        "foreground": "#d19a66",
        "token": "constant.numeric"
      },
      {
        "foreground": "#d19a66",
        "token": "constant"
      },
      {
        "foreground": "#d19a66",
        "token": "punctuation.definition.constant"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.tag"
      },
      {
        "foreground": "#d19a66",
        "token": "entity.other.attribute-name"
      },
      {
        "foreground": "#61afef",
        "token": "entity.other.attribute-name.id"
      },
      {
        "foreground": "#d19a66",
        "token": "entity.other.attribute-name.class.css"
      },
      {
        "foreground": "#c678dd",
        "token": "meta.selector"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.heading"
      },
      {
        "foreground": "#61afef",
        "token": "markup.heading punctuation.definition.heading"
      },
      {
        "foreground": "#61afef",
        "token": " entity.name.section"
      },
      {
        "foreground": "#e06c75",
        "token": "keyword.other.unit"
      },
      {
        "foreground": "#d19a66",
        "token": "markup.bold"
      },
      {
        "foreground": "#d19a66",
        "token": "todo.bold"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.bold"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.italic"
      },
      {
        "foreground": "#c678dd",
        "token": " punctuation.definition.italic"
      },
      {
        "foreground": "#c678dd",
        "token": "todo.emphasis"
      },
      {
        "foreground": "#c678dd",
        "token": "emphasis md"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.section.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.heading.markdown"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.list.begin.markdown"
      },
      {
        "foreground": "#abb2bf",
        "token": "markup.heading.setext"
      },
      {
        "foreground": "#d19a66",
        "token": "punctuation.definition.bold.markdown"
      },
      {
        "foreground": "#98c379",
        "token": "markup.inline.raw.markdown"
      },
      {
        "foreground": "#98c379",
        "token": "markup.inline.raw.string.markdown"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.raw.markdown"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.list.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.string.begin.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.string.end.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.metadata.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "beginning.punctuation.definition.list.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.definition.metadata.markdown"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.underline.link.markdown"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.underline.link.image.markdown"
      },
      {
        "foreground": "#61afef",
        "token": "string.other.link.title.markdown"
      },
      {
        "foreground": "#61afef",
        "token": "string.other.link.description.markdown"
      },
      {
        "foreground": "#98c379",
        "token": "markup.raw.monospace.asciidoc"
      },
      {
        "foreground": "#e5c07b",
        "token": "punctuation.definition.asciidoc"
      },
      {
        "foreground": "#e5c07b",
        "token": "markup.list.asciidoc"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.link.asciidoc"
      },
      {
        "foreground": "#c678dd",
        "token": "markup.other.url.asciidoc"
      },
      {
        "foreground": "#61afef",
        "token": "string.unquoted.asciidoc"
      },
      {
        "foreground": "#61afef",
        "token": "markup.other.url.asciidoc"
      },
      {
        "foreground": "#56b6c2",
        "token": "string.regexp"
      },
      {
        "foreground": "#e06c75",
        "token": "punctuation.section.embedded"
      },
      {
        "foreground": "#e06c75",
        "token": " variable.interpolation"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.section.embedded.begin"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.section.embedded.end"
      },
      {
        "foreground": "#ffffff",
        "token": "invalid.illegal"
      },
      {
        "foreground": "#abb2bf",
        "token": "invalid.illegal.bad-ampersand.html"
      },
      {
        "foreground": "#e06c75",
        "token": "invalid.illegal.unrecognized-tag.html"
      },
      {
        "foreground": "#ffffff",
        "token": "invalid.broken"
      },
      {
        "foreground": "#ffffff",
        "token": "invalid.deprecated"
      },
      {
        "foreground": "#d19a66",
        "token": "invalid.deprecated.entity.other.attribute-name.html"
      },
      {
        "foreground": "#ffffff",
        "token": "invalid.unimplemented"
      },
      {
        "foreground": "#e06c75",
        "token": "source.json meta.structure.dictionary.json > string.quoted.json"
      },
      {
        "foreground": "#e06c75",
        "token": "source.json meta.structure.dictionary.json > string.quoted.json > punctuation.string"
      },
      {
        "foreground": "#98c379",
        "token": "source.json meta.structure.dictionary.json > value.json > string.quoted.json"
      },
      {
        "foreground": "#98c379",
        "token": "source.json meta.structure.array.json > value.json > string.quoted.json"
      },
      {
        "foreground": "#98c379",
        "token": "source.json meta.structure.dictionary.json > value.json > string.quoted.json > punctuation"
      },
      {
        "foreground": "#98c379",
        "token": "source.json meta.structure.array.json > value.json > string.quoted.json > punctuation"
      },
      {
        "foreground": "#56b6c2",
        "token": "source.json meta.structure.dictionary.json > constant.language.json"
      },
      {
        "foreground": "#56b6c2",
        "token": "source.json meta.structure.array.json > constant.language.json"
      },
      {
        "foreground": "#e06c75",
        "token": "support.type.property-name.json"
      },
      {
        "foreground": "#e06c75",
        "token": "support.type.property-name.json punctuation"
      },
      {
        "foreground": "#c678dd",
        "token": "text.html.laravel-blade source.php.embedded.line.html entity.name.tag.laravel-blade"
      },
      {
        "foreground": "#c678dd",
        "token": "text.html.laravel-blade source.php.embedded.line.html support.constant.laravel-blade"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.other.namespace.use.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.other.namespace.use-as.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.other.alias.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "meta.interface.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.error-control.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.type.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.array.begin.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.array.end.php"
      },
      {
        "foreground": "#f44747",
        "token": "invalid.illegal.non-null-typehinted.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "meta.other.type.phpdoc.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "keyword.other.type.php"
      },
      {
        "foreground": "#e5c07b",
        "token": "keyword.other.array.phpdoc.php"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function-call.php"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function-call.object.php"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function-call.static.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.parameters.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.parameters.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.delimiter.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.scope.begin.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.section.scope.end.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.terminator.expression.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.arguments.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.arguments.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.storage-type.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.storage-type.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.array.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.array.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.begin.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.end.bracket.round.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.begin.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.end.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.section.switch-block.end.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.section.switch-block.start.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.section.switch-block.begin.bracket.curly.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.section.switch-block.end.bracket.curly.php"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.core.rust"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.ext.php"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.std.php"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.core.php"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.parser-token.php"
      },
      {
        "foreground": "#61afef",
        "token": "entity.name.goto-label.php"
      },
      {
        "foreground": "#61afef",
        "token": "support.other.php"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.logical.php"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.bitwise.php"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.arithmetic.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.regexp.php"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.comparison.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.heredoc.php"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.nowdoc.php"
      },
      {
        "foreground": "#61afef",
        "token": "meta.function.decorator.python"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.token.decorator.python"
      },
      {
        "foreground": "#56b6c2",
        "token": "meta.function.decorator.identifier.python"
      },
      {
        "foreground": "#abb2bf",
        "token": "function.parameter"
      },
      {
        "foreground": "#abb2bf",
        "token": "function.brace"
      },
      {
        "foreground": "#abb2bf",
        "token": "function.parameter.ruby"
      },
      {
        "foreground": "#abb2bf",
        "token": " function.parameter.cs"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.language.symbol.ruby"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.language.symbol.hashkey.ruby"
      },
      {
        "foreground": "#56b6c2",
        "token": "rgb-value"
      },
      {
        "foreground": "#d19a66",
        "token": "inline-color-decoration rgb-value"
      },
      {
        "foreground": "#d19a66",
        "token": "less rgb-value"
      },
      {
        "foreground": "#e06c75",
        "token": "selector.sass"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.primitive.ts"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.builtin.ts"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.primitive.tsx"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.builtin.tsx"
      },
      {
        "foreground": "#abb2bf",
        "token": "block.scope.end"
      },
      {
        "foreground": "#abb2bf",
        "token": "block.scope.begin"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.type.cs"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.variable.local.cs"
      },
      {
        "foreground": "#61afef",
        "token": "token.info-token"
      },
      {
        "foreground": "#d19a66",
        "token": "token.warn-token"
      },
      {
        "foreground": "#f44747",
        "token": "token.error-token"
      },
      {
        "foreground": "#c678dd",
        "token": "token.debug-token"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.definition.template-expression.begin"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.definition.template-expression.end"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.section.embedded"
      },
      {
        "foreground": "#abb2bf",
        "token": "meta.template.expression"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.module"
      },
      {
        "foreground": "#61afef",
        "token": "support.type.type.flowtype"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.primitive"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.property.object"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.parameter.function.js"
      },
      {
        "foreground": "#98c379",
        "token": "keyword.other.template.begin"
      },
      {
        "foreground": "#98c379",
        "token": "keyword.other.template.end"
      },
      {
        "foreground": "#98c379",
        "token": "keyword.other.substitution.begin"
      },
      {
        "foreground": "#98c379",
        "token": "keyword.other.substitution.end"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.operator.assignment"
      },
      {
        "foreground": "#e5c07b",
        "token": "keyword.operator.assignment.go"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.arithmetic.go"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.address.go"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.package.go"
      },
      {
        "foreground": "#56b6c2",
        "token": "support.type.prelude.elm"
      },
      {
        "foreground": "#d19a66",
        "token": "support.constant.elm"
      },
      {
        "foreground": "#c678dd",
        "token": "punctuation.quasi.element"
      },
      {
        "foreground": "#e06c75",
        "token": "constant.character.entity"
      },
      {
        "foreground": "#56b6c2",
        "token": "entity.other.attribute-name.pseudo-element"
      },
      {
        "foreground": "#56b6c2",
        "token": "entity.other.attribute-name.pseudo-class"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.global.clojure"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.symbol.clojure"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.keyword.clojure"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.arguments.coffee"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.parameter.function.coffee"
      },
      {
        "foreground": "#98c379",
        "token": "source.ini"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.scope.prerequisites.makefile"
      },
      {
        "foreground": "#e5c07b",
        "token": "source.makefile"
      },
      {
        "foreground": "#e5c07b",
        "token": "storage.modifier.import.groovy"
      },
      {
        "foreground": "#61afef",
        "token": "meta.method.groovy"
      },
      {
        "foreground": "#e06c75",
        "token": "meta.definition.variable.name.groovy"
      },
      {
        "foreground": "#98c379",
        "token": "meta.definition.class.inherited.classes.groovy"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.variable.semantic.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.texture.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.sampler.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.object.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.object.rw.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.fx.hlsl"
      },
      {
        "foreground": "#c678dd",
        "token": "support.type.object.hlsl"
      },
      {
        "foreground": "#e06c75",
        "token": "text.variable"
      },
      {
        "foreground": "#e06c75",
        "token": "text.bracketed"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.swift"
      },
      {
        "foreground": "#e5c07b",
        "token": "support.type.vb.asp"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.function.xi"
      },
      {
        "foreground": "#56b6c2",
        "token": "entity.name.class.xi"
      },
      {
        "foreground": "#e06c75",
        "token": "constant.character.character-class.regexp.xi"
      },
      {
        "foreground": "#c678dd",
        "token": "constant.regexp.xi"
      },
      {
        "foreground": "#56b6c2",
        "token": "keyword.control.xi"
      },
      {
        "foreground": "#abb2bf",
        "token": "invalid.xi"
      },
      {
        "foreground": "#98c379",
        "token": "beginning.punctuation.definition.quote.markdown.xi"
      },
      {
        "foreground": "#7f848e",
        "token": "beginning.punctuation.definition.list.markdown.xi"
      },
      {
        "foreground": "#61afef",
        "token": "constant.character.xi"
      },
      {
        "foreground": "#61afef",
        "token": "accent.xi"
      },
      {
        "foreground": "#d19a66",
        "token": "wikiword.xi"
      },
      {
        "foreground": "#ffffff",
        "token": "constant.other.color.rgb-value.xi"
      },
      {
        "foreground": "#5c6370",
        "token": "punctuation.definition.tag.xi"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.label.cs"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.scope-resolution.function.call"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.scope-resolution.function.definition"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.label.cs"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.heading.setext.1.markdown"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.heading.setext.2.markdown"
      },
      {
        "foreground": "#abb2bf",
        "token": " meta.brace.square"
      },
      {
        "foreground": "#7f848e",
        "fontStyle": "italic",
        "token": "comment"
      },
      {
        "foreground": "#7f848e",
        "fontStyle": "italic",
        "token": " punctuation.definition.comment"
      },
      {
        "foreground": "#5c6370",
        "token": "markup.quote.markdown"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.definition.block.sequence.item.yaml"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.language.symbol.elixir"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.language.symbol.double-quoted.elixir"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.name.variable.parameter.cs"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.variable.field.cs"
      },
      {
        "foreground": "#e06c75",
        "token": "markup.deleted"
      },
      {
        "foreground": "#98c379",
        "token": "markup.inserted"
      },
      {
        "fontStyle": "underline",
        "token": "markup.underline"
      },
      {
        "foreground": "#BE5046",
        "token": "punctuation.section.embedded.begin.php"
      },
      {
        "foreground": "#BE5046",
        "token": "punctuation.section.embedded.end.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "support.other.namespace.php"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.parameter.function.latex"
      },
      {
        "foreground": "#e5c07b",
        "token": "variable.other.object"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.other.constant.property"
      },
      {
        "foreground": "#e5c07b",
        "token": "entity.other.inherited-class"
      },
      {
        "foreground": "#e06c75",
        "token": "variable.other.readwrite.c"
      },
      {
        "foreground": "#abb2bf",
        "token": "entity.name.variable.parameter.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "punctuation.separator.colon.php"
      },
      {
        "foreground": "#abb2bf",
        "token": "constant.other.php"
      },
      {
        "foreground": "#c678dd",
        "token": "constant.numeric.decimal.asm.x86_64"
      },
      {
        "foreground": "#d19a66",
        "token": "support.other.parenthesis.regexp"
      },
      {
        "foreground": "#56b6c2",
        "token": "constant.character.escape"
      },
      {
        "foreground": "#e06c75",
        "token": "string.regexp"
      },
      {
        "foreground": "#98c379",
        "token": "log.info"
      },
      {
        "foreground": "#e5c07b",
        "token": "log.warning"
      },
      {
        "foreground": "#e06c75",
        "token": "log.error"
      },
      {
        "foreground": "#c678dd",
        "token": "keyword.operator.expression.is"
      },
      {
        "foreground": "#e06c75",
        "token": "entity.name.label"
      },
      {
        "fontStyle": "italic",
        "token": "entity.other.attribute-name.js"
      },
      {
        "fontStyle": "italic",
        "token": "entity.other.attribute-name.ts"
      },
      {
        "fontStyle": "italic",
        "token": "entity.other.attribute-name.jsx"
      },
      {
        "fontStyle": "italic",
        "token": "entity.other.attribute-name.tsx"
      },
      {
        "fontStyle": "italic",
        "token": "variable.parameter"
      },
      {
        "fontStyle": "italic",
        "token": "variable.language.super"
      },
      {
        "fontStyle": "italic",
        "token": "comment.line.double-slash"
      },
      {
        "fontStyle": "italic",
        "token": "comment.block.documentation"
      },
      {
        "fontStyle": "italic",
        "token": "markup.italic.markdown"
      }
    ],
    "encodedTokensColors": []
  }

================
File: src/lib/actions.ts
================
export const ACTIONS = {
  JOIN: 'join',
  JOINED: 'joined',
  DISCONNECTED: 'disconnected',
  CODE_CHANGE: 'code-change',
  SYNC_CODE: 'sync-code',
  LEAVE: 'leave',
  COMPILE: 'compile',
  COMPILE_RESULT: 'compile-result',
  TYPING: 'typing',
  STOP_TYPING: 'stop-typing',
  SEND_MESSAGE: 'send-message',
  RECEIVE_MESSAGE: 'receive-message',
  SYNC_MESSAGES: 'sync-messages'  // Add this new action
}as const;

================
File: src/lib/editor-types.ts
================
// src/lib/editor-types.ts
import { Socket } from "socket.io-client";
// import { ACTIONS } from "./socket";

export interface EditorProps {
  socketRef: React.MutableRefObject<Socket | null>;
  roomId: string;
  onCodeChange: (code: string) => void;
}

export interface EditorConfig {
  mode: {
    name: string;
    json?: boolean;
  };
  theme: string;
  autoCloseTags: boolean;
  autoCloseBrackets: boolean;
  lineNumbers: boolean;
  lineWrapping?: boolean;
  scrollPastEnd?: boolean;
  autofocus?: boolean;
  tabSize?: number;
  indentUnit?: number;
  smartIndent?: boolean;
}

export interface CodeOutput {
  type: 'success' | 'error';
  content: string;
}

// Editor themes
export const EDITOR_THEMES = {
  DRACULA: 'dracula',
  MONOKAI: 'monokai',
  GITHUB_DARK: 'github-dark',
  NORD: 'nord',
} as const;

// Language modes
export const LANGUAGE_MODES = {
  JAVASCRIPT: 'javascript',
  TYPESCRIPT: 'typescript',
  PYTHON: 'python',
  HTML: 'html',
  CSS: 'css',
} as const;

// Default editor configuration
export const DEFAULT_EDITOR_CONFIG: EditorConfig = {
  mode: { name: LANGUAGE_MODES.JAVASCRIPT, json: true },
  theme: EDITOR_THEMES.DRACULA,
  autoCloseTags: true,
  autoCloseBrackets: true,
  lineNumbers: true,
  scrollPastEnd: true,
  autofocus: true,
  tabSize: 2,
  indentUnit: 2,
  smartIndent: true,
  lineWrapping: true,
};

// Default code template
export const DEFAULT_CODE = `// Start coding here
console.log("Hello, CodeConnect!");

// Example function
function greet(name) {
  return \`Welcome to CodeConnect, \${name}!\`;
}`;

// Utility to execute code safely
export const executeCode = (code: string): Promise<CodeOutput> => {
  return new Promise((resolve) => {
    try {
      // Create a new function from the code and execute it
      const fn = new Function('console', `
        let output = [];
        const customConsole = {
          log: (...args) => output.push(args.map(arg => 
            typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
          ).join(' ')),
          error: (...args) => output.push(\`Error: \${args.join(' ')}\`),
          warn: (...args) => output.push(\`Warning: \${args.join(' ')}\`)
        };
        try {
          ${code}
        } catch (error) {
          customConsole.error(error.message);
        }
        return output.join('\\n');
      `);

      const result = fn(console);
      resolve({ type: 'success', content: result });
    } catch (error) {
      resolve({ 
        type: 'error', 
        content: error instanceof Error ? error.message : 'An error occurred'
      });
    }
  });
};

================
File: src/lib/socket.ts
================
import { Socket } from "socket.io-client";
import type { DefaultEventsMap } from '@socket.io/component-emitter';
import { io } from "socket.io-client";

export const initSocket = async (): Promise<Socket<DefaultEventsMap, DefaultEventsMap>> => {
  const SOCKET_URL = process.env.NEXT_PUBLIC_SOCKET_URL || 'http://localhost:8000';
  
  const options = {
    forceNew: true,
    reconnectionAttempts: Infinity,
    timeout: 10000,
    transports: ['websocket']
  };

  return new Promise((resolve, reject) => {
    try {
      const socket = io(SOCKET_URL, options);

      socket.on('connect', () => {
        console.log('Socket connected with ID:', socket.id);
        resolve(socket);
      });

      socket.on('connect_error', (err) => {
        console.error('Socket connection error:', err);
        reject(err);
      });

      // Set up reconnection handling
      socket.on('reconnect_attempt', () => {
        console.log('Attempting to reconnect...');
      });

      socket.on('reconnect', () => {
        console.log('Reconnected successfully');
      });

    } catch (err) {
      console.error('Socket initialization error:', err);
      reject(err);
    }
  });
};

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/providers/socketProvider.tsx
================
"use client";

import { useSearchParams } from 'next/navigation';
import { createContext, Suspense, useContext, useEffect, useState } from 'react';
import { io as ClientIO, Socket } from 'socket.io-client';

type SocketContextType = {
  socket: Socket | null;
  isConnected: boolean;
  lastError: Error | null;
};

const SocketContext = createContext<SocketContextType>({
  socket: null,
  isConnected: false,
  lastError: null
});

export const useSocket = () => {
  return useContext(SocketContext);
};

// Separate component to handle search params
const SocketProviderInner = ({ children }: { children: React.ReactNode }) => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [lastError, setLastError] = useState<Error | null>(null);
  const searchParams = useSearchParams();
  const username = searchParams.get('username');

  useEffect(() => {
    const socketInstance = ClientIO(process.env.NEXT_PUBLIC_SOCKET_URL ?? 'http://localhost:8000', {
      forceNew: true,
      reconnectionAttempts: 5,
      timeout: 10000,
      transports: ['websocket'],
      auth: {
        username
      }
    });

    const handleBeforeUnload = () => {
      const roomId = window.location.pathname.split('/').pop();
      if (socketInstance && roomId) {
        socketInstance.emit('leave', { roomId });
        socketInstance.disconnect();
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    // Connection event handlers
    socketInstance.on('connect', () => {
      console.log('Socket connected with ID:', socketInstance.id);
      setIsConnected(true);
      setLastError(null);
    });

    socketInstance.on('connect_error', (error) => {
      console.error('Socket connection error:', error);
      setLastError(error);
      setIsConnected(false);
    });

    socketInstance.on('disconnect', (reason) => {
      console.log('Socket disconnected:', reason);
      setIsConnected(false);
    });

    socketInstance.on('error', (error) => {
      console.error('Socket error:', error);
      setLastError(error);
    });

    setSocket(socketInstance);

    return () => {
      handleBeforeUnload();
      window.removeEventListener('beforeunload', handleBeforeUnload);
      if (socketInstance) {
        socketInstance.removeAllListeners();
        socketInstance.disconnect();
      }
    };
  }, [username]);

  return (
    <SocketContext.Provider value={{ socket, isConnected, lastError }}>
      {children}
    </SocketContext.Provider>
  );
};

// Main provider component with Suspense boundary
export const SocketProvider = ({ children }: { children: React.ReactNode }) => {
  return (
    <Suspense fallback={<div></div>}>
      <SocketProviderInner>{children}</SocketProviderInner>
    </Suspense>
  );
};

================
File: src/types/env.d.ts
================
// src/types/env.d.ts
declare namespace NodeJS {
    interface ProcessEnv {
      NEXT_PUBLIC_SOCKET_URL: string;
    }
  }

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.mjs
================
import MonacoWebpackPlugin from 'monaco-editor-webpack-plugin';

/** @type {import('next').NextConfig} */
const nextConfig = {
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.plugins.push(
        new MonacoWebpackPlugin({
          languages: ['javascript', 'typescript', 'python', 'java', 'cpp'],
          filename: 'static/[name].worker.js',
        })
      );
    }
    return config;
  },
};

export default nextConfig;

================
File: next.config.ts
================
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  transpilePackages: ['three'],
  webpack: (config) => {
    config.module.rules.push({
      test: /\.(glsl|vs|fs|vert|frag)$/,
      exclude: /node_modules/,
      use: ['raw-loader'],
    })
    return config
  }
}

export default nextConfig

================
File: package.json
================
{
  "name": "code-connect-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "shadcn": "shadcn-ui"
  },
  "dependencies": {
    "@codemirror/language": "^6.10.8",
    "@codemirror/state": "^6.5.1",
    "@codemirror/view": "^6.36.2",
    "@dicebear/collection": "^9.2.2",
    "@emoji-mart/data": "^1.2.1",
    "@emoji-mart/react": "^1.1.1",
    "@google/generative-ai": "^0.21.0",
    "@monaco-editor/react": "^4.6.0",
    "@next/font": "^14.2.15",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.5",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.5",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.7",
    "@react-three/drei": "^9.92.7",
    "@react-three/fiber": "^8.15.12",
    "@react-three/postprocessing": "^2.19.1",
    "@types/gsap": "^1.20.2",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@types/three": "^0.173.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "codemirror": "^6.0.1",
    "framer-motion": "^12.0.6",
    "gsap": "^3.12.7",
    "lucide-react": "^0.474.0",
    "monaco-editor": "^0.52.2",
    "next": "15.1.6",
    "next-fonts": "^1.5.1",
    "next-themes": "^0.4.4",
    "openai": "^4.82.0",
    "raw-loader": "^4.0.2",
    "re-resizable": "^6.10.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hot-toast": "^2.5.1",
    "react-intersection-observer": "^9.15.1",
    "react-nice-avatar": "^1.5.0",
    "react-syntax-highlighter": "^15.6.1",
    "shadcn": "^2.3.0",
    "simplex-noise": "^4.0.3",
    "skeleton": "^0.1.2",
    "socket.io-client": "^4.8.1",
    "sonner": "^1.7.3",
    "tailwind-merge": "^2.6.0",
    "tailwind-variants": "^0.3.1",
    "tailwindcss-animate": "^1.0.7",
    "three": "^0.173.0",
    "three-stdlib": "^2.28.9",
    "uuid": "^11.0.5"
  },
  "devDependencies": {
    "@types/lodash": "^4.17.15",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "monaco-editor-webpack-plugin": "^7.1.0",
    "postcss": "^8",
    "shadcn-ui": "^0.9.4",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import { withTV } from "tailwind-variants/transformer"
import type { Config } from 'tailwindcss'

const config: Config = {
  darkMode: ["class", "class"],
  content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./src/**/*.{ts,tsx}"],
  theme: {
  	container: {
  		center: true,
  		padding: '2rem',
  		screens: {
  			'2xl': '1400px'
  		}
  	},
  	extend: {
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0px'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0px'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}

export default withTV(config)

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "types": ["gsap"],
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
